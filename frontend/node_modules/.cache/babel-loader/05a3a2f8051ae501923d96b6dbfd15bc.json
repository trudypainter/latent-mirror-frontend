{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Quaternion, Matrix4 } from 'three';\nimport { CharsetEncoder } from 'mmd-parser';\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\nvar MMDExporter = /*#__PURE__*/function () {\n  function MMDExporter() {\n    _classCallCheck(this, MMDExporter);\n    _defineProperty(this, \"u2sTable\", void 0);\n  }\n\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  _createClass(MMDExporter, [{\n    key: \"parseVpd\",\n    value: function parseVpd(skin, outputShiftJis, useOriginalBones) {\n      if (skin.isSkinnedMesh !== true) {\n        console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n        return null;\n      }\n      function toStringsFromNumber(num) {\n        if (Math.abs(num) < 1e-6) num = 0;\n        var a = num.toString();\n        if (a.indexOf('.') === -1) {\n          a += '.';\n        }\n        a += '000000';\n        var index = a.indexOf('.');\n        var d = a.slice(0, index);\n        var p = a.slice(index + 1, index + 7);\n        return d + '.' + p;\n      }\n      function toStringsFromArray(array) {\n        var a = [];\n        for (var i = 0, il = array.length; i < il; i++) {\n          a.push(toStringsFromNumber(array[i]));\n        }\n        return a.join(',');\n      }\n      skin.updateMatrixWorld(true);\n      var bones = skin.skeleton.bones;\n      var bones2 = this.getBindBones(skin);\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var quaternion2 = new Quaternion();\n      var matrix = new Matrix4();\n      var array = [];\n      array.push('Vocaloid Pose Data file');\n      array.push('');\n      array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n      array.push(bones.length + ';');\n      array.push('');\n      for (var i = 0, il = bones.length; i < il; i++) {\n        var bone = bones[i];\n        var bone2 = bones2[i];\n        /*\n         * use the bone matrix saved before solving IK.\n         * see CCDIKSolver for the detail.\n         */\n\n        if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n          matrix.fromArray(bone.userData.ik.originalMatrix);\n        } else {\n          matrix.copy(bone.matrix);\n        }\n        position.setFromMatrixPosition(matrix);\n        quaternion.setFromRotationMatrix(matrix);\n        var pArray = position.sub(bone2.position).toArray();\n        var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\n\n        pArray[2] = -pArray[2];\n        qArray[0] = -qArray[0];\n        qArray[1] = -qArray[1];\n        array.push('Bone' + i + '{' + bone.name);\n        array.push('  ' + toStringsFromArray(pArray) + ';');\n        array.push('  ' + toStringsFromArray(qArray) + ';');\n        array.push('}');\n        array.push('');\n      }\n      array.push('');\n      var lines = array.join('\\n');\n      return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n    } // Unicode to Shift_JIS table\n  }, {\n    key: \"unicodeToShiftjis\",\n    value: function unicodeToShiftjis(str) {\n      if (this.u2sTable === undefined) {\n        var encoder = new CharsetEncoder(); // eslint-disable-line no-undef\n\n        var table = encoder.s2uTable;\n        this.u2sTable = {};\n        var keys = Object.keys(table);\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var key = keys[i];\n          var value = table[key];\n          this.u2sTable[value] = parseInt(key);\n        }\n      }\n      var array = [];\n      for (var _i = 0, _il = str.length; _i < _il; _i++) {\n        var code = str.charCodeAt(_i);\n        var _value = this.u2sTable[code];\n        if (_value === undefined) {\n          throw 'cannot convert charcode 0x' + code.toString(16);\n        } else if (_value > 0xff) {\n          array.push(_value >> 8 & 0xff);\n          array.push(_value & 0xff);\n        } else {\n          array.push(_value & 0xff);\n        }\n      }\n      return new Uint8Array(array);\n    }\n  }, {\n    key: \"getBindBones\",\n    value: function getBindBones(skin) {\n      // any more efficient ways?\n      var poseSkin = skin.clone();\n      poseSkin.pose();\n      return poseSkin.skeleton.bones;\n    }\n  }]);\n  return MMDExporter;\n}();\nexport { MMDExporter };","map":{"version":3,"names":["_defineProperty","Vector3","Quaternion","Matrix4","CharsetEncoder","MMDExporter","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","quaternion","quaternion2","matrix","name","replace","bone","bone2","userData","ik","undefined","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","str","u2sTable","encoder","table","s2uTable","keys","Object","key","value","parseInt","code","charCodeAt","Uint8Array","poseSkin","clone","pose"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/exporters/MMDExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Quaternion, Matrix4 } from 'three';\nimport { CharsetEncoder } from 'mmd-parser';\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nclass MMDExporter {\n  constructor() {\n    _defineProperty(this, \"u2sTable\", void 0);\n  }\n\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n      return null;\n    }\n\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6) num = 0;\n      let a = num.toString();\n\n      if (a.indexOf('.') === -1) {\n        a += '.';\n      }\n\n      a += '000000';\n      const index = a.indexOf('.');\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + '.' + p;\n    }\n\n    function toStringsFromArray(array) {\n      const a = [];\n\n      for (let i = 0, il = array.length; i < il; i++) {\n        a.push(toStringsFromNumber(array[i]));\n      }\n\n      return a.join(',');\n    }\n\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push('Vocaloid Pose Data file');\n    array.push('');\n    array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n    array.push(bones.length + ';');\n    array.push('');\n\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n      /*\n       * use the bone matrix saved before solving IK.\n       * see CCDIKSolver for the detail.\n       */\n\n      if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\n\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push('Bone' + i + '{' + bone.name);\n      array.push('  ' + toStringsFromArray(pArray) + ';');\n      array.push('  ' + toStringsFromArray(qArray) + ';');\n      array.push('}');\n      array.push('');\n    }\n\n    array.push('');\n    const lines = array.join('\\n');\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  } // Unicode to Shift_JIS table\n\n\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === undefined) {\n      const encoder = new CharsetEncoder(); // eslint-disable-line no-undef\n\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n\n    const array = [];\n\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n\n      if (value === undefined) {\n        throw 'cannot convert charcode 0x' + code.toString(16);\n      } else if (value > 0xff) {\n        array.push(value >> 8 & 0xff);\n        array.push(value & 0xff);\n      } else {\n        array.push(value & 0xff);\n      }\n    }\n\n    return new Uint8Array(array);\n  }\n\n  getBindBones(skin) {\n    // any more efficient ways?\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n\n}\n\nexport { MMDExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}