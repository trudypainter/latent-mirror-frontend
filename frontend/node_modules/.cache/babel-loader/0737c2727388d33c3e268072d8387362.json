{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\nvar LUTCubeLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LUTCubeLoader, _Loader);\n  var _super = _createSuper(LUTCubeLoader);\n  function LUTCubeLoader() {\n    _classCallCheck(this, LUTCubeLoader);\n    return _super.apply(this, arguments);\n  }\n  _createClass(LUTCubeLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('text');\n      loader.load(url, function (text) {\n        try {\n          onLoad(_this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          _this.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      // Remove empty lines and comments\n      str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n      var title = null;\n      var size = null;\n      var domainMin = new Vector3(0, 0, 0);\n      var domainMax = new Vector3(1, 1, 1);\n      var lines = str.split(/[\\n\\r]+/g);\n      var data = null;\n      var currIndex = 0;\n      for (var i = 0, l = lines.length; i < l; i++) {\n        var line = lines[i].trim();\n        var split = line.split(/\\s/g);\n        switch (split[0]) {\n          case 'TITLE':\n            title = line.substring(7, line.length - 1);\n            break;\n          case 'LUT_3D_SIZE':\n            // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n            // more precision than can be captured with Uint8Array.\n            var sizeToken = split[1];\n            size = parseFloat(sizeToken);\n            data = new Uint8Array(size * size * size * 4);\n            break;\n          case 'DOMAIN_MIN':\n            domainMin.x = parseFloat(split[1]);\n            domainMin.y = parseFloat(split[2]);\n            domainMin.z = parseFloat(split[3]);\n            break;\n          case 'DOMAIN_MAX':\n            domainMax.x = parseFloat(split[1]);\n            domainMax.y = parseFloat(split[2]);\n            domainMax.z = parseFloat(split[3]);\n            break;\n          default:\n            var r = parseFloat(split[0]);\n            var g = parseFloat(split[1]);\n            var b = parseFloat(split[2]);\n            if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n              throw new Error('LUTCubeLoader : Non normalized values not supported.');\n            }\n            data[currIndex + 0] = r * 255;\n            data[currIndex + 1] = g * 255;\n            data[currIndex + 2] = b * 255;\n            data[currIndex + 3] = 255;\n            currIndex += 4;\n        }\n      }\n      var texture = new DataTexture();\n      texture.image.data = data;\n      texture.image.width = size;\n      texture.image.height = size * size;\n      texture.type = UnsignedByteType;\n      texture.magFilter = LinearFilter;\n      texture.minFilter = LinearFilter;\n      texture.wrapS = ClampToEdgeWrapping;\n      texture.wrapT = ClampToEdgeWrapping;\n      texture.generateMipmaps = false;\n      var texture3D = new DataTexture3D();\n      texture3D.image.data = data;\n      texture3D.image.width = size;\n      texture3D.image.height = size;\n      texture3D.image.depth = size;\n      texture3D.type = UnsignedByteType;\n      texture3D.magFilter = LinearFilter;\n      texture3D.minFilter = LinearFilter;\n      texture3D.wrapS = ClampToEdgeWrapping;\n      texture3D.wrapT = ClampToEdgeWrapping;\n      texture3D.wrapR = ClampToEdgeWrapping;\n      texture3D.generateMipmaps = false;\n      return {\n        title: title,\n        size: size,\n        domainMin: domainMin,\n        domainMax: domainMax,\n        texture: texture,\n        texture3D: texture3D\n      };\n    }\n  }]);\n  return LUTCubeLoader;\n}(Loader);\nexport { LUTCubeLoader };","map":{"version":3,"names":["Loader","FileLoader","Vector3","DataTexture","UnsignedByteType","LinearFilter","ClampToEdgeWrapping","DataTexture3D","LUTCubeLoader","url","onLoad","onProgress","onError","loader","manager","setPath","path","setResponseType","load","text","parse","e","console","error","itemError","str","replace","trim","title","size","domainMin","domainMax","lines","split","data","currIndex","i","l","length","line","substring","sizeToken","parseFloat","Uint8Array","x","y","z","r","g","b","Error","texture","image","width","height","type","magFilter","minFilter","wrapS","wrapT","generateMipmaps","texture3D","depth","wrapR"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/LUTCubeLoader.js"],"sourcesContent":["import { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\nclass LUTCubeLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // Remove empty lines and comments\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    let title = null;\n    let size = null;\n    const domainMin = new Vector3(0, 0, 0);\n    const domainMax = new Vector3(1, 1, 1);\n    const lines = str.split(/[\\n\\r]+/g);\n    let data = null;\n    let currIndex = 0;\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n\n      switch (split[0]) {\n        case 'TITLE':\n          title = line.substring(7, line.length - 1);\n          break;\n\n        case 'LUT_3D_SIZE':\n          // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n          // more precision than can be captured with Uint8Array.\n          const sizeToken = split[1];\n          size = parseFloat(sizeToken);\n          data = new Uint8Array(size * size * size * 4);\n          break;\n\n        case 'DOMAIN_MIN':\n          domainMin.x = parseFloat(split[1]);\n          domainMin.y = parseFloat(split[2]);\n          domainMin.z = parseFloat(split[3]);\n          break;\n\n        case 'DOMAIN_MAX':\n          domainMax.x = parseFloat(split[1]);\n          domainMax.y = parseFloat(split[2]);\n          domainMax.z = parseFloat(split[3]);\n          break;\n\n        default:\n          const r = parseFloat(split[0]);\n          const g = parseFloat(split[1]);\n          const b = parseFloat(split[2]);\n\n          if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n            throw new Error('LUTCubeLoader : Non normalized values not supported.');\n          }\n\n          data[currIndex + 0] = r * 255;\n          data[currIndex + 1] = g * 255;\n          data[currIndex + 2] = b * 255;\n          data[currIndex + 3] = 255;\n          currIndex += 4;\n      }\n    }\n\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    const texture3D = new DataTexture3D();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    return {\n      title,\n      size,\n      domainMin,\n      domainMax,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUTCubeLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}