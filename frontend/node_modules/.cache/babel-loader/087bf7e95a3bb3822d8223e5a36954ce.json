{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { BufferGeometry } from 'three';\nimport { SimplifyModifier } from 'three/examples/jsm/modifiers/SimplifyModifier';\nfunction useSimplification(simplePercent) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new SimplifyModifier();\n    }\n  }, []);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new BufferGeometry();\n      if (original.current instanceof BufferGeometry) {\n        geometry = original.current.clone();\n      } else {\n        geometry = geometry.fromGeometry(original.current);\n      }\n      const count = Math.floor(geometry.attributes.position.count * simplePercent); // number of vertices to remove\n\n      ref.current.geometry = modifier.current.modify(geometry, count);\n    }\n  }, [simplePercent]);\n  return ref;\n}\nexport { useSimplification };","map":{"version":3,"names":["useRef","useEffect","BufferGeometry","SimplifyModifier","useSimplification","simplePercent","ref","original","modifier","current","geometry","clone","fromGeometry","count","Math","floor","attributes","position","modify"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/drei/useSimplification.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { BufferGeometry } from 'three';\nimport { SimplifyModifier } from 'three/examples/jsm/modifiers/SimplifyModifier';\n\nfunction useSimplification(simplePercent) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new SimplifyModifier();\n    }\n  }, []);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new BufferGeometry();\n\n      if (original.current instanceof BufferGeometry) {\n        geometry = original.current.clone();\n      } else {\n        geometry = geometry.fromGeometry(original.current);\n      }\n\n      const count = Math.floor(geometry.attributes.position.count * simplePercent); // number of vertices to remove\n\n      ref.current.geometry = modifier.current.modify(geometry, count);\n    }\n  }, [simplePercent]);\n  return ref;\n}\n\nexport { useSimplification };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,gBAAgB,QAAQ,+CAA+C;AAEhF,SAASC,iBAAiB,CAACC,aAAa,EAAE;EACxC,MAAMC,GAAG,GAAGN,MAAM,EAAE;EACpB,MAAMO,QAAQ,GAAGP,MAAM,EAAE;EACzB,MAAMQ,QAAQ,GAAGR,MAAM,EAAE;EACzBC,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,CAACE,OAAO,EAAE;MACrBF,QAAQ,CAACE,OAAO,GAAGH,GAAG,CAACG,OAAO,CAACC,QAAQ,CAACC,KAAK,EAAE;MAC/CH,QAAQ,CAACC,OAAO,GAAG,IAAIN,gBAAgB,EAAE;IAC3C;EACF,CAAC,EAAE,EAAE,CAAC;EACNF,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,CAACE,OAAO,IAAIH,GAAG,CAACG,OAAO,EAAE;MACnC,IAAIC,QAAQ,GAAG,IAAIR,cAAc,EAAE;MAEnC,IAAIK,QAAQ,CAACE,OAAO,YAAYP,cAAc,EAAE;QAC9CQ,QAAQ,GAAGH,QAAQ,CAACE,OAAO,CAACE,KAAK,EAAE;MACrC,CAAC,MAAM;QACLD,QAAQ,GAAGA,QAAQ,CAACE,YAAY,CAACL,QAAQ,CAACE,OAAO,CAAC;MACpD;MAEA,MAAMI,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAACM,UAAU,CAACC,QAAQ,CAACJ,KAAK,GAAGR,aAAa,CAAC,CAAC,CAAC;;MAE9EC,GAAG,CAACG,OAAO,CAACC,QAAQ,GAAGF,QAAQ,CAACC,OAAO,CAACS,MAAM,CAACR,QAAQ,EAAEG,KAAK,CAAC;IACjE;EACF,CAAC,EAAE,CAACR,aAAa,CAAC,CAAC;EACnB,OAAOC,GAAG;AACZ;AAEA,SAASF,iBAAiB"},"metadata":{},"sourceType":"module"}