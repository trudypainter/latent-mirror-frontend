{"ast":null,"code":"import _toArray from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _regeneratorRuntime from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectWithoutProperties from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"font\", \"letterSpacing\", \"lineHeight\", \"size\", \"height\", \"bevelThickness\", \"bevelSize\", \"bevelEnabled\", \"bevelOffset\", \"bevelSegments\", \"curveSegments\", \"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { suspend } from 'suspend-react';\nimport { TextGeometry, FontLoader } from 'three-stdlib';\nvar types = ['string', 'number'];\nvar getTextFromChildren = function getTextFromChildren(children) {\n  var label = '';\n  var rest = [];\n  React.Children.forEach(children, function (child) {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label].concat(rest);\n};\nvar Text3D = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _font = _ref.font,\n    _ref$letterSpacing = _ref.letterSpacing,\n    letterSpacing = _ref$letterSpacing === void 0 ? 0 : _ref$letterSpacing,\n    _ref$lineHeight = _ref.lineHeight,\n    lineHeight = _ref$lineHeight === void 0 ? 1 : _ref$lineHeight,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 1 : _ref$size,\n    _ref$height = _ref.height,\n    height = _ref$height === void 0 ? 0.2 : _ref$height,\n    _ref$bevelThickness = _ref.bevelThickness,\n    bevelThickness = _ref$bevelThickness === void 0 ? 0.1 : _ref$bevelThickness,\n    _ref$bevelSize = _ref.bevelSize,\n    bevelSize = _ref$bevelSize === void 0 ? 0.01 : _ref$bevelSize,\n    _ref$bevelEnabled = _ref.bevelEnabled,\n    bevelEnabled = _ref$bevelEnabled === void 0 ? false : _ref$bevelEnabled,\n    _ref$bevelOffset = _ref.bevelOffset,\n    bevelOffset = _ref$bevelOffset === void 0 ? 0 : _ref$bevelOffset,\n    _ref$bevelSegments = _ref.bevelSegments,\n    bevelSegments = _ref$bevelSegments === void 0 ? 4 : _ref$bevelSegments,\n    _ref$curveSegments = _ref.curveSegments,\n    curveSegments = _ref$curveSegments === void 0 ? 8 : _ref$curveSegments,\n    children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  React.useMemo(function () {\n    return extend({\n      RenamedTextGeometry: TextGeometry\n    });\n  }, []);\n  var font = suspend( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var data, loader;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof _font === 'string')) {\n              _context.next = 8;\n              break;\n            }\n            _context.next = 3;\n            return fetch(_font);\n          case 3:\n            _context.next = 5;\n            return _context.sent.json();\n          case 5:\n            _context.t0 = _context.sent;\n            _context.next = 9;\n            break;\n          case 8:\n            _context.t0 = _font;\n          case 9:\n            data = _context.t0;\n            loader = new FontLoader();\n            return _context.abrupt(\"return\", loader.parse(data));\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [_font]);\n  var opts = useMemo(function () {\n    return {\n      font: font,\n      size: size,\n      height: height,\n      bevelThickness: bevelThickness,\n      bevelSize: bevelSize,\n      bevelEnabled: bevelEnabled,\n      bevelSegments: bevelSegments,\n      bevelOffset: bevelOffset,\n      curveSegments: curveSegments,\n      letterSpacing: letterSpacing,\n      lineHeight: lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  var _useMemo = useMemo(function () {\n      return getTextFromChildren(children);\n    }, [children]),\n    _useMemo2 = _toArray(_useMemo),\n    label = _useMemo2[0],\n    rest = _useMemo2.slice(1);\n  var args = React.useMemo(function () {\n    return [label, opts];\n  }, [label, opts]);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\nexport { Text3D };","map":{"version":3,"names":["_extends","React","useMemo","extend","suspend","TextGeometry","FontLoader","types","getTextFromChildren","children","label","rest","Children","forEach","child","includes","push","Text3D","forwardRef","ref","_font","font","letterSpacing","lineHeight","size","height","bevelThickness","bevelSize","bevelEnabled","bevelOffset","bevelSegments","curveSegments","props","RenamedTextGeometry","fetch","json","data","loader","parse","opts","args","createElement"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@react-three/drei/core/Text3D.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { suspend } from 'suspend-react';\nimport { TextGeometry, FontLoader } from 'three-stdlib';\n\nconst types = ['string', 'number'];\n\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\n\nconst Text3D = /*#__PURE__*/React.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  children,\n  ...props\n}, ref) => {\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const font = suspend(async () => {\n    let data = typeof _font === 'string' ? await (await fetch(_font)).json() : _font;\n    let loader = new FontLoader();\n    return loader.parse(data);\n  }, [_font]);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\n\nexport { Text3D };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}