{"ast":null,"code":"import { ShaderChunk, MathUtils, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, ShaderLib, DataTexture, Vector3, Mesh, CylinderBufferGeometry, Vector2, MeshStandardMaterial, DoubleSide } from 'three';\n\n/**\r\n * Regular expression for matching the `void main() {` opener line in GLSL.\r\n * @type {RegExp}\r\n */\nconst voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n\n/**\r\n * Recursively expands all `#include <xyz>` statements within string of shader code.\r\n * Copied from three's WebGLProgram#parseIncludes for external use.\r\n *\r\n * @param {string} source - The GLSL source code to evaluate\r\n * @return {string} The GLSL code with all includes expanded\r\n */\nfunction expandShaderIncludes(source) {\n  const pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n  function replace(match, include) {\n    let chunk = ShaderChunk[include];\n    return chunk ? expandShaderIncludes(chunk) : match;\n  }\n  return source.replace(pattern, replace);\n}\n\n// Local assign polyfill to avoid importing troika-core\nconst assign = Object.assign || function /*target, ...sources*/\n() {\n  let target = arguments[0];\n  for (let i = 1, len = arguments.length; i < len; i++) {\n    let source = arguments[i];\n    if (source) {\n      for (let prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          target[prop] = source[prop];\n        }\n      }\n    }\n  }\n  return target;\n};\nconst epoch = Date.now();\nconst CONSTRUCTOR_CACHE = new WeakMap();\nconst SHADER_UPGRADE_CACHE = new Map();\n\n// Material ids must be integers, but we can't access the increment from Three's `Material` module,\n// so let's choose a sufficiently large starting value that should theoretically never collide.\nlet materialInstanceId = 1e10;\n\n/**\r\n * A utility for creating a custom shader material derived from another material's\r\n * shaders. This allows you to inject custom shader logic and transforms into the\r\n * builtin ThreeJS materials without having to recreate them from scratch.\r\n *\r\n * @param {THREE.Material} baseMaterial - the original material to derive from\r\n *\r\n * @param {Object} options - How the base material should be modified.\r\n * @param {Object} options.defines - Custom `defines` for the material\r\n * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\r\n * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\r\n *        be accessed and manipulated via the resulting material's `uniforms` property, just like\r\n *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\r\n * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\r\n *        both shaders, and it will automatically be updated on each render frame with a number of\r\n *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\r\n *        true calendar time.\r\n * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\r\n *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\r\n *        those attributes exposed by their normal names as read/write values.\r\n * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\r\n *        shader's `void main` function.\r\n * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\r\n *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\r\n *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\r\n *        want those to apply to your changes use `fragmentColorTransform` instead.\r\n * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\r\n *        output value. Will be injected near the end of the `void main` function, but before any\r\n *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\r\n *        `fragmentMainOutro`.\r\n * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\r\n *        for performing custom rewrites of the full shader code. Useful if you need to do something\r\n *        special that's not covered by the other builtin options. This function will be executed before\r\n *        any other transforms are applied.\r\n * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base\r\n *        material, rather than the default behavior of copying it. This allows the derived material to\r\n *        automatically pick up changes made to the base material and its properties. This can be useful\r\n *        where the derived material is hidden from the user as an implementation detail, allowing them\r\n *        to work with the original material like normal. But it can result in unexpected behavior if not\r\n *        handled carefully.\r\n *\r\n * @return {THREE.Material}\r\n *\r\n * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\r\n * which can be called to get a variant of the derived material for use in shadow casting. If the\r\n * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\r\n * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\r\n * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\r\n * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\r\n * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\r\n * scenarios, e.g. skipping antialiasing or expensive shader logic.\r\n */\nfunction createDerivedMaterial(baseMaterial, options) {\n  // Generate a key that is unique to the content of these `options`. We'll use this\n  // throughout for caching and for generating the upgraded shader code. This increases\n  // the likelihood that the resulting shaders will line up across multiple calls so\n  // their GL programs can be shared and cached.\n  const optionsKey = getKeyForOptions(options);\n\n  // First check to see if we've already derived from this baseMaterial using this\n  // unique set of options, and if so reuse the constructor to avoid some allocations.\n  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);\n  if (!ctorsByDerivation) {\n    CONSTRUCTOR_CACHE.set(baseMaterial, ctorsByDerivation = Object.create(null));\n  }\n  if (ctorsByDerivation[optionsKey]) {\n    return new ctorsByDerivation[optionsKey]();\n  }\n  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;\n\n  // Private onBeforeCompile handler that injects the modified shaders and uniforms when\n  // the renderer switches to this material's program\n  const onBeforeCompile = function (shaderInfo) {\n    baseMaterial.onBeforeCompile.call(this, shaderInfo);\n\n    // Upgrade the shaders, caching the result by incoming source code\n    const cacheKey = optionsKey + '|||' + shaderInfo.vertexShader + '|||' + shaderInfo.fragmentShader;\n    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];\n    if (!upgradedShaders) {\n      const upgraded = upgradeShaders(shaderInfo, options, optionsKey);\n      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;\n    }\n\n    // Inject upgraded shaders and uniforms into the program\n    shaderInfo.vertexShader = upgradedShaders.vertexShader;\n    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;\n    assign(shaderInfo.uniforms, this.uniforms);\n\n    // Inject auto-updating time uniform if requested\n    if (options.timeUniform) {\n      shaderInfo.uniforms[options.timeUniform] = {\n        get value() {\n          return Date.now() - epoch;\n        }\n      };\n    }\n\n    // Users can still add their own handlers on top of ours\n    if (this[privateBeforeCompileProp]) {\n      this[privateBeforeCompileProp](shaderInfo);\n    }\n  };\n  const DerivedMaterial = function DerivedMaterial() {\n    return derive(options.chained ? baseMaterial : baseMaterial.clone());\n  };\n  const derive = function (base) {\n    // Prototype chain to the base material\n    const derived = Object.create(base, descriptor);\n\n    // Store the baseMaterial for reference; this is always the original even when cloning\n    Object.defineProperty(derived, 'baseMaterial', {\n      value: baseMaterial\n    });\n\n    // Needs its own ids\n    Object.defineProperty(derived, 'id', {\n      value: materialInstanceId++\n    });\n    derived.uuid = MathUtils.generateUUID();\n\n    // Merge uniforms, defines, and extensions\n    derived.uniforms = assign({}, base.uniforms, options.uniforms);\n    derived.defines = assign({}, base.defines, options.defines);\n    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = ''; //force a program change from the base material\n    derived.extensions = assign({}, base.extensions, options.extensions);\n\n    // Don't inherit EventDispatcher listeners\n    derived._listeners = undefined;\n    return derived;\n  };\n  const descriptor = {\n    constructor: {\n      value: DerivedMaterial\n    },\n    isDerivedMaterial: {\n      value: true\n    },\n    customProgramCacheKey: {\n      value: function () {\n        return optionsKey;\n      }\n    },\n    onBeforeCompile: {\n      get() {\n        return onBeforeCompile;\n      },\n      set(fn) {\n        this[privateBeforeCompileProp] = fn;\n      }\n    },\n    copy: {\n      writable: true,\n      configurable: true,\n      value: function (source) {\n        baseMaterial.copy.call(this, source);\n        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\n          assign(this.extensions, source.extensions);\n          assign(this.defines, source.defines);\n          assign(this.uniforms, UniformsUtils.clone(source.uniforms));\n        }\n        return this;\n      }\n    },\n    clone: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        const newBase = new baseMaterial.constructor();\n        return derive(newBase).copy(this);\n      }\n    },\n    /**\r\n     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\n    getDepthMaterial: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        let depthMaterial = this._depthMaterial;\n        if (!depthMaterial) {\n          depthMaterial = this._depthMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new MeshDepthMaterial({\n            depthPacking: RGBADepthPacking\n          }), options);\n          depthMaterial.defines.IS_DEPTH_MATERIAL = '';\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n\n        return depthMaterial;\n      }\n    },\n    /**\r\n     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\n    getDistanceMaterial: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        let distanceMaterial = this._distanceMaterial;\n        if (!distanceMaterial) {\n          distanceMaterial = this._distanceMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new MeshDistanceMaterial(), options);\n          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n\n        return distanceMaterial;\n      }\n    },\n    dispose: {\n      writable: true,\n      configurable: true,\n      value() {\n        const {\n          _depthMaterial,\n          _distanceMaterial\n        } = this;\n        if (_depthMaterial) _depthMaterial.dispose();\n        if (_distanceMaterial) _distanceMaterial.dispose();\n        baseMaterial.dispose.call(this);\n      }\n    }\n  };\n  ctorsByDerivation[optionsKey] = DerivedMaterial;\n  return new DerivedMaterial();\n}\nfunction upgradeShaders(_ref, options, key) {\n  let {\n    vertexShader,\n    fragmentShader\n  } = _ref;\n  let {\n    vertexDefs,\n    vertexMainIntro,\n    vertexMainOutro,\n    vertexTransform,\n    fragmentDefs,\n    fragmentMainIntro,\n    fragmentMainOutro,\n    fragmentColorTransform,\n    customRewriter,\n    timeUniform\n  } = options;\n  vertexDefs = vertexDefs || '';\n  vertexMainIntro = vertexMainIntro || '';\n  vertexMainOutro = vertexMainOutro || '';\n  fragmentDefs = fragmentDefs || '';\n  fragmentMainIntro = fragmentMainIntro || '';\n  fragmentMainOutro = fragmentMainOutro || '';\n\n  // Expand includes if needed\n  if (vertexTransform || customRewriter) {\n    vertexShader = expandShaderIncludes(vertexShader);\n  }\n  if (fragmentColorTransform || customRewriter) {\n    // We need to be able to find postprocessing chunks after include expansion in order to\n    // put them after the fragmentColorTransform, so mark them with comments first. Even if\n    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\n    // so we still mark them.\n    fragmentShader = fragmentShader.replace(/^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm, '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n');\n    fragmentShader = expandShaderIncludes(fragmentShader);\n  }\n\n  // Apply custom rewriter function\n  if (customRewriter) {\n    let res = customRewriter({\n      vertexShader,\n      fragmentShader\n    });\n    vertexShader = res.vertexShader;\n    fragmentShader = res.fragmentShader;\n  }\n\n  // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\n  // those and re-insert them into the outro in the correct place:\n  if (fragmentColorTransform) {\n    let postChunks = [];\n    fragmentShader = fragmentShader.replace(/^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm,\n    // [^]+? = non-greedy match of any chars including newlines\n    match => {\n      postChunks.push(match);\n      return '';\n    });\n    fragmentMainOutro = `${fragmentColorTransform}\\n${postChunks.join('\\n')}\\n${fragmentMainOutro}`;\n  }\n\n  // Inject auto-updating time uniform if requested\n  if (timeUniform) {\n    const code = `\\nuniform float ${timeUniform};\\n`;\n    vertexDefs = code + vertexDefs;\n    fragmentDefs = code + fragmentDefs;\n  }\n\n  // Inject a function for the vertexTransform and rename all usages of position/normal/uv\n  if (vertexTransform) {\n    vertexDefs = `${vertexDefs}\nvec3 troika_position_${key};\nvec3 troika_normal_${key};\nvec2 troika_uv_${key};\nvoid troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {\n  ${vertexTransform}\n}\n`;\n    vertexMainIntro = `\ntroika_position_${key} = vec3(position);\ntroika_normal_${key} = vec3(normal);\ntroika_uv_${key} = vec2(uv);\ntroikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});\n${vertexMainIntro}\n`;\n    vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, (match, match1, index, fullStr) => {\n      return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`;\n    });\n  }\n\n  // Inject defs and intro/outro snippets\n  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);\n  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\n  return {\n    vertexShader,\n    fragmentShader\n  };\n}\nfunction injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\n  if (intro || outro || defs) {\n    shaderCode = shaderCode.replace(voidMainRegExp, `\n${defs}\nvoid troikaOrigMain${id}() {`);\n    shaderCode += `\nvoid main() {\n  ${intro}\n  troikaOrigMain${id}();\n  ${outro}\n}`;\n  }\n  return shaderCode;\n}\nfunction optionsJsonReplacer(key, value) {\n  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value;\n}\nlet _idCtr = 0;\nconst optionsHashesToIds = new Map();\nfunction getKeyForOptions(options) {\n  const optionsHash = JSON.stringify(options, optionsJsonReplacer);\n  let id = optionsHashesToIds.get(optionsHash);\n  if (id == null) {\n    optionsHashesToIds.set(optionsHash, id = ++_idCtr);\n  }\n  return id;\n}\n\n// Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\n// TODO how can we keep this from getting stale?\nconst MATERIAL_TYPES_TO_SHADERS = {\n  MeshDepthMaterial: 'depth',\n  MeshDistanceMaterial: 'distanceRGBA',\n  MeshNormalMaterial: 'normal',\n  MeshBasicMaterial: 'basic',\n  MeshLambertMaterial: 'lambert',\n  MeshPhongMaterial: 'phong',\n  MeshToonMaterial: 'phong',\n  MeshStandardMaterial: 'physical',\n  MeshPhysicalMaterial: 'physical',\n  MeshMatcapMaterial: 'matcap',\n  LineBasicMaterial: 'basic',\n  LineDashedMaterial: 'dashed',\n  PointsMaterial: 'points',\n  ShadowMaterial: 'shadow',\n  SpriteMaterial: 'sprite'\n};\n\n/**\r\n * Given a Three.js `Material` instance, find the shaders/uniforms that will be\r\n * used to render that material.\r\n *\r\n * @param material - the Material instance\r\n * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\r\n */\nfunction getShadersForMaterial(material) {\n  let builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\n  return builtinType ? ShaderLib[builtinType] : material; //TODO fallback for unknown type?\n}\n\n/**\r\n * Find all uniforms and their types within a shader code string.\r\n *\r\n * @param {string} shader - The shader code to parse\r\n * @return {object} mapping of uniform names to their glsl type\r\n */\nfunction getShaderUniformTypes(shader) {\n  let uniformRE = /\\buniform\\s+(int|float|vec[234])\\s+([A-Za-z_][\\w]*)/g;\n  let uniforms = Object.create(null);\n  let match;\n  while ((match = uniformRE.exec(shader)) !== null) {\n    uniforms[match[2]] = match[1];\n  }\n  return uniforms;\n}\n\n/**\r\n * @class ShaderFloatArray\r\n *\r\n * When writing a custom WebGL shader, sometimes you need to pass it an array of floating\r\n * point numbers that it can read from. Unfortunately this is very difficult to do in WebGL,\r\n * because:\r\n *\r\n *   - GLSL \"array\" uniforms can only be of a constant length.\r\n *   - Textures can only hold floating point numbers in WebGL1 if the `OES_texture_float`\r\n *     extension is available.\r\n *\r\n * ShaderFloatArray is an array-like abstraction that encodes its floating point data into\r\n * an RGBA texture's four Uint8 components, and provides the corresponding ThreeJS uniforms\r\n * and GLSL code for you to put in your custom shader to query the float values by array index.\r\n *\r\n * This should generally only be used within a fragment shader, as some environments (e.g. iOS)\r\n * only allow texture lookups in fragment shaders.\r\n *\r\n * TODO:\r\n *   - Fix texture to fill both dimensions so we don't easily hit max texture size limits\r\n *   - Use a float texture if the extension is available so we can skip the encoding process\r\n */\nclass ShaderFloatArray {\n  constructor(name) {\n    this.name = name;\n    this.textureUniform = `dataTex_${name}`;\n    this.textureSizeUniform = `dataTexSize_${name}`;\n    this.multiplierUniform = `dataMultiplier_${name}`;\n\n    /**\r\n     * @property dataSizeUniform - the name of the GLSL uniform that will hold the\r\n     * length of the data array.\r\n     * @type {string}\r\n     */\n    this.dataSizeUniform = `dataSize_${name}`;\n\n    /**\r\n     * @property readFunction - the name of the GLSL function that should be called to\r\n     * read data out of the array by index.\r\n     * @type {string}\r\n     */\n    this.readFunction = `readData_${name}`;\n    this._raw = new Float32Array(0);\n    this._texture = new DataTexture(new Uint8Array(0), 0, 1);\n    this._length = 0;\n    this._multiplier = 1;\n  }\n\n  /**\r\n   * @property length - the current length of the data array\r\n   * @type {number}\r\n   */\n  set length(value) {\n    if (value !== this._length) {\n      // Find nearest power-of-2 that holds the new length\n      const size = Math.pow(2, Math.ceil(Math.log2(value)));\n      const raw = this._raw;\n      if (size < raw.length) {\n        this._raw = raw.subarray(0, size);\n      } else if (size > raw.length) {\n        this._raw = new Float32Array(size);\n        this._raw.set(raw);\n      }\n      this._length = value;\n    }\n  }\n  get length() {\n    return this._length;\n  }\n\n  /**\r\n   * Add a value to the end of the data array\r\n   * @param {number} value\r\n   */\n  push(value) {\n    return this.set(this.length++, value);\n  }\n\n  /**\r\n   * Replace the existing data with that from a new array\r\n   * @param {ArrayLike<number>} array\r\n   */\n  setArray(array) {\n    this.length = array.length;\n    this._raw.set(array);\n    this._needsRepack = true;\n  }\n\n  /**\r\n   * Get the current value at index\r\n   * @param {number} index\r\n   * @return {number}\r\n   */\n  get(index) {\n    return this._raw[index];\n  }\n  set(index, value) {\n    if (index + 1 > this._length) {\n      this.length = index + 1;\n    }\n    if (value !== this._raw[index]) {\n      this._raw[index] = value;\n      encodeFloatToFourInts(value / this._multiplier, this._texture.image.data, index * 4);\n      this._needsMultCheck = true;\n    }\n  }\n\n  /**\r\n   * Make a copy of this ShaderFloatArray\r\n   * @return {ShaderFloatArray}\r\n   */\n  clone() {\n    const clone = new ShaderFloatArray(this.name);\n    clone.setArray(this._raw);\n    return clone;\n  }\n\n  /**\r\n   * Retrieve the set of Uniforms that must to be added to the target ShaderMaterial or\r\n   * DerivedMaterial, to feed the GLSL code generated by {@link #getShaderHeaderCode}.\r\n   * @return {Object}\r\n   */\n  getShaderUniforms() {\n    const me = this;\n    return {\n      [this.textureUniform]: {\n        get value() {\n          me._sync();\n          return me._texture;\n        }\n      },\n      [this.textureSizeUniform]: {\n        get value() {\n          me._sync();\n          return me._texture.image.width;\n        }\n      },\n      [this.dataSizeUniform]: {\n        get value() {\n          me._sync();\n          return me.length;\n        }\n      },\n      [this.multiplierUniform]: {\n        get value() {\n          me._sync();\n          return me._multiplier;\n        }\n      }\n    };\n  }\n\n  /**\r\n   * Retrieve the GLSL code that must be injected into the shader's definitions area to\r\n   * enable reading from the data array. This exposes a function with a name matching\r\n   * the {@link #readFunction} property, which other shader code can call to read values\r\n   * from the array by their index.\r\n   * @return {string}\r\n   */\n  getShaderHeaderCode() {\n    const {\n      textureUniform,\n      textureSizeUniform,\n      dataSizeUniform,\n      multiplierUniform,\n      readFunction\n    } = this;\n    return `\nuniform sampler2D ${textureUniform};\nuniform float ${textureSizeUniform};\nuniform float ${dataSizeUniform};\nuniform float ${multiplierUniform};\n\nfloat ${readFunction}(float index) {\n  vec2 texUV = vec2((index + 0.5) / ${textureSizeUniform}, 0.5);\n  vec4 pixel = texture2D(${textureUniform}, texUV);\n  return dot(pixel, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0)) * ${multiplierUniform};\n}\n`;\n  }\n\n  /**\r\n   * @private Synchronize any pending changes to the underlying DataTexture\r\n   */\n  _sync() {\n    const tex = this._texture;\n    const raw = this._raw;\n    let needsRepack = this._needsRepack;\n\n    // If the size of the raw array changed, resize the texture to match\n    if (raw.length !== tex.image.width) {\n      tex.image = {\n        data: new Uint8Array(raw.length * 4),\n        width: raw.length,\n        height: 1\n      };\n      needsRepack = true;\n    }\n\n    // If the values changed, check the multiplier. This should be a value by which\n    // all the values are divided to constrain them to the [0,1] range required by\n    // the Uint8 packing algorithm. We pick the nearest power of 2 that holds the\n    // maximum value for greatest accuracy.\n    if (needsRepack || this._needsMultCheck) {\n      const maxVal = this._raw.reduce((a, b) => Math.max(a, b), 0);\n      const mult = Math.pow(2, Math.ceil(Math.log2(maxVal)));\n      if (mult !== this._multiplier) {\n        this._multiplier = mult;\n        needsRepack = true;\n      }\n      tex.needsUpdate = true;\n      this._needsMultCheck = false;\n    }\n\n    // If things changed in a way we need to repack, do so\n    if (needsRepack) {\n      for (let i = 0, len = raw.length, mult = this._multiplier; i < len; i++) {\n        encodeFloatToFourInts(raw[i] / mult, tex.image.data, i * 4);\n      }\n      this._needsRepack = false;\n    }\n  }\n}\n\n/**\r\n * Encode a floating point number into a set of four 8-bit integers.\r\n * Also see the companion decoder function #decodeFloatFromFourInts.\r\n *\r\n * This is adapted to JavaScript from the basic approach at\r\n * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n * but writes out integers in the range 0-255 instead of floats in the range 0-1\r\n * so they can be more easily used in a Uint8Array for standard WebGL rgba textures.\r\n *\r\n * Some precision will necessarily be lost during the encoding and decoding process.\r\n * Testing shows that the maximum precision error is ~1.18e-10 which should be good\r\n * enough for most cases.\r\n *\r\n * @param {Number} value - the floating point number to encode. Must be in the range [0, 1]\r\n *        otherwise the results will be incorrect.\r\n * @param {Array|Uint8Array} array - an array into which the four ints should be written\r\n * @param {Number} startIndex - index in the output array at which to start writing the ints\r\n * @return {Array|Uint8Array}\r\n */\nfunction encodeFloatToFourInts(value, array, startIndex) {\n  // This is adapted to JS from the basic approach at\n  // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n  // but writes to a Uint8Array instead of floats. Input values must be in\n  // the range [0, 1]. The maximum error after encoding and decoding is ~1.18e-10\n  let enc0 = 255 * value;\n  let enc1 = 255 * (enc0 % 1);\n  let enc2 = 255 * (enc1 % 1);\n  let enc3 = 255 * (enc2 % 1);\n  enc0 = enc0 & 255;\n  enc1 = enc1 & 255;\n  enc2 = enc2 & 255;\n  enc3 = Math.round(enc3) & 255;\n  array[startIndex] = enc0;\n  array[startIndex + 1] = enc1;\n  array[startIndex + 2] = enc2;\n  array[startIndex + 3] = enc3;\n  return array;\n}\n\n/*\r\nInput geometry is a cylinder with r=1, height in y dimension from 0 to 1,\r\ndivided into a reasonable number of height segments.\r\n*/\n\nconst vertexDefs = `\nuniform vec3 pointA;\nuniform vec3 controlA;\nuniform vec3 controlB;\nuniform vec3 pointB;\nuniform float radius;\nvarying float bezierT;\n\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\n  float t2 = 1.0 - t;\n  float b0 = t2 * t2 * t2;\n  float b1 = 3.0 * t * t2 * t2;\n  float b2 = 3.0 * t * t * t2;\n  float b3 = t * t * t;\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\n}\n\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\n  float t2 = 1.0 - t;\n  return -3.0 * p1 * t2 * t2 +\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\n    3.0 * p2 * t * t;\n}\n`;\nconst vertexTransform = `\nfloat t = position.y;\nbezierT = t;\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\n\n// Make \"sideways\" always perpendicular to the camera ray; this ensures that any twists\n// in the cylinder occur where you won't see them: \nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\nif (bezierDir == viewDirection) {\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\n}\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\nvec3 upish = normalize(cross(sideways, bezierDir));\n\n// Build a matrix for transforming this disc in the cylinder:\nmat4 discTx;\ndiscTx[0].xyz = sideways * radius;\ndiscTx[1].xyz = bezierDir * radius;\ndiscTx[2].xyz = upish * radius;\ndiscTx[3].xyz = bezierCenterPos;\ndiscTx[3][3] = 1.0;\n\n// Apply transform, ignoring original y\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\nnormal = normalize(mat3(discTx) * normal);\n`;\nconst fragmentDefs = `\nuniform vec3 dashing;\nvarying float bezierT;\n`;\nconst fragmentMainIntro = `\nif (dashing.x + dashing.y > 0.0) {\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\n  if (dashFrac > dashing.x) {\n    discard;\n  }\n}\n`;\n\n// Debugging: separate color for each of the 6 sides:\n// const fragmentColorTransform = `\n// float sideNum = floor(vUV.x * 6.0);\n// vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\n//   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\n//   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\n//   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\n//   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\n//   vec3(1.0, 0.0, 1.0);\n// gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\n// `\n\nfunction createBezierMeshMaterial(baseMaterial) {\n  return createDerivedMaterial(baseMaterial, {\n    chained: true,\n    uniforms: {\n      pointA: {\n        value: new Vector3()\n      },\n      controlA: {\n        value: new Vector3()\n      },\n      controlB: {\n        value: new Vector3()\n      },\n      pointB: {\n        value: new Vector3()\n      },\n      radius: {\n        value: 0.01\n      },\n      dashing: {\n        value: new Vector3()\n      } //on, off, offset\n    },\n\n    vertexDefs,\n    vertexTransform,\n    fragmentDefs,\n    fragmentMainIntro\n  });\n}\nlet geometry = null;\nconst defaultBaseMaterial = /*#__PURE__*/new MeshStandardMaterial({\n  color: 0xffffff,\n  side: DoubleSide\n});\n\n/**\r\n * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\r\n * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\r\n * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\r\n * automatically.\r\n *\r\n * The cubiz bezier path is determined by its four `Vector3` properties:\r\n * - `pointA`\r\n * - `controlA`\r\n * - `controlB`\r\n * - `pointB`\r\n *\r\n * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\r\n *\r\n * You can also give the tube a dashed appearance with two properties:\r\n *\r\n * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\r\n *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\r\n *   used as input to the cubic bezier function, not its visible length.)\r\n * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\r\n *\r\n * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\r\n * thicker tubes.\r\n *\r\n * TODO: proper geometry bounding sphere and raycasting\r\n * TODO: allow control of the geometry's segment counts\r\n */\nclass BezierMesh extends Mesh {\n  static getGeometry() {\n    return geometry || (geometry = new CylinderBufferGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0));\n  }\n  constructor() {\n    super(BezierMesh.getGeometry(), defaultBaseMaterial);\n    this.pointA = new Vector3();\n    this.controlA = new Vector3();\n    this.controlB = new Vector3();\n    this.pointB = new Vector3();\n    this.radius = 0.01;\n    this.dashArray = new Vector2();\n    this.dashOffset = 0;\n\n    // TODO - disabling frustum culling until I figure out how to customize the\n    //  geometry's bounding sphere that gets used\n    this.frustumCulled = false;\n  }\n\n  // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n  get material() {\n    let derivedMaterial = this._derivedMaterial;\n    const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultBaseMaterial.clone());\n    if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n      derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial);\n      // dispose the derived material when its base material is disposed:\n      baseMaterial.addEventListener('dispose', function onDispose() {\n        baseMaterial.removeEventListener('dispose', onDispose);\n        derivedMaterial.dispose();\n      });\n    }\n    return derivedMaterial;\n  }\n  set material(baseMaterial) {\n    this._baseMaterial = baseMaterial;\n  }\n\n  // Create and update material for shadows upon request:\n  get customDepthMaterial() {\n    return this.material.getDepthMaterial();\n  }\n  get customDistanceMaterial() {\n    return this.material.getDistanceMaterial();\n  }\n  onBeforeRender(shaderInfo) {\n    const {\n      uniforms\n    } = this.material;\n    const {\n      pointA,\n      controlA,\n      controlB,\n      pointB,\n      radius,\n      dashArray,\n      dashOffset\n    } = this;\n    uniforms.pointA.value.copy(pointA);\n    uniforms.controlA.value.copy(controlA);\n    uniforms.controlB.value.copy(controlB);\n    uniforms.pointB.value.copy(pointB);\n    uniforms.radius.value = radius;\n    uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\n  }\n  raycast(raycaster, intersects) {\n    // TODO - just fail for now\n  }\n}\nexport { BezierMesh, ShaderFloatArray, createDerivedMaterial, expandShaderIncludes, getShaderUniformTypes, getShadersForMaterial, voidMainRegExp };","map":{"version":3,"names":["ShaderChunk","MathUtils","UniformsUtils","MeshDepthMaterial","RGBADepthPacking","MeshDistanceMaterial","ShaderLib","DataTexture","Vector3","Mesh","CylinderBufferGeometry","Vector2","MeshStandardMaterial","DoubleSide","voidMainRegExp","expandShaderIncludes","source","pattern","replace","match","include","chunk","assign","Object","target","arguments","i","len","length","prop","hasOwnProperty","epoch","Date","now","CONSTRUCTOR_CACHE","WeakMap","SHADER_UPGRADE_CACHE","Map","materialInstanceId","createDerivedMaterial","baseMaterial","options","optionsKey","getKeyForOptions","ctorsByDerivation","get","set","create","privateBeforeCompileProp","onBeforeCompile","shaderInfo","call","cacheKey","vertexShader","fragmentShader","upgradedShaders","upgraded","upgradeShaders","uniforms","timeUniform","value","DerivedMaterial","derive","chained","clone","base","derived","descriptor","defineProperty","uuid","generateUUID","defines","extensions","_listeners","undefined","constructor","isDerivedMaterial","customProgramCacheKey","fn","copy","writable","configurable","isShaderMaterial","newBase","getDepthMaterial","depthMaterial","_depthMaterial","depthPacking","IS_DEPTH_MATERIAL","getDistanceMaterial","distanceMaterial","_distanceMaterial","IS_DISTANCE_MATERIAL","dispose","key","vertexDefs","vertexMainIntro","vertexMainOutro","vertexTransform","fragmentDefs","fragmentMainIntro","fragmentMainOutro","fragmentColorTransform","customRewriter","res","postChunks","push","join","code","match1","index","fullStr","test","substr","injectIntoShaderCode","shaderCode","id","defs","intro","outro","optionsJsonReplacer","toString","_idCtr","optionsHashesToIds","optionsHash","JSON","stringify","MATERIAL_TYPES_TO_SHADERS","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","getShadersForMaterial","material","builtinType","type","getShaderUniformTypes","shader","uniformRE","exec","ShaderFloatArray","name","textureUniform","textureSizeUniform","multiplierUniform","dataSizeUniform","readFunction","_raw","Float32Array","_texture","Uint8Array","_length","_multiplier","size","Math","pow","ceil","log2","raw","subarray","setArray","array","_needsRepack","encodeFloatToFourInts","image","data","_needsMultCheck","getShaderUniforms","me","_sync","width","getShaderHeaderCode","tex","needsRepack","height","maxVal","reduce","a","b","max","mult","needsUpdate","startIndex","enc0","enc1","enc2","enc3","round","createBezierMeshMaterial","pointA","controlA","controlB","pointB","radius","dashing","geometry","defaultBaseMaterial","color","side","BezierMesh","getGeometry","translate","dashArray","dashOffset","frustumCulled","derivedMaterial","_derivedMaterial","_baseMaterial","_defaultMaterial","addEventListener","onDispose","removeEventListener","customDepthMaterial","customDistanceMaterial","onBeforeRender","x","y","raycast","raycaster","intersects"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/troika-three-text/node_modules/troika-three-utils/dist/troika-three-utils.esm.js"],"sourcesContent":["import { ShaderChunk, MathUtils, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, ShaderLib, DataTexture, Vector3, Mesh, CylinderBufferGeometry, Vector2, MeshStandardMaterial, DoubleSide } from 'three';\n\n/**\r\n * Regular expression for matching the `void main() {` opener line in GLSL.\r\n * @type {RegExp}\r\n */\r\nconst voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n\n/**\r\n * Recursively expands all `#include <xyz>` statements within string of shader code.\r\n * Copied from three's WebGLProgram#parseIncludes for external use.\r\n *\r\n * @param {string} source - The GLSL source code to evaluate\r\n * @return {string} The GLSL code with all includes expanded\r\n */\r\nfunction expandShaderIncludes( source ) {\r\n  const pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n  function replace(match, include) {\r\n    let chunk = ShaderChunk[include];\r\n    return chunk ? expandShaderIncludes(chunk) : match\r\n  }\r\n  return source.replace( pattern, replace )\r\n}\n\n// Local assign polyfill to avoid importing troika-core\r\nconst assign = Object.assign || function(/*target, ...sources*/) {\r\n  let target = arguments[0];\r\n  for (let i = 1, len = arguments.length; i < len; i++) {\r\n    let source = arguments[i];\r\n    if (source) {\r\n      for (let prop in source) {\r\n        if (source.hasOwnProperty(prop)) {\r\n          target[prop] = source[prop];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return target\r\n};\r\n\r\n\r\nconst epoch = Date.now();\r\nconst CONSTRUCTOR_CACHE = new WeakMap();\r\nconst SHADER_UPGRADE_CACHE = new Map();\r\n\r\n// Material ids must be integers, but we can't access the increment from Three's `Material` module,\r\n// so let's choose a sufficiently large starting value that should theoretically never collide.\r\nlet materialInstanceId = 1e10;\r\n\r\n/**\r\n * A utility for creating a custom shader material derived from another material's\r\n * shaders. This allows you to inject custom shader logic and transforms into the\r\n * builtin ThreeJS materials without having to recreate them from scratch.\r\n *\r\n * @param {THREE.Material} baseMaterial - the original material to derive from\r\n *\r\n * @param {Object} options - How the base material should be modified.\r\n * @param {Object} options.defines - Custom `defines` for the material\r\n * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\r\n * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\r\n *        be accessed and manipulated via the resulting material's `uniforms` property, just like\r\n *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\r\n * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\r\n *        both shaders, and it will automatically be updated on each render frame with a number of\r\n *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\r\n *        true calendar time.\r\n * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\r\n *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\r\n *        those attributes exposed by their normal names as read/write values.\r\n * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\r\n *        shader's `void main` function.\r\n * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\r\n *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\r\n *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\r\n *        want those to apply to your changes use `fragmentColorTransform` instead.\r\n * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\r\n *        output value. Will be injected near the end of the `void main` function, but before any\r\n *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\r\n *        `fragmentMainOutro`.\r\n * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\r\n *        for performing custom rewrites of the full shader code. Useful if you need to do something\r\n *        special that's not covered by the other builtin options. This function will be executed before\r\n *        any other transforms are applied.\r\n * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base\r\n *        material, rather than the default behavior of copying it. This allows the derived material to\r\n *        automatically pick up changes made to the base material and its properties. This can be useful\r\n *        where the derived material is hidden from the user as an implementation detail, allowing them\r\n *        to work with the original material like normal. But it can result in unexpected behavior if not\r\n *        handled carefully.\r\n *\r\n * @return {THREE.Material}\r\n *\r\n * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\r\n * which can be called to get a variant of the derived material for use in shadow casting. If the\r\n * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\r\n * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\r\n * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\r\n * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\r\n * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\r\n * scenarios, e.g. skipping antialiasing or expensive shader logic.\r\n */\r\nfunction createDerivedMaterial(baseMaterial, options) {\r\n  // Generate a key that is unique to the content of these `options`. We'll use this\r\n  // throughout for caching and for generating the upgraded shader code. This increases\r\n  // the likelihood that the resulting shaders will line up across multiple calls so\r\n  // their GL programs can be shared and cached.\r\n  const optionsKey = getKeyForOptions(options);\r\n\r\n  // First check to see if we've already derived from this baseMaterial using this\r\n  // unique set of options, and if so reuse the constructor to avoid some allocations.\r\n  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);\r\n  if (!ctorsByDerivation) {\r\n    CONSTRUCTOR_CACHE.set(baseMaterial, (ctorsByDerivation = Object.create(null)));\r\n  }\r\n  if (ctorsByDerivation[optionsKey]) {\r\n    return new ctorsByDerivation[optionsKey]()\r\n  }\r\n\r\n  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;\r\n\r\n  // Private onBeforeCompile handler that injects the modified shaders and uniforms when\r\n  // the renderer switches to this material's program\r\n  const onBeforeCompile = function (shaderInfo) {\r\n    baseMaterial.onBeforeCompile.call(this, shaderInfo);\r\n\r\n    // Upgrade the shaders, caching the result by incoming source code\r\n    const cacheKey = optionsKey + '|||' + shaderInfo.vertexShader + '|||' + shaderInfo.fragmentShader;\r\n    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];\r\n    if (!upgradedShaders) {\r\n      const upgraded = upgradeShaders(shaderInfo, options, optionsKey);\r\n      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;\r\n    }\r\n\r\n    // Inject upgraded shaders and uniforms into the program\r\n    shaderInfo.vertexShader = upgradedShaders.vertexShader;\r\n    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;\r\n    assign(shaderInfo.uniforms, this.uniforms);\r\n\r\n    // Inject auto-updating time uniform if requested\r\n    if (options.timeUniform) {\r\n      shaderInfo.uniforms[options.timeUniform] = {\r\n        get value() {return Date.now() - epoch}\r\n      };\r\n    }\r\n\r\n    // Users can still add their own handlers on top of ours\r\n    if (this[privateBeforeCompileProp]) {\r\n      this[privateBeforeCompileProp](shaderInfo);\r\n    }\r\n  };\r\n\r\n  const DerivedMaterial = function DerivedMaterial() {\r\n    return derive(options.chained ? baseMaterial : baseMaterial.clone())\r\n  };\r\n\r\n  const derive = function(base) {\r\n    // Prototype chain to the base material\r\n    const derived = Object.create(base, descriptor);\r\n\r\n    // Store the baseMaterial for reference; this is always the original even when cloning\r\n    Object.defineProperty(derived, 'baseMaterial', { value: baseMaterial });\r\n\r\n    // Needs its own ids\r\n    Object.defineProperty(derived, 'id', { value: materialInstanceId++ });\r\n    derived.uuid = MathUtils.generateUUID();\r\n\r\n    // Merge uniforms, defines, and extensions\r\n    derived.uniforms = assign({}, base.uniforms, options.uniforms);\r\n    derived.defines = assign({}, base.defines, options.defines);\r\n    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = ''; //force a program change from the base material\r\n    derived.extensions = assign({}, base.extensions, options.extensions);\r\n\r\n    // Don't inherit EventDispatcher listeners\r\n    derived._listeners = undefined;\r\n\r\n    return derived\r\n  };\r\n\r\n  const descriptor = {\r\n    constructor: {value: DerivedMaterial},\r\n    isDerivedMaterial: {value: true},\r\n\r\n    customProgramCacheKey: {\r\n      value: function () {\r\n        return optionsKey\r\n      }\r\n    },\r\n\r\n    onBeforeCompile: {\r\n      get() {\r\n        return onBeforeCompile\r\n      },\r\n      set(fn) {\r\n        this[privateBeforeCompileProp] = fn;\r\n      }\r\n    },\r\n\r\n    copy: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function (source) {\r\n        baseMaterial.copy.call(this, source);\r\n        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\r\n          assign(this.extensions, source.extensions);\r\n          assign(this.defines, source.defines);\r\n          assign(this.uniforms, UniformsUtils.clone(source.uniforms));\r\n        }\r\n        return this\r\n      }\r\n    },\r\n\r\n    clone: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function () {\r\n        const newBase = new baseMaterial.constructor();\r\n        return derive(newBase).copy(this)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\r\n    getDepthMaterial: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function() {\r\n        let depthMaterial = this._depthMaterial;\r\n        if (!depthMaterial) {\r\n          depthMaterial = this._depthMaterial = createDerivedMaterial(\r\n            baseMaterial.isDerivedMaterial\r\n              ? baseMaterial.getDepthMaterial()\r\n              : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),\r\n            options\r\n          );\r\n          depthMaterial.defines.IS_DEPTH_MATERIAL = '';\r\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\r\n        }\r\n        return depthMaterial\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\r\n    getDistanceMaterial: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function() {\r\n        let distanceMaterial = this._distanceMaterial;\r\n        if (!distanceMaterial) {\r\n          distanceMaterial = this._distanceMaterial = createDerivedMaterial(\r\n            baseMaterial.isDerivedMaterial\r\n              ? baseMaterial.getDistanceMaterial()\r\n              : new MeshDistanceMaterial(),\r\n            options\r\n          );\r\n          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';\r\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\r\n        }\r\n        return distanceMaterial\r\n      }\r\n    },\r\n\r\n    dispose: {\r\n      writable: true,\r\n      configurable: true,\r\n      value() {\r\n        const {_depthMaterial, _distanceMaterial} = this;\r\n        if (_depthMaterial) _depthMaterial.dispose();\r\n        if (_distanceMaterial) _distanceMaterial.dispose();\r\n        baseMaterial.dispose.call(this);\r\n      }\r\n    }\r\n  };\r\n\r\n  ctorsByDerivation[optionsKey] = DerivedMaterial;\r\n  return new DerivedMaterial()\r\n}\r\n\r\n\r\nfunction upgradeShaders({vertexShader, fragmentShader}, options, key) {\r\n  let {\r\n    vertexDefs,\r\n    vertexMainIntro,\r\n    vertexMainOutro,\r\n    vertexTransform,\r\n    fragmentDefs,\r\n    fragmentMainIntro,\r\n    fragmentMainOutro,\r\n    fragmentColorTransform,\r\n    customRewriter,\r\n    timeUniform\r\n  } = options;\r\n\r\n  vertexDefs = vertexDefs || '';\r\n  vertexMainIntro = vertexMainIntro || '';\r\n  vertexMainOutro = vertexMainOutro || '';\r\n  fragmentDefs = fragmentDefs || '';\r\n  fragmentMainIntro = fragmentMainIntro || '';\r\n  fragmentMainOutro = fragmentMainOutro || '';\r\n\r\n  // Expand includes if needed\r\n  if (vertexTransform || customRewriter) {\r\n    vertexShader = expandShaderIncludes(vertexShader);\r\n  }\r\n  if (fragmentColorTransform || customRewriter) {\r\n    // We need to be able to find postprocessing chunks after include expansion in order to\r\n    // put them after the fragmentColorTransform, so mark them with comments first. Even if\r\n    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\r\n    // so we still mark them.\r\n    fragmentShader = fragmentShader.replace(\r\n      /^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,\r\n      '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n'\r\n    );\r\n    fragmentShader = expandShaderIncludes(fragmentShader);\r\n  }\r\n\r\n  // Apply custom rewriter function\r\n  if (customRewriter) {\r\n    let res = customRewriter({vertexShader, fragmentShader});\r\n    vertexShader = res.vertexShader;\r\n    fragmentShader = res.fragmentShader;\r\n  }\r\n\r\n  // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\r\n  // those and re-insert them into the outro in the correct place:\r\n  if (fragmentColorTransform) {\r\n    let postChunks = [];\r\n    fragmentShader = fragmentShader.replace(\r\n      /^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\r\n      match => {\r\n        postChunks.push(match);\r\n        return ''\r\n      }\r\n    );\r\n    fragmentMainOutro = `${fragmentColorTransform}\\n${postChunks.join('\\n')}\\n${fragmentMainOutro}`;\r\n  }\r\n\r\n  // Inject auto-updating time uniform if requested\r\n  if (timeUniform) {\r\n    const code = `\\nuniform float ${timeUniform};\\n`;\r\n    vertexDefs = code + vertexDefs;\r\n    fragmentDefs = code + fragmentDefs;\r\n  }\r\n\r\n  // Inject a function for the vertexTransform and rename all usages of position/normal/uv\r\n  if (vertexTransform) {\r\n    vertexDefs = `${vertexDefs}\r\nvec3 troika_position_${key};\r\nvec3 troika_normal_${key};\r\nvec2 troika_uv_${key};\r\nvoid troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {\r\n  ${vertexTransform}\r\n}\r\n`;\r\n    vertexMainIntro = `\r\ntroika_position_${key} = vec3(position);\r\ntroika_normal_${key} = vec3(normal);\r\ntroika_uv_${key} = vec2(uv);\r\ntroikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});\r\n${vertexMainIntro}\r\n`;\r\n    vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, (match, match1, index, fullStr) => {\r\n      return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`\r\n    });\r\n  }\r\n\r\n  // Inject defs and intro/outro snippets\r\n  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);\r\n  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\r\n\r\n  return {\r\n    vertexShader,\r\n    fragmentShader\r\n  }\r\n}\r\n\r\nfunction injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\r\n  if (intro || outro || defs) {\r\n    shaderCode = shaderCode.replace(voidMainRegExp, `\r\n${defs}\r\nvoid troikaOrigMain${id}() {`\r\n    );\r\n    shaderCode += `\r\nvoid main() {\r\n  ${intro}\r\n  troikaOrigMain${id}();\r\n  ${outro}\r\n}`;\r\n  }\r\n  return shaderCode\r\n}\r\n\r\n\r\nfunction optionsJsonReplacer(key, value) {\r\n  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value\r\n}\r\n\r\nlet _idCtr = 0;\r\nconst optionsHashesToIds = new Map();\r\nfunction getKeyForOptions(options) {\r\n  const optionsHash = JSON.stringify(options, optionsJsonReplacer);\r\n  let id = optionsHashesToIds.get(optionsHash);\r\n  if (id == null) {\r\n    optionsHashesToIds.set(optionsHash, (id = ++_idCtr));\r\n  }\r\n  return id\r\n}\n\n// Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\r\n// TODO how can we keep this from getting stale?\r\nconst MATERIAL_TYPES_TO_SHADERS = {\r\n  MeshDepthMaterial: 'depth',\r\n  MeshDistanceMaterial: 'distanceRGBA',\r\n  MeshNormalMaterial: 'normal',\r\n  MeshBasicMaterial: 'basic',\r\n  MeshLambertMaterial: 'lambert',\r\n  MeshPhongMaterial: 'phong',\r\n  MeshToonMaterial: 'phong',\r\n  MeshStandardMaterial: 'physical',\r\n  MeshPhysicalMaterial: 'physical',\r\n  MeshMatcapMaterial: 'matcap',\r\n  LineBasicMaterial: 'basic',\r\n  LineDashedMaterial: 'dashed',\r\n  PointsMaterial: 'points',\r\n  ShadowMaterial: 'shadow',\r\n  SpriteMaterial: 'sprite'\r\n};\r\n\r\n/**\r\n * Given a Three.js `Material` instance, find the shaders/uniforms that will be\r\n * used to render that material.\r\n *\r\n * @param material - the Material instance\r\n * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\r\n */\r\nfunction getShadersForMaterial(material) {\r\n  let builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\r\n  return builtinType ? ShaderLib[builtinType] : material //TODO fallback for unknown type?\r\n}\n\n/**\r\n * Find all uniforms and their types within a shader code string.\r\n *\r\n * @param {string} shader - The shader code to parse\r\n * @return {object} mapping of uniform names to their glsl type\r\n */\r\nfunction getShaderUniformTypes(shader) {\r\n  let uniformRE = /\\buniform\\s+(int|float|vec[234])\\s+([A-Za-z_][\\w]*)/g;\r\n  let uniforms = Object.create(null);\r\n  let match;\r\n  while ((match = uniformRE.exec(shader)) !== null) {\r\n    uniforms[match[2]] = match[1];\r\n  }\r\n  return uniforms\r\n}\n\n/**\r\n * @class ShaderFloatArray\r\n *\r\n * When writing a custom WebGL shader, sometimes you need to pass it an array of floating\r\n * point numbers that it can read from. Unfortunately this is very difficult to do in WebGL,\r\n * because:\r\n *\r\n *   - GLSL \"array\" uniforms can only be of a constant length.\r\n *   - Textures can only hold floating point numbers in WebGL1 if the `OES_texture_float`\r\n *     extension is available.\r\n *\r\n * ShaderFloatArray is an array-like abstraction that encodes its floating point data into\r\n * an RGBA texture's four Uint8 components, and provides the corresponding ThreeJS uniforms\r\n * and GLSL code for you to put in your custom shader to query the float values by array index.\r\n *\r\n * This should generally only be used within a fragment shader, as some environments (e.g. iOS)\r\n * only allow texture lookups in fragment shaders.\r\n *\r\n * TODO:\r\n *   - Fix texture to fill both dimensions so we don't easily hit max texture size limits\r\n *   - Use a float texture if the extension is available so we can skip the encoding process\r\n */\r\nclass ShaderFloatArray {\r\n  constructor(name) {\r\n    this.name = name;\r\n    this.textureUniform = `dataTex_${name}`;\r\n    this.textureSizeUniform = `dataTexSize_${name}`;\r\n    this.multiplierUniform = `dataMultiplier_${name}`;\r\n\r\n    /**\r\n     * @property dataSizeUniform - the name of the GLSL uniform that will hold the\r\n     * length of the data array.\r\n     * @type {string}\r\n     */\r\n    this.dataSizeUniform = `dataSize_${name}`;\r\n\r\n    /**\r\n     * @property readFunction - the name of the GLSL function that should be called to\r\n     * read data out of the array by index.\r\n     * @type {string}\r\n     */\r\n    this.readFunction = `readData_${name}`;\r\n\r\n    this._raw = new Float32Array(0);\r\n    this._texture = new DataTexture(new Uint8Array(0), 0, 1);\r\n    this._length = 0;\r\n    this._multiplier = 1;\r\n  }\r\n\r\n  /**\r\n   * @property length - the current length of the data array\r\n   * @type {number}\r\n   */\r\n  set length(value) {\r\n    if (value !== this._length) {\r\n      // Find nearest power-of-2 that holds the new length\r\n      const size = Math.pow(2, Math.ceil(Math.log2(value)));\r\n      const raw = this._raw;\r\n      if (size < raw.length) {\r\n        this._raw = raw.subarray(0, size);\r\n      }\r\n      else if(size > raw.length) {\r\n        this._raw = new Float32Array(size);\r\n        this._raw.set(raw);\r\n      }\r\n      this._length = value;\r\n    }\r\n  }\r\n  get length() {\r\n    return this._length\r\n  }\r\n\r\n  /**\r\n   * Add a value to the end of the data array\r\n   * @param {number} value\r\n   */\r\n  push(value) {\r\n    return this.set(this.length++, value)\r\n  }\r\n\r\n  /**\r\n   * Replace the existing data with that from a new array\r\n   * @param {ArrayLike<number>} array\r\n   */\r\n  setArray(array) {\r\n    this.length = array.length;\r\n    this._raw.set(array);\r\n    this._needsRepack = true;\r\n  }\r\n\r\n  /**\r\n   * Get the current value at index\r\n   * @param {number} index\r\n   * @return {number}\r\n   */\r\n  get(index) {\r\n    return this._raw[index]\r\n  }\r\n\r\n  set(index, value) {\r\n    if (index + 1 > this._length) {\r\n      this.length = index + 1;\r\n    }\r\n    if (value !== this._raw[index]) {\r\n      this._raw[index] = value;\r\n      encodeFloatToFourInts(\r\n        value / this._multiplier,\r\n        this._texture.image.data,\r\n        index * 4\r\n      );\r\n      this._needsMultCheck = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a copy of this ShaderFloatArray\r\n   * @return {ShaderFloatArray}\r\n   */\r\n  clone() {\r\n    const clone = new ShaderFloatArray(this.name);\r\n    clone.setArray(this._raw);\r\n    return clone\r\n  }\r\n\r\n  /**\r\n   * Retrieve the set of Uniforms that must to be added to the target ShaderMaterial or\r\n   * DerivedMaterial, to feed the GLSL code generated by {@link #getShaderHeaderCode}.\r\n   * @return {Object}\r\n   */\r\n  getShaderUniforms() {\r\n    const me = this;\r\n    return {\r\n      [this.textureUniform]: {get value() {\r\n        me._sync();\r\n        return me._texture\r\n      }},\r\n      [this.textureSizeUniform]: {get value() {\r\n        me._sync();\r\n        return me._texture.image.width\r\n      }},\r\n      [this.dataSizeUniform]: {get value() {\r\n        me._sync();\r\n        return me.length\r\n      }},\r\n      [this.multiplierUniform]: {get value() {\r\n        me._sync();\r\n        return me._multiplier\r\n      }}\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve the GLSL code that must be injected into the shader's definitions area to\r\n   * enable reading from the data array. This exposes a function with a name matching\r\n   * the {@link #readFunction} property, which other shader code can call to read values\r\n   * from the array by their index.\r\n   * @return {string}\r\n   */\r\n  getShaderHeaderCode() {\r\n    const {textureUniform, textureSizeUniform, dataSizeUniform, multiplierUniform, readFunction} = this;\r\n    return `\r\nuniform sampler2D ${textureUniform};\r\nuniform float ${textureSizeUniform};\r\nuniform float ${dataSizeUniform};\r\nuniform float ${multiplierUniform};\r\n\r\nfloat ${readFunction}(float index) {\r\n  vec2 texUV = vec2((index + 0.5) / ${textureSizeUniform}, 0.5);\r\n  vec4 pixel = texture2D(${textureUniform}, texUV);\r\n  return dot(pixel, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0)) * ${multiplierUniform};\r\n}\r\n`\r\n  }\r\n\r\n  /**\r\n   * @private Synchronize any pending changes to the underlying DataTexture\r\n   */\r\n  _sync() {\r\n    const tex = this._texture;\r\n    const raw = this._raw;\r\n    let needsRepack = this._needsRepack;\r\n\r\n    // If the size of the raw array changed, resize the texture to match\r\n    if (raw.length !== tex.image.width) {\r\n      tex.image = {\r\n        data: new Uint8Array(raw.length * 4),\r\n        width: raw.length,\r\n        height: 1\r\n      };\r\n      needsRepack = true;\r\n    }\r\n\r\n    // If the values changed, check the multiplier. This should be a value by which\r\n    // all the values are divided to constrain them to the [0,1] range required by\r\n    // the Uint8 packing algorithm. We pick the nearest power of 2 that holds the\r\n    // maximum value for greatest accuracy.\r\n    if (needsRepack || this._needsMultCheck) {\r\n      const maxVal = this._raw.reduce((a, b) => Math.max(a, b), 0);\r\n      const mult = Math.pow(2, Math.ceil(Math.log2(maxVal)));\r\n      if (mult !== this._multiplier) {\r\n        this._multiplier = mult;\r\n        needsRepack = true;\r\n      }\r\n      tex.needsUpdate = true;\r\n      this._needsMultCheck = false;\r\n    }\r\n\r\n    // If things changed in a way we need to repack, do so\r\n    if (needsRepack) {\r\n      for (let i = 0, len = raw.length, mult = this._multiplier; i < len; i++) {\r\n        encodeFloatToFourInts(raw[i] / mult, tex.image.data, i * 4);\r\n      }\r\n      this._needsRepack = false;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Encode a floating point number into a set of four 8-bit integers.\r\n * Also see the companion decoder function #decodeFloatFromFourInts.\r\n *\r\n * This is adapted to JavaScript from the basic approach at\r\n * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n * but writes out integers in the range 0-255 instead of floats in the range 0-1\r\n * so they can be more easily used in a Uint8Array for standard WebGL rgba textures.\r\n *\r\n * Some precision will necessarily be lost during the encoding and decoding process.\r\n * Testing shows that the maximum precision error is ~1.18e-10 which should be good\r\n * enough for most cases.\r\n *\r\n * @param {Number} value - the floating point number to encode. Must be in the range [0, 1]\r\n *        otherwise the results will be incorrect.\r\n * @param {Array|Uint8Array} array - an array into which the four ints should be written\r\n * @param {Number} startIndex - index in the output array at which to start writing the ints\r\n * @return {Array|Uint8Array}\r\n */\r\nfunction encodeFloatToFourInts(value, array, startIndex) {\r\n  // This is adapted to JS from the basic approach at\r\n  // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n  // but writes to a Uint8Array instead of floats. Input values must be in\r\n  // the range [0, 1]. The maximum error after encoding and decoding is ~1.18e-10\r\n  let enc0 = 255 * value;\r\n  let enc1 = 255 * (enc0 % 1);\r\n  let enc2 = 255 * (enc1 % 1);\r\n  let enc3 = 255 * (enc2 % 1);\r\n\r\n  enc0 = enc0 & 255;\r\n  enc1 = enc1 & 255;\r\n  enc2 = enc2 & 255;\r\n  enc3 = Math.round(enc3) & 255;\r\n\r\n  array[startIndex] = enc0;\r\n  array[startIndex + 1] = enc1;\r\n  array[startIndex + 2] = enc2;\r\n  array[startIndex + 3] = enc3;\r\n  return array\r\n}\n\n/*\r\nInput geometry is a cylinder with r=1, height in y dimension from 0 to 1,\r\ndivided into a reasonable number of height segments.\r\n*/\r\n\r\nconst vertexDefs = `\r\nuniform vec3 pointA;\r\nuniform vec3 controlA;\r\nuniform vec3 controlB;\r\nuniform vec3 pointB;\r\nuniform float radius;\r\nvarying float bezierT;\r\n\r\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\r\n  float t2 = 1.0 - t;\r\n  float b0 = t2 * t2 * t2;\r\n  float b1 = 3.0 * t * t2 * t2;\r\n  float b2 = 3.0 * t * t * t2;\r\n  float b3 = t * t * t;\r\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\r\n}\r\n\r\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\r\n  float t2 = 1.0 - t;\r\n  return -3.0 * p1 * t2 * t2 +\r\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\r\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\r\n    3.0 * p2 * t * t;\r\n}\r\n`;\r\n\r\nconst vertexTransform = `\r\nfloat t = position.y;\r\nbezierT = t;\r\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\r\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\r\n\r\n// Make \"sideways\" always perpendicular to the camera ray; this ensures that any twists\r\n// in the cylinder occur where you won't see them: \r\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\r\nif (bezierDir == viewDirection) {\r\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\r\n}\r\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\r\nvec3 upish = normalize(cross(sideways, bezierDir));\r\n\r\n// Build a matrix for transforming this disc in the cylinder:\r\nmat4 discTx;\r\ndiscTx[0].xyz = sideways * radius;\r\ndiscTx[1].xyz = bezierDir * radius;\r\ndiscTx[2].xyz = upish * radius;\r\ndiscTx[3].xyz = bezierCenterPos;\r\ndiscTx[3][3] = 1.0;\r\n\r\n// Apply transform, ignoring original y\r\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\r\nnormal = normalize(mat3(discTx) * normal);\r\n`;\r\n\r\nconst fragmentDefs = `\r\nuniform vec3 dashing;\r\nvarying float bezierT;\r\n`;\r\n\r\nconst fragmentMainIntro = `\r\nif (dashing.x + dashing.y > 0.0) {\r\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\r\n  if (dashFrac > dashing.x) {\r\n    discard;\r\n  }\r\n}\r\n`;\r\n\r\n// Debugging: separate color for each of the 6 sides:\r\n// const fragmentColorTransform = `\r\n// float sideNum = floor(vUV.x * 6.0);\r\n// vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\r\n//   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\r\n//   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\r\n//   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\r\n//   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\r\n//   vec3(1.0, 0.0, 1.0);\r\n// gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\r\n// `\r\n\r\n\r\n\r\nfunction createBezierMeshMaterial(baseMaterial) {\r\n  return createDerivedMaterial(\r\n    baseMaterial,\r\n    {\r\n      chained: true,\r\n      uniforms: {\r\n        pointA: {value: new Vector3()},\r\n        controlA: {value: new Vector3()},\r\n        controlB: {value: new Vector3()},\r\n        pointB: {value: new Vector3()},\r\n        radius: {value: 0.01},\r\n        dashing: {value: new Vector3()} //on, off, offset\r\n      },\r\n      vertexDefs,\r\n      vertexTransform,\r\n      fragmentDefs,\r\n      fragmentMainIntro\r\n    }\r\n  )\r\n}\n\nlet geometry = null;\r\n\r\nconst defaultBaseMaterial = /*#__PURE__*/new MeshStandardMaterial({color: 0xffffff, side: DoubleSide});\r\n\r\n\r\n/**\r\n * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\r\n * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\r\n * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\r\n * automatically.\r\n *\r\n * The cubiz bezier path is determined by its four `Vector3` properties:\r\n * - `pointA`\r\n * - `controlA`\r\n * - `controlB`\r\n * - `pointB`\r\n *\r\n * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\r\n *\r\n * You can also give the tube a dashed appearance with two properties:\r\n *\r\n * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\r\n *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\r\n *   used as input to the cubic bezier function, not its visible length.)\r\n * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\r\n *\r\n * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\r\n * thicker tubes.\r\n *\r\n * TODO: proper geometry bounding sphere and raycasting\r\n * TODO: allow control of the geometry's segment counts\r\n */\r\nclass BezierMesh extends Mesh {\r\n  static getGeometry() {\r\n    return geometry || (geometry =\r\n      new CylinderBufferGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0)\r\n    )\r\n  }\r\n\r\n  constructor() {\r\n    super(\r\n      BezierMesh.getGeometry(),\r\n      defaultBaseMaterial\r\n    );\r\n\r\n    this.pointA = new Vector3();\r\n    this.controlA = new Vector3();\r\n    this.controlB = new Vector3();\r\n    this.pointB = new Vector3();\r\n    this.radius = 0.01;\r\n    this.dashArray = new Vector2();\r\n    this.dashOffset = 0;\r\n\r\n    // TODO - disabling frustum culling until I figure out how to customize the\r\n    //  geometry's bounding sphere that gets used\r\n    this.frustumCulled = false;\r\n  }\r\n\r\n  // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\r\n  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\r\n  get material() {\r\n    let derivedMaterial = this._derivedMaterial;\r\n    const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultBaseMaterial.clone());\r\n    if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\r\n      derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial);\r\n      // dispose the derived material when its base material is disposed:\r\n      baseMaterial.addEventListener('dispose', function onDispose() {\r\n        baseMaterial.removeEventListener('dispose', onDispose);\r\n        derivedMaterial.dispose();\r\n      });\r\n    }\r\n    return derivedMaterial\r\n  }\r\n  set material(baseMaterial) {\r\n    this._baseMaterial = baseMaterial;\r\n  }\r\n\r\n  // Create and update material for shadows upon request:\r\n  get customDepthMaterial() {\r\n    return this.material.getDepthMaterial()\r\n  }\r\n  get customDistanceMaterial() {\r\n    return this.material.getDistanceMaterial()\r\n  }\r\n\r\n  onBeforeRender(shaderInfo) {\r\n    const {uniforms} = this.material;\r\n    const {pointA, controlA, controlB, pointB, radius, dashArray, dashOffset} = this;\r\n    uniforms.pointA.value.copy(pointA);\r\n    uniforms.controlA.value.copy(controlA);\r\n    uniforms.controlB.value.copy(controlB);\r\n    uniforms.pointB.value.copy(pointB);\r\n    uniforms.radius.value = radius;\r\n    uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\r\n  }\r\n\r\n  raycast(raycaster, intersects) {\r\n    // TODO - just fail for now\r\n  }\r\n}\n\nexport { BezierMesh, ShaderFloatArray, createDerivedMaterial, expandShaderIncludes, getShaderUniformTypes, getShadersForMaterial, voidMainRegExp };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}