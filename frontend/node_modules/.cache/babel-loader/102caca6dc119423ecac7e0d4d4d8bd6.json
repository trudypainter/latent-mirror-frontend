{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { UniformsUtils, ShaderMaterial, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nvar SavePass = /*#__PURE__*/function (_Pass) {\n  _inherits(SavePass, _Pass);\n  var _super = _createSuper(SavePass);\n  function SavePass(renderTarget) {\n    var _this;\n    _classCallCheck(this, SavePass);\n    _this = _super.call(this);\n    if (CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\n    var shader = CopyShader;\n    _this.textureID = 'tDiffuse';\n    _this.uniforms = UniformsUtils.clone(shader.uniforms);\n    _this.material = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    _this.renderTarget = renderTarget;\n    if (_this.renderTarget === undefined) {\n      _this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      _this.renderTarget.texture.name = 'SavePass.rt';\n    }\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(_this.material);\n    return _this;\n  }\n  _createClass(SavePass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer\n    /*, deltaTime, maskActive */) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer.texture;\n      }\n      renderer.setRenderTarget(this.renderTarget);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }]);\n  return SavePass;\n}(Pass);\nexport { SavePass };","map":{"version":3,"names":["UniformsUtils","ShaderMaterial","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","SavePass","renderTarget","undefined","console","error","shader","textureID","uniforms","clone","material","vertexShader","fragmentShader","window","innerWidth","innerHeight","texture","name","needsSwap","fsQuad","renderer","writeBuffer","readBuffer","value","setRenderTarget","clear","render"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/postprocessing/SavePass.js"],"sourcesContent":["import { UniformsUtils, ShaderMaterial, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SavePass extends Pass {\n  constructor(renderTarget) {\n    super();\n    if (CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\n    const shader = CopyShader;\n    this.textureID = 'tDiffuse';\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderTarget = renderTarget;\n\n    if (this.renderTarget === undefined) {\n      this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.renderTarget.texture.name = 'SavePass.rt';\n    }\n\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nexport { SavePass };\n"],"mappings":";;;;AAAA,SAASA,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,QAAQ,OAAO;AACxE,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,UAAU,QAAQ,0BAA0B;AAAC,IAEhDC,QAAQ;EAAA;EAAA;EACZ,kBAAYC,YAAY,EAAE;IAAA;IAAA;IACxB;IACA,IAAIF,UAAU,KAAKG,SAAS,EAAEC,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IAClF,IAAMC,MAAM,GAAGN,UAAU;IACzB,MAAKO,SAAS,GAAG,UAAU;IAC3B,MAAKC,QAAQ,GAAGb,aAAa,CAACc,KAAK,CAACH,MAAM,CAACE,QAAQ,CAAC;IACpD,MAAKE,QAAQ,GAAG,IAAId,cAAc,CAAC;MACjCY,QAAQ,EAAE,MAAKA,QAAQ;MACvBG,YAAY,EAAEL,MAAM,CAACK,YAAY;MACjCC,cAAc,EAAEN,MAAM,CAACM;IACzB,CAAC,CAAC;IACF,MAAKV,YAAY,GAAGA,YAAY;IAEhC,IAAI,MAAKA,YAAY,KAAKC,SAAS,EAAE;MACnC,MAAKD,YAAY,GAAG,IAAIL,iBAAiB,CAACgB,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MAChF,MAAKb,YAAY,CAACc,OAAO,CAACC,IAAI,GAAG,aAAa;IAChD;IAEA,MAAKC,SAAS,GAAG,KAAK;IACtB,MAAKC,MAAM,GAAG,IAAIpB,cAAc,CAAC,MAAKW,QAAQ,CAAC;IAAC;EAClD;EAAC;IAAA;IAAA,OAED,gBAAOU,QAAQ,EAAEC,WAAW,EAAEC;IAC9B,8BACE;MACA,IAAI,IAAI,CAACd,QAAQ,CAAC,IAAI,CAACD,SAAS,CAAC,EAAE;QACjC,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACD,SAAS,CAAC,CAACgB,KAAK,GAAGD,UAAU,CAACN,OAAO;MAC1D;MAEAI,QAAQ,CAACI,eAAe,CAAC,IAAI,CAACtB,YAAY,CAAC;MAC3C,IAAI,IAAI,CAACuB,KAAK,EAAEL,QAAQ,CAACK,KAAK,EAAE;MAChC,IAAI,CAACN,MAAM,CAACO,MAAM,CAACN,QAAQ,CAAC;IAC9B;EAAC;EAAA;AAAA,EAjCoBtB,IAAI;AAqC3B,SAASG,QAAQ"},"metadata":{},"sourceType":"module"}