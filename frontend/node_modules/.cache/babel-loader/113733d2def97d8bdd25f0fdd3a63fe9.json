{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Mesh, Vector3, Matrix3 } from 'three';\n\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  const exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\nvar PLYExporter = /*#__PURE__*/function () {\n  function PLYExporter() {\n    _classCallCheck(this, PLYExporter);\n  }\n  _createClass(PLYExporter, [{\n    key: \"parse\",\n    value: function parse(object, onDone, options) {\n      if (onDone && typeof onDone === 'object') {\n        console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n        options = onDone;\n        onDone = undefined;\n      } // Default options\n\n      var defaultOptions = {\n        binary: false,\n        excludeAttributes: [],\n        // normal, uv, color, index\n        littleEndian: false\n      };\n      options = Object.assign(defaultOptions, options);\n      var excludeAttributes = options.excludeAttributes;\n      var includeNormals = false;\n      var includeColors = false;\n      var includeUVs = false; // count the vertices, check which properties are used,\n      // and cache the BufferGeometry\n\n      var vertexCount = 0;\n      var faceCount = 0;\n      object.traverse(function (child) {\n        if (child instanceof Mesh && child.isMesh) {\n          var mesh = child;\n          var geometry = mesh.geometry;\n          if (!geometry.isBufferGeometry) {\n            throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n          }\n          var vertices = geometry.getAttribute('position');\n          var normals = geometry.getAttribute('normal');\n          var uvs = geometry.getAttribute('uv');\n          var colors = geometry.getAttribute('color');\n          var indices = geometry.getIndex();\n          if (vertices === undefined) {\n            return;\n          }\n          vertexCount += vertices.count;\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n          if (normals !== undefined) includeNormals = true;\n          if (uvs !== undefined) includeUVs = true;\n          if (colors !== undefined) includeColors = true;\n        }\n      });\n      var includeIndices = (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('index')) === -1;\n      includeNormals = includeNormals && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('normal')) === -1;\n      includeColors = includeColors && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('color')) === -1;\n      includeUVs = includeUVs && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('uv')) === -1;\n      if (includeIndices && faceCount !== Math.floor(faceCount)) {\n        // point cloud meshes will not have an index array and may not have a\n        // number of vertices that is divisble by 3 (and therefore representable\n        // as triangles)\n        console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n        return null;\n      }\n      var indexByteCount = 4;\n      var header = 'ply\\n' + \"format \".concat(options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii', \" 1.0\\n\") + \"element vertex \".concat(vertexCount, \"\\n\") +\n      // position\n      'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n      if (includeNormals) {\n        // normal\n        header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n      }\n      if (includeUVs) {\n        // uvs\n        header += 'property float s\\n' + 'property float t\\n';\n      }\n      if (includeColors) {\n        // colors\n        header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n      }\n      if (includeIndices) {\n        // faces\n        header += \"\".concat(\"element face \".concat(faceCount, \"\\n\"), \"property list uchar int vertex_index\\n\");\n      }\n      header += 'end_header\\n'; // Generate attribute data\n\n      var vertex = new Vector3();\n      var normalMatrixWorld = new Matrix3();\n      var result = null;\n      if (options.binary) {\n        // Binary File Generation\n        var headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n        // 3 normal values at 4 bytes\n        // 3 color channels with 1 byte\n        // 2 uv values at 4 bytes\n\n        var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n        // 3 vertex indices at ${indexByteCount} bytes\n\n        var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n        var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n        new Uint8Array(output.buffer).set(headerBin, 0);\n        var vOffset = headerBin.length;\n        var fOffset = headerBin.length + vertexListLength;\n        var writtenVertices = 0;\n        this.traverseMeshes(object, function (mesh, geometry) {\n          var vertices = geometry.getAttribute('position');\n          var normals = geometry.getAttribute('normal');\n          var uvs = geometry.getAttribute('uv');\n          var colors = geometry.getAttribute('color');\n          var indices = geometry.getIndex();\n          normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n          for (var i = 0, l = vertices.count; i < l; i++) {\n            vertex.x = vertices.getX(i);\n            vertex.y = vertices.getY(i);\n            vertex.z = vertices.getZ(i);\n            vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n            output.setFloat32(vOffset, vertex.x, options.littleEndian);\n            vOffset += 4;\n            output.setFloat32(vOffset, vertex.y, options.littleEndian);\n            vOffset += 4;\n            output.setFloat32(vOffset, vertex.z, options.littleEndian);\n            vOffset += 4; // Normal information\n\n            if (includeNormals) {\n              if (normals != null) {\n                vertex.x = normals.getX(i);\n                vertex.y = normals.getY(i);\n                vertex.z = normals.getZ(i);\n                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                output.setFloat32(vOffset, vertex.x, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, vertex.y, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, vertex.z, options.littleEndian);\n                vOffset += 4;\n              } else {\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n              }\n            } // UV information\n\n            if (includeUVs) {\n              if (uvs != null) {\n                output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n                vOffset += 4;\n              } else if (!includeUVs) {\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n                output.setFloat32(vOffset, 0, options.littleEndian);\n                vOffset += 4;\n              }\n            } // Color information\n\n            if (includeColors) {\n              if (colors != null) {\n                output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n                vOffset += 1;\n                output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n                vOffset += 1;\n                output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n                vOffset += 1;\n              } else {\n                output.setUint8(vOffset, 255);\n                vOffset += 1;\n                output.setUint8(vOffset, 255);\n                vOffset += 1;\n                output.setUint8(vOffset, 255);\n                vOffset += 1;\n              }\n            }\n          }\n          if (includeIndices) {\n            // Create the face list\n            if (indices !== null) {\n              for (var _i = 0, _l = indices.count; _i < _l; _i += 3) {\n                output.setUint8(fOffset, 3);\n                fOffset += 1;\n                output.setUint32(fOffset, indices.getX(_i + 0) + writtenVertices, options.littleEndian);\n                fOffset += indexByteCount;\n                output.setUint32(fOffset, indices.getX(_i + 1) + writtenVertices, options.littleEndian);\n                fOffset += indexByteCount;\n                output.setUint32(fOffset, indices.getX(_i + 2) + writtenVertices, options.littleEndian);\n                fOffset += indexByteCount;\n              }\n            } else {\n              for (var _i2 = 0, _l2 = vertices.count; _i2 < _l2; _i2 += 3) {\n                output.setUint8(fOffset, 3);\n                fOffset += 1;\n                output.setUint32(fOffset, writtenVertices + _i2, options.littleEndian);\n                fOffset += indexByteCount;\n                output.setUint32(fOffset, writtenVertices + _i2 + 1, options.littleEndian);\n                fOffset += indexByteCount;\n                output.setUint32(fOffset, writtenVertices + _i2 + 2, options.littleEndian);\n                fOffset += indexByteCount;\n              }\n            }\n          } // Save the amount of verts we've already written so we can offset\n          // the face index on the next mesh\n\n          writtenVertices += vertices.count;\n        });\n        result = output.buffer;\n      } else {\n        // Ascii File Generation\n        // count the number of vertices\n        var _writtenVertices = 0;\n        var vertexList = '';\n        var faceList = '';\n        this.traverseMeshes(object, function (mesh, geometry) {\n          var vertices = geometry.getAttribute('position');\n          var normals = geometry.getAttribute('normal');\n          var uvs = geometry.getAttribute('uv');\n          var colors = geometry.getAttribute('color');\n          var indices = geometry.getIndex();\n          normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n          for (var i = 0, l = vertices.count; i < l; i++) {\n            vertex.x = vertices.getX(i);\n            vertex.y = vertices.getY(i);\n            vertex.z = vertices.getZ(i);\n            vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n            var line = vertex.x + ' ' + vertex.y + ' ' + vertex.z; // Normal information\n\n            if (includeNormals) {\n              if (normals != null) {\n                vertex.x = normals.getX(i);\n                vertex.y = normals.getY(i);\n                vertex.z = normals.getZ(i);\n                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n              } else {\n                line += ' 0 0 0';\n              }\n            } // UV information\n\n            if (includeUVs) {\n              if (uvs != null) {\n                line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n              } else if (includeUVs) {\n                line += ' 0 0';\n              }\n            } // Color information\n\n            if (includeColors) {\n              if (colors != null) {\n                line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n              } else {\n                line += ' 255 255 255';\n              }\n            }\n            vertexList += line + '\\n';\n          } // Create the face list\n\n          if (includeIndices) {\n            if (indices !== null) {\n              for (var _i3 = 0, _l3 = indices.count; _i3 < _l3; _i3 += 3) {\n                faceList += \"3 \".concat(indices.getX(_i3 + 0) + _writtenVertices);\n                faceList += \" \".concat(indices.getX(_i3 + 1) + _writtenVertices);\n                faceList += \" \".concat(indices.getX(_i3 + 2) + _writtenVertices, \"\\n\");\n              }\n            } else {\n              for (var _i4 = 0, _l4 = vertices.count; _i4 < _l4; _i4 += 3) {\n                faceList += \"3 \".concat(_writtenVertices + _i4, \" \").concat(_writtenVertices + _i4 + 1, \" \").concat(_writtenVertices + _i4 + 2, \"\\n\");\n              }\n            }\n            faceCount += indices ? indices.count / 3 : vertices.count / 3;\n          }\n          _writtenVertices += vertices.count;\n        });\n        result = \"\".concat(header).concat(vertexList).concat(includeIndices ? \"\".concat(faceList, \"\\n\") : '\\n');\n      }\n      if (typeof onDone === 'function') {\n        requestAnimationFrame(function () {\n          return onDone && onDone(typeof result === 'string' ? result : '');\n        });\n      }\n      return result;\n    } // Iterate over the valid meshes in the object\n  }, {\n    key: \"traverseMeshes\",\n    value: function traverseMeshes(object, cb) {\n      object.traverse(function (child) {\n        if (child instanceof Mesh && child.isMesh) {\n          var mesh = child;\n          var geometry = mesh.geometry;\n          if (!geometry.isBufferGeometry) {\n            throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n          }\n          if (geometry.hasAttribute('position')) {\n            cb(mesh, geometry);\n          }\n        }\n      });\n    }\n  }]);\n  return PLYExporter;\n}();\nexport { PLYExporter };","map":{"version":3,"names":["Mesh","Vector3","Matrix3","PLYExporter","object","onDone","options","console","warn","undefined","defaultOptions","binary","excludeAttributes","littleEndian","Object","assign","includeNormals","includeColors","includeUVs","vertexCount","faceCount","traverse","child","isMesh","mesh","geometry","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","colors","indices","getIndex","count","includeIndices","indexOf","Math","floor","error","indexByteCount","header","vertex","normalMatrixWorld","result","headerBin","TextEncoder","encode","vertexListLength","faceListLength","output","DataView","ArrayBuffer","length","Uint8Array","buffer","set","vOffset","fOffset","writtenVertices","traverseMeshes","getNormalMatrix","matrixWorld","i","l","x","getX","y","getY","z","getZ","applyMatrix4","setFloat32","applyMatrix3","normalize","setUint8","setUint32","vertexList","faceList","line","requestAnimationFrame","cb","hasAttribute"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/exporters/PLYExporter.js"],"sourcesContent":["import { Mesh, Vector3, Matrix3 } from 'three';\n\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  const exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nclass PLYExporter {\n  parse(object, onDone, options) {\n    if (onDone && typeof onDone === 'object') {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = undefined;\n    } // Default options\n\n\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false; // count the vertices, check which properties are used,\n    // and cache the BufferGeometry\n\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n\n        if (vertices === undefined) {\n          return;\n        }\n\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== undefined) includeNormals = true;\n        if (uvs !== undefined) includeUVs = true;\n        if (colors !== undefined) includeColors = true;\n      }\n    });\n    const includeIndices = (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('index')) === -1;\n    includeNormals = includeNormals && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('normal')) === -1;\n    includeColors = includeColors && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('color')) === -1;\n    includeUVs = includeUVs && (excludeAttributes === null || excludeAttributes === void 0 ? void 0 : excludeAttributes.indexOf('uv')) === -1;\n\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      // point cloud meshes will not have an index array and may not have a\n      // number of vertices that is divisble by 3 (and therefore representable\n      // as triangles)\n      console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n      return null;\n    }\n\n    const indexByteCount = 4;\n    let header = 'ply\\n' + `format ${options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii'} 1.0\\n` + `element vertex ${vertexCount}\\n` + // position\n    'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n\n    if (includeNormals) {\n      // normal\n      header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n    }\n\n    if (includeUVs) {\n      // uvs\n      header += 'property float s\\n' + 'property float t\\n';\n    }\n\n    if (includeColors) {\n      // colors\n      header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n    }\n\n    if (includeIndices) {\n      // faces\n      header += `${`element face ${faceCount}\\n`}property list uchar int vertex_index\\n`;\n    }\n\n    header += 'end_header\\n'; // Generate attribute data\n\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n\n    if (options.binary) {\n      // Binary File Generation\n      const headerBin = new TextEncoder().encode(header); // 3 position values at 4 bytes\n      // 3 normal values at 4 bytes\n      // 3 color channels with 1 byte\n      // 2 uv values at 4 bytes\n\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0)); // 1 byte shape desciptor\n      // 3 vertex indices at ${indexByteCount} bytes\n\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      let writtenVertices = 0;\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // UV information\n\n\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          } // Color information\n\n\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n\n        if (includeIndices) {\n          // Create the face list\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        } // Save the amount of verts we've already written so we can offset\n        // the face index on the next mesh\n\n\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      // Ascii File Generation\n      // count the number of vertices\n      let writtenVertices = 0;\n      let vertexList = '';\n      let faceList = '';\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position');\n        const normals = geometry.getAttribute('normal');\n        const uvs = geometry.getAttribute('uv');\n        const colors = geometry.getAttribute('color');\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld); // form each line\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld); // Position information\n\n          let line = vertex.x + ' ' + vertex.y + ' ' + vertex.z; // Normal information\n\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n            } else {\n              line += ' 0 0 0';\n            }\n          } // UV information\n\n\n          if (includeUVs) {\n            if (uvs != null) {\n              line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n            } else if (includeUVs) {\n              line += ' 0 0';\n            }\n          } // Color information\n\n\n          if (includeColors) {\n            if (colors != null) {\n              line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n            } else {\n              line += ' 255 255 255';\n            }\n          }\n\n          vertexList += line + '\\n';\n        } // Create the face list\n\n\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\\n`;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\\n`;\n            }\n          }\n\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n\n        writtenVertices += vertices.count;\n      });\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\\n` : '\\n'}`;\n    }\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone && onDone(typeof result === 'string' ? result : ''));\n    }\n\n    return result;\n  } // Iterate over the valid meshes in the object\n\n\n  traverseMeshes(object, cb) {\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        if (geometry.hasAttribute('position')) {\n          cb(mesh, geometry);\n        }\n      }\n    });\n  }\n\n}\n\nexport { PLYExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}