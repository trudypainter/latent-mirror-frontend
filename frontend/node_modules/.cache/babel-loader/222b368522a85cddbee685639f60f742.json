{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nvar XRHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRHandModel, _Object3D);\n  var _super = _createSuper(XRHandModel);\n  function XRHandModel(controller) {\n    var _this;\n    _classCallCheck(this, XRHandModel);\n    _this = _super.call(this);\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    return _this;\n  }\n  _createClass(XRHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }]);\n  return XRHandModel;\n}(Object3D);\nvar XRHandModelFactory = /*#__PURE__*/function () {\n  function XRHandModelFactory() {\n    _classCallCheck(this, XRHandModelFactory);\n    this.path = null;\n  }\n  _createClass(XRHandModelFactory, [{\n    key: \"setPath\",\n    value: function setPath(path) {\n      this.path = path;\n      return this;\n    }\n  }, {\n    key: \"createHandModel\",\n    value: function createHandModel(controller, profile) {\n      var _this2 = this;\n      var handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'mesh') {\n            handModel.motionController = new XRHandMeshModel(handModel, controller, _this2.path, xrInputSource.handedness);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', function () {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  }]);\n  return XRHandModelFactory;\n}();\nexport { XRHandModelFactory };","map":{"version":3,"names":["Object3D","XRHandPrimitiveModel","XRHandMeshModel","XRHandModel","controller","motionController","envMap","mesh","force","updateMesh","XRHandModelFactory","path","profile","handModel","addEventListener","event","xrInputSource","data","hand","undefined","handedness","primitive"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"sourcesContent":["import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n}\n\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n        if (profile === undefined || profile === 'spheres') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'sphere'\n          });\n        } else if (profile === 'boxes') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'box'\n          });\n        } else if (profile === 'mesh') {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener('disconnected', () => {// handModel.motionController = null;\n      // handModel.remove( scene );\n      // scene = null;\n    });\n    return handModel;\n  }\n\n}\n\nexport { XRHandModelFactory };\n"],"mappings":";;;;;;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,eAAe,QAAQ,sBAAsB;AAAC,IAEjDC,WAAW;EAAA;EAAA;EACf,qBAAYC,UAAU,EAAE;IAAA;IAAA;IACtB;IACA,MAAKA,UAAU,GAAGA,UAAU;IAC5B,MAAKC,gBAAgB,GAAG,IAAI;IAC5B,MAAKC,MAAM,GAAG,IAAI;IAClB,MAAKC,IAAI,GAAG,IAAI;IAAC;EACnB;EAAC;IAAA;IAAA,OAED,2BAAkBC,KAAK,EAAE;MACvB,mFAAwBA,KAAK;MAE7B,IAAI,IAAI,CAACH,gBAAgB,EAAE;QACzB,IAAI,CAACA,gBAAgB,CAACI,UAAU,EAAE;MACpC;IACF;EAAC;EAAA;AAAA,EAfuBT,QAAQ;AAAA,IAmB5BU,kBAAkB;EACtB,8BAAc;IAAA;IACZ,IAAI,CAACC,IAAI,GAAG,IAAI;EAClB;EAAC;IAAA;IAAA,OAED,iBAAQA,IAAI,EAAE;MACZ,IAAI,CAACA,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,yBAAgBP,UAAU,EAAEQ,OAAO,EAAE;MAAA;MACnC,IAAMC,SAAS,GAAG,IAAIV,WAAW,CAACC,UAAU,CAAC;MAC7CA,UAAU,CAACU,gBAAgB,CAAC,WAAW,EAAE,UAAAC,KAAK,EAAI;QAChD,IAAMC,aAAa,GAAGD,KAAK,CAACE,IAAI;QAEhC,IAAID,aAAa,CAACE,IAAI,IAAI,CAACL,SAAS,CAACR,gBAAgB,EAAE;UACrDQ,SAAS,CAACG,aAAa,GAAGA,aAAa,CAAC,CAAC;;UAEzC,IAAIJ,OAAO,KAAKO,SAAS,IAAIP,OAAO,KAAK,SAAS,EAAE;YAClDC,SAAS,CAACR,gBAAgB,GAAG,IAAIJ,oBAAoB,CAACY,SAAS,EAAET,UAAU,EAAE,MAAI,CAACO,IAAI,EAAEK,aAAa,CAACI,UAAU,EAAE;cAChHC,SAAS,EAAE;YACb,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIT,OAAO,KAAK,OAAO,EAAE;YAC9BC,SAAS,CAACR,gBAAgB,GAAG,IAAIJ,oBAAoB,CAACY,SAAS,EAAET,UAAU,EAAE,MAAI,CAACO,IAAI,EAAEK,aAAa,CAACI,UAAU,EAAE;cAChHC,SAAS,EAAE;YACb,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIT,OAAO,KAAK,MAAM,EAAE;YAC7BC,SAAS,CAACR,gBAAgB,GAAG,IAAIH,eAAe,CAACW,SAAS,EAAET,UAAU,EAAE,MAAI,CAACO,IAAI,EAAEK,aAAa,CAACI,UAAU,CAAC;UAC9G;QACF;MACF,CAAC,CAAC;MACFhB,UAAU,CAACU,gBAAgB,CAAC,cAAc,EAAE,YAAM,CAAC;QACjD;QACA;MACF,CAAC,CAAC;MACF,OAAOD,SAAS;IAClB;EAAC;EAAA;AAAA;AAIH,SAASH,kBAAkB"},"metadata":{},"sourceType":"module"}