{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from 'three';\nvar PCDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PCDLoader, _Loader);\n  var _super = _createSuper(PCDLoader);\n  function PCDLoader(manager) {\n    var _this;\n    _classCallCheck(this, PCDLoader);\n    _this = _super.call(this, manager);\n    _this.littleEndian = true;\n    return _this;\n  }\n  _createClass(PCDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data, url));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, url) {\n      // from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n      function decompressLZF(inData, outLength) {\n        var inLength = inData.length;\n        var outData = new Uint8Array(outLength);\n        var inPtr = 0;\n        var outPtr = 0;\n        var ctrl;\n        var len;\n        var ref;\n        do {\n          ctrl = inData[inPtr++];\n          if (ctrl < 1 << 5) {\n            ctrl++;\n            if (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough');\n            if (inPtr + ctrl > inLength) throw new Error('Invalid compressed data');\n            do {\n              outData[outPtr++] = inData[inPtr++];\n            } while (--ctrl);\n          } else {\n            len = ctrl >> 5;\n            ref = outPtr - ((ctrl & 0x1f) << 8) - 1;\n            if (inPtr >= inLength) throw new Error('Invalid compressed data');\n            if (len === 7) {\n              len += inData[inPtr++];\n              if (inPtr >= inLength) throw new Error('Invalid compressed data');\n            }\n            ref -= inData[inPtr++];\n            if (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough');\n            if (ref < 0) throw new Error('Invalid compressed data');\n            if (ref >= outPtr) throw new Error('Invalid compressed data');\n            do {\n              outData[outPtr++] = outData[ref++];\n            } while (--len + 2);\n          }\n        } while (inPtr < inLength);\n        return outData;\n      }\n      function parseHeader(data) {\n        var PCDheader = {};\n        var result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n        var result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n        PCDheader.data = result2[1];\n        PCDheader.headerLen = result2[0].length + result1;\n        PCDheader.str = data.substr(0, PCDheader.headerLen); // remove comments\n\n        PCDheader.str = PCDheader.str.replace(/\\#.*/gi, ''); // parse\n\n        PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n        PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n        PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n        PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n        PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n        PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n        PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n        PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n        PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str); // evaluate\n\n        if (PCDheader.version !== null) PCDheader.version = parseFloat(PCDheader.version[1]);\n        if (PCDheader.fields !== null) PCDheader.fields = PCDheader.fields[1].split(' ');\n        if (PCDheader.type !== null) PCDheader.type = PCDheader.type[1].split(' ');\n        if (PCDheader.width !== null) PCDheader.width = parseInt(PCDheader.width[1]);\n        if (PCDheader.height !== null) PCDheader.height = parseInt(PCDheader.height[1]);\n        if (PCDheader.viewpoint !== null) PCDheader.viewpoint = PCDheader.viewpoint[1];\n        if (PCDheader.points !== null) PCDheader.points = parseInt(PCDheader.points[1], 10);\n        if (PCDheader.points === null) PCDheader.points = PCDheader.width * PCDheader.height;\n        if (PCDheader.size !== null) {\n          PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n            return parseInt(x, 10);\n          });\n        }\n        if (PCDheader.count !== null) {\n          PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n            return parseInt(x, 10);\n          });\n        } else {\n          PCDheader.count = [];\n          for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\n            PCDheader.count.push(1);\n          }\n        }\n        PCDheader.offset = {};\n        var sizeSum = 0;\n        for (var _i = 0, _l = PCDheader.fields.length; _i < _l; _i++) {\n          if (PCDheader.data === 'ascii') {\n            PCDheader.offset[PCDheader.fields[_i]] = _i;\n          } else {\n            PCDheader.offset[PCDheader.fields[_i]] = sizeSum;\n            sizeSum += PCDheader.size[_i] * PCDheader.count[_i];\n          }\n        } // for binary only\n\n        PCDheader.rowSize = sizeSum;\n        return PCDheader;\n      }\n      var textData = LoaderUtils.decodeText(new Uint8Array(data)); // parse header (always ascii format)\n\n      var PCDheader = parseHeader(textData); // parse data\n\n      var position = [];\n      var normal = [];\n      var color = []; // ascii\n\n      if (PCDheader.data === 'ascii') {\n        var offset = PCDheader.offset;\n        var pcdData = textData.substr(PCDheader.headerLen);\n        var lines = pcdData.split('\\n');\n        for (var i = 0, l = lines.length; i < l; i++) {\n          if (lines[i] === '') continue;\n          var line = lines[i].split(' ');\n          if (offset.x !== undefined) {\n            position.push(parseFloat(line[offset.x]));\n            position.push(parseFloat(line[offset.y]));\n            position.push(parseFloat(line[offset.z]));\n          }\n          if (offset.rgb !== undefined) {\n            var rgb = parseFloat(line[offset.rgb]);\n            var r = rgb >> 16 & 0x0000ff;\n            var g = rgb >> 8 & 0x0000ff;\n            var b = rgb >> 0 & 0x0000ff;\n            color.push(r / 255, g / 255, b / 255);\n          }\n          if (offset.normal_x !== undefined) {\n            normal.push(parseFloat(line[offset.normal_x]));\n            normal.push(parseFloat(line[offset.normal_y]));\n            normal.push(parseFloat(line[offset.normal_z]));\n          }\n        }\n      } // binary-compressed\n      // normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n      // binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n      // that requires a totally different parsing approach compared to non-compressed data\n\n      if (PCDheader.data === 'binary_compressed') {\n        var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n        var compressedSize = sizes[0];\n        var decompressedSize = sizes[1];\n        var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n        var dataview = new DataView(decompressed.buffer);\n        var _offset = PCDheader.offset;\n        for (var _i2 = 0; _i2 < PCDheader.points; _i2++) {\n          if (_offset.x !== undefined) {\n            position.push(dataview.getFloat32(PCDheader.points * _offset.x + PCDheader.size[0] * _i2, this.littleEndian));\n            position.push(dataview.getFloat32(PCDheader.points * _offset.y + PCDheader.size[1] * _i2, this.littleEndian));\n            position.push(dataview.getFloat32(PCDheader.points * _offset.z + PCDheader.size[2] * _i2, this.littleEndian));\n          }\n          if (_offset.rgb !== undefined) {\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 2) / 255.0);\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 1) / 255.0);\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 0) / 255.0);\n          }\n          if (_offset.normal_x !== undefined) {\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_x + PCDheader.size[4] * _i2, this.littleEndian));\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_y + PCDheader.size[5] * _i2, this.littleEndian));\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_z + PCDheader.size[6] * _i2, this.littleEndian));\n          }\n        }\n      } // binary\n\n      if (PCDheader.data === 'binary') {\n        var _dataview = new DataView(data, PCDheader.headerLen);\n        var _offset2 = PCDheader.offset;\n        for (var _i3 = 0, row = 0; _i3 < PCDheader.points; _i3++, row += PCDheader.rowSize) {\n          if (_offset2.x !== undefined) {\n            position.push(_dataview.getFloat32(row + _offset2.x, this.littleEndian));\n            position.push(_dataview.getFloat32(row + _offset2.y, this.littleEndian));\n            position.push(_dataview.getFloat32(row + _offset2.z, this.littleEndian));\n          }\n          if (_offset2.rgb !== undefined) {\n            color.push(_dataview.getUint8(row + _offset2.rgb + 2) / 255.0);\n            color.push(_dataview.getUint8(row + _offset2.rgb + 1) / 255.0);\n            color.push(_dataview.getUint8(row + _offset2.rgb + 0) / 255.0);\n          }\n          if (_offset2.normal_x !== undefined) {\n            normal.push(_dataview.getFloat32(row + _offset2.normal_x, this.littleEndian));\n            normal.push(_dataview.getFloat32(row + _offset2.normal_y, this.littleEndian));\n            normal.push(_dataview.getFloat32(row + _offset2.normal_z, this.littleEndian));\n          }\n        }\n      } // build geometry\n\n      var geometry = new BufferGeometry();\n      if (position.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n      if (normal.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal, 3));\n      if (color.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n      geometry.computeBoundingSphere(); // build material\n\n      var material = new PointsMaterial({\n        size: 0.005\n      });\n      if (color.length > 0) {\n        material.vertexColors = true;\n      } else {\n        material.color.setHex(Math.random() * 0xffffff);\n      } // build point cloud\n\n      var mesh = new Points(geometry, material);\n      var name = url.split('').reverse().join('');\n      name = /([^\\/]*)/.exec(name);\n      name = name[1].split('').reverse().join('');\n      mesh.name = name;\n      return mesh;\n    }\n  }]);\n  return PCDLoader;\n}(Loader);\nexport { PCDLoader };","map":{"version":3,"names":["Loader","FileLoader","LoaderUtils","BufferGeometry","Float32BufferAttribute","PointsMaterial","Points","PCDLoader","manager","littleEndian","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","data","parse","e","console","error","itemError","decompressLZF","inData","outLength","inLength","length","outData","Uint8Array","inPtr","outPtr","ctrl","len","ref","Error","parseHeader","PCDheader","result1","search","result2","exec","substr","headerLen","str","replace","version","fields","size","type","count","width","height","viewpoint","points","parseFloat","split","parseInt","map","x","i","l","push","offset","sizeSum","rowSize","textData","decodeText","position","normal","color","pcdData","lines","line","undefined","y","z","rgb","r","g","b","normal_x","normal_y","normal_z","sizes","Uint32Array","slice","compressedSize","decompressedSize","decompressed","dataview","DataView","buffer","getFloat32","getUint8","row","geometry","setAttribute","computeBoundingSphere","material","vertexColors","setHex","Math","random","mesh","name","reverse","join"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/PCDLoader.js"],"sourcesContent":["import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from 'three';\n\nclass PCDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.littleEndian = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, url));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, url) {\n    // from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n    function decompressLZF(inData, outLength) {\n      const inLength = inData.length;\n      const outData = new Uint8Array(outLength);\n      let inPtr = 0;\n      let outPtr = 0;\n      let ctrl;\n      let len;\n      let ref;\n\n      do {\n        ctrl = inData[inPtr++];\n\n        if (ctrl < 1 << 5) {\n          ctrl++;\n          if (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough');\n          if (inPtr + ctrl > inLength) throw new Error('Invalid compressed data');\n\n          do {\n            outData[outPtr++] = inData[inPtr++];\n          } while (--ctrl);\n        } else {\n          len = ctrl >> 5;\n          ref = outPtr - ((ctrl & 0x1f) << 8) - 1;\n          if (inPtr >= inLength) throw new Error('Invalid compressed data');\n\n          if (len === 7) {\n            len += inData[inPtr++];\n            if (inPtr >= inLength) throw new Error('Invalid compressed data');\n          }\n\n          ref -= inData[inPtr++];\n          if (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough');\n          if (ref < 0) throw new Error('Invalid compressed data');\n          if (ref >= outPtr) throw new Error('Invalid compressed data');\n\n          do {\n            outData[outPtr++] = outData[ref++];\n          } while (--len + 2);\n        }\n      } while (inPtr < inLength);\n\n      return outData;\n    }\n\n    function parseHeader(data) {\n      const PCDheader = {};\n      const result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n      const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n      PCDheader.data = result2[1];\n      PCDheader.headerLen = result2[0].length + result1;\n      PCDheader.str = data.substr(0, PCDheader.headerLen); // remove comments\n\n      PCDheader.str = PCDheader.str.replace(/\\#.*/gi, ''); // parse\n\n      PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n      PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n      PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n      PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n      PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n      PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n      PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n      PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n      PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str); // evaluate\n\n      if (PCDheader.version !== null) PCDheader.version = parseFloat(PCDheader.version[1]);\n      if (PCDheader.fields !== null) PCDheader.fields = PCDheader.fields[1].split(' ');\n      if (PCDheader.type !== null) PCDheader.type = PCDheader.type[1].split(' ');\n      if (PCDheader.width !== null) PCDheader.width = parseInt(PCDheader.width[1]);\n      if (PCDheader.height !== null) PCDheader.height = parseInt(PCDheader.height[1]);\n      if (PCDheader.viewpoint !== null) PCDheader.viewpoint = PCDheader.viewpoint[1];\n      if (PCDheader.points !== null) PCDheader.points = parseInt(PCDheader.points[1], 10);\n      if (PCDheader.points === null) PCDheader.points = PCDheader.width * PCDheader.height;\n\n      if (PCDheader.size !== null) {\n        PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n          return parseInt(x, 10);\n        });\n      }\n\n      if (PCDheader.count !== null) {\n        PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n          return parseInt(x, 10);\n        });\n      } else {\n        PCDheader.count = [];\n\n        for (let i = 0, l = PCDheader.fields.length; i < l; i++) {\n          PCDheader.count.push(1);\n        }\n      }\n\n      PCDheader.offset = {};\n      let sizeSum = 0;\n\n      for (let i = 0, l = PCDheader.fields.length; i < l; i++) {\n        if (PCDheader.data === 'ascii') {\n          PCDheader.offset[PCDheader.fields[i]] = i;\n        } else {\n          PCDheader.offset[PCDheader.fields[i]] = sizeSum;\n          sizeSum += PCDheader.size[i] * PCDheader.count[i];\n        }\n      } // for binary only\n\n\n      PCDheader.rowSize = sizeSum;\n      return PCDheader;\n    }\n\n    const textData = LoaderUtils.decodeText(new Uint8Array(data)); // parse header (always ascii format)\n\n    const PCDheader = parseHeader(textData); // parse data\n\n    const position = [];\n    const normal = [];\n    const color = []; // ascii\n\n    if (PCDheader.data === 'ascii') {\n      const offset = PCDheader.offset;\n      const pcdData = textData.substr(PCDheader.headerLen);\n      const lines = pcdData.split('\\n');\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        if (lines[i] === '') continue;\n        const line = lines[i].split(' ');\n\n        if (offset.x !== undefined) {\n          position.push(parseFloat(line[offset.x]));\n          position.push(parseFloat(line[offset.y]));\n          position.push(parseFloat(line[offset.z]));\n        }\n\n        if (offset.rgb !== undefined) {\n          const rgb = parseFloat(line[offset.rgb]);\n          const r = rgb >> 16 & 0x0000ff;\n          const g = rgb >> 8 & 0x0000ff;\n          const b = rgb >> 0 & 0x0000ff;\n          color.push(r / 255, g / 255, b / 255);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(parseFloat(line[offset.normal_x]));\n          normal.push(parseFloat(line[offset.normal_y]));\n          normal.push(parseFloat(line[offset.normal_z]));\n        }\n      }\n    } // binary-compressed\n    // normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n    // binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n    // that requires a totally different parsing approach compared to non-compressed data\n\n\n    if (PCDheader.data === 'binary_compressed') {\n      const sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n      const compressedSize = sizes[0];\n      const decompressedSize = sizes[1];\n      const decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n      const dataview = new DataView(decompressed.buffer);\n      const offset = PCDheader.offset;\n\n      for (let i = 0; i < PCDheader.points; i++) {\n        if (offset.x !== undefined) {\n          position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n        }\n\n        if (offset.rgb !== undefined) {\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255.0);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255.0);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255.0);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\n        }\n      }\n    } // binary\n\n\n    if (PCDheader.data === 'binary') {\n      const dataview = new DataView(data, PCDheader.headerLen);\n      const offset = PCDheader.offset;\n\n      for (let i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n        if (offset.x !== undefined) {\n          position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n        }\n\n        if (offset.rgb !== undefined) {\n          color.push(dataview.getUint8(row + offset.rgb + 2) / 255.0);\n          color.push(dataview.getUint8(row + offset.rgb + 1) / 255.0);\n          color.push(dataview.getUint8(row + offset.rgb + 0) / 255.0);\n        }\n\n        if (offset.normal_x !== undefined) {\n          normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n        }\n      }\n    } // build geometry\n\n\n    const geometry = new BufferGeometry();\n    if (position.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n    if (normal.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal, 3));\n    if (color.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n    geometry.computeBoundingSphere(); // build material\n\n    const material = new PointsMaterial({\n      size: 0.005\n    });\n\n    if (color.length > 0) {\n      material.vertexColors = true;\n    } else {\n      material.color.setHex(Math.random() * 0xffffff);\n    } // build point cloud\n\n\n    const mesh = new Points(geometry, material);\n    let name = url.split('').reverse().join('');\n    name = /([^\\/]*)/.exec(name);\n    name = name[1].split('').reverse().join('');\n    mesh.name = name;\n    return mesh;\n  }\n\n}\n\nexport { PCDLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}