{"ast":null,"code":"import _objectSpread from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, BufferAttribute, Box3, FrontSide, Matrix4 } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG } from './Constants.js';\nimport { buildPackedTree } from './buildFunctions.js';\nimport { raycast as _raycast, raycastFirst as _raycastFirst, shapecast as _shapecast, intersectsGeometry as _intersectsGeometry, setBuffer, clearBuffer } from './castFunctions.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { iterateOverTriangles, setTriangle } from '../utils/TriangleUtilities.js';\nvar SKIP_GENERATION = Symbol('skip tree generation');\nvar aabb = /* @__PURE__ */new Box3();\nvar aabb2 = /* @__PURE__ */new Box3();\nvar tempMatrix = /* @__PURE__ */new Matrix4();\nvar obb = /* @__PURE__ */new OrientedBox();\nvar obb2 = /* @__PURE__ */new OrientedBox();\nvar temp = /* @__PURE__ */new Vector3();\nvar temp1 = /* @__PURE__ */new Vector3();\nvar temp2 = /* @__PURE__ */new Vector3();\nvar temp3 = /* @__PURE__ */new Vector3();\nvar temp4 = /* @__PURE__ */new Vector3();\nvar tempBox = /* @__PURE__ */new Box3();\nvar trianglePool = /* @__PURE__ */new PrimitivePool(function () {\n  return new ExtendedTriangle();\n});\nexport var MeshBVH = /*#__PURE__*/function () {\n  function MeshBVH(geometry) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MeshBVH);\n    if (!geometry.isBufferGeometry) {\n      throw new Error('MeshBVH: Only BufferGeometries are supported.');\n    } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {\n      throw new Error('MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.');\n    }\n\n    // default options\n    options = Object.assign(_defineProperty({\n      strategy: CENTER,\n      maxDepth: 40,\n      maxLeafTris: 10,\n      verbose: true,\n      useSharedArrayBuffer: false,\n      setBoundingBox: true,\n      onProgress: null\n    }, SKIP_GENERATION, false), options);\n    if (options.useSharedArrayBuffer && typeof SharedArrayBuffer === 'undefined') {\n      throw new Error('MeshBVH: SharedArrayBuffer is not available.');\n    }\n    this._roots = null;\n    if (!options[SKIP_GENERATION]) {\n      this._roots = buildPackedTree(geometry, options);\n      if (!geometry.boundingBox && options.setBoundingBox) {\n        geometry.boundingBox = this.getBoundingBox(new Box3());\n      }\n    }\n\n    // retain references to the geometry so we can use them it without having to\n    // take a geometry reference in every function.\n    this.geometry = geometry;\n  }\n  _createClass(MeshBVH, [{\n    key: \"refit\",\n    value: function refit() {\n      var nodeIndices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (nodeIndices && Array.isArray(nodeIndices)) {\n        nodeIndices = new Set(nodeIndices);\n      }\n      var geometry = this.geometry;\n      var indexArr = geometry.index.array;\n      var posAttr = geometry.attributes.position;\n      var buffer, uint32Array, uint16Array, float32Array;\n      var byteOffset = 0;\n      var roots = this._roots;\n      for (var i = 0, l = roots.length; i < l; i++) {\n        buffer = roots[i];\n        uint32Array = new Uint32Array(buffer);\n        uint16Array = new Uint16Array(buffer);\n        float32Array = new Float32Array(buffer);\n        _traverse(0, byteOffset);\n        byteOffset += buffer.byteLength;\n      }\n      function _traverse(node32Index, byteOffset) {\n        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var node16Index = node32Index * 2;\n        var isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n        if (isLeaf) {\n          var offset = uint32Array[node32Index + 6];\n          var count = uint16Array[node16Index + 14];\n          var minx = Infinity;\n          var miny = Infinity;\n          var minz = Infinity;\n          var maxx = -Infinity;\n          var maxy = -Infinity;\n          var maxz = -Infinity;\n          for (var _i = 3 * offset, _l = 3 * (offset + count); _i < _l; _i++) {\n            var index = indexArr[_i];\n            var x = posAttr.getX(index);\n            var y = posAttr.getY(index);\n            var z = posAttr.getZ(index);\n            if (x < minx) minx = x;\n            if (x > maxx) maxx = x;\n            if (y < miny) miny = y;\n            if (y > maxy) maxy = y;\n            if (z < minz) minz = z;\n            if (z > maxz) maxz = z;\n          }\n          if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n            float32Array[node32Index + 0] = minx;\n            float32Array[node32Index + 1] = miny;\n            float32Array[node32Index + 2] = minz;\n            float32Array[node32Index + 3] = maxx;\n            float32Array[node32Index + 4] = maxy;\n            float32Array[node32Index + 5] = maxz;\n            return true;\n          } else {\n            return false;\n          }\n        } else {\n          var left = node32Index + 8;\n          var right = uint32Array[node32Index + 6];\n\n          // the identifying node indices provided by the shapecast function include offsets of all\n          // root buffers to guarantee they're unique between roots so offset left and right indices here.\n          var offsetLeft = left + byteOffset;\n          var offsetRight = right + byteOffset;\n          var forceChildren = force;\n          var includesLeft = false;\n          var includesRight = false;\n          if (nodeIndices) {\n            // if we see that neither the left or right child are included in the set that need to be updated\n            // then we assume that all children need to be updated.\n            if (!forceChildren) {\n              includesLeft = nodeIndices.has(offsetLeft);\n              includesRight = nodeIndices.has(offsetRight);\n              forceChildren = !includesLeft && !includesRight;\n            }\n          } else {\n            includesLeft = true;\n            includesRight = true;\n          }\n          var traverseLeft = forceChildren || includesLeft;\n          var traverseRight = forceChildren || includesRight;\n          var leftChange = false;\n          if (traverseLeft) {\n            leftChange = _traverse(left, byteOffset, forceChildren);\n          }\n          var rightChange = false;\n          if (traverseRight) {\n            rightChange = _traverse(right, byteOffset, forceChildren);\n          }\n          var didChange = leftChange || rightChange;\n          if (didChange) {\n            for (var _i2 = 0; _i2 < 3; _i2++) {\n              var lefti = left + _i2;\n              var righti = right + _i2;\n              var minLeftValue = float32Array[lefti];\n              var maxLeftValue = float32Array[lefti + 3];\n              var minRightValue = float32Array[righti];\n              var maxRightValue = float32Array[righti + 3];\n              float32Array[node32Index + _i2] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n              float32Array[node32Index + _i2 + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n            }\n          }\n          return didChange;\n        }\n      }\n    }\n  }, {\n    key: \"traverse\",\n    value: function traverse(callback) {\n      var rootIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = this._roots[rootIndex];\n      var uint32Array = new Uint32Array(buffer);\n      var uint16Array = new Uint16Array(buffer);\n      _traverse(0);\n      function _traverse(node32Index) {\n        var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var node16Index = node32Index * 2;\n        var isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n        if (isLeaf) {\n          var offset = uint32Array[node32Index + 6];\n          var count = uint16Array[node16Index + 14];\n          callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);\n        } else {\n          // TODO: use node functions here\n          var left = node32Index + BYTES_PER_NODE / 4;\n          var right = uint32Array[node32Index + 6];\n          var splitAxis = uint32Array[node32Index + 7];\n          var stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);\n          if (!stopTraversal) {\n            _traverse(left, depth + 1);\n            _traverse(right, depth + 1);\n          }\n        }\n      }\n    }\n\n    /* Core Cast Functions */\n  }, {\n    key: \"raycast\",\n    value: function raycast(ray) {\n      var materialOrSide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FrontSide;\n      var roots = this._roots;\n      var geometry = this.geometry;\n      var intersects = [];\n      var isMaterial = materialOrSide.isMaterial;\n      var isArrayMaterial = Array.isArray(materialOrSide);\n      var groups = geometry.groups;\n      var side = isMaterial ? materialOrSide.side : materialOrSide;\n      for (var i = 0, l = roots.length; i < l; i++) {\n        var materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n        var startCount = intersects.length;\n        setBuffer(roots[i]);\n        _raycast(0, geometry, materialSide, ray, intersects);\n        clearBuffer();\n        if (isArrayMaterial) {\n          var materialIndex = groups[i].materialIndex;\n          for (var j = startCount, jl = intersects.length; j < jl; j++) {\n            intersects[j].face.materialIndex = materialIndex;\n          }\n        }\n      }\n      return intersects;\n    }\n  }, {\n    key: \"raycastFirst\",\n    value: function raycastFirst(ray) {\n      var materialOrSide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FrontSide;\n      var roots = this._roots;\n      var geometry = this.geometry;\n      var isMaterial = materialOrSide.isMaterial;\n      var isArrayMaterial = Array.isArray(materialOrSide);\n      var closestResult = null;\n      var groups = geometry.groups;\n      var side = isMaterial ? materialOrSide.side : materialOrSide;\n      for (var i = 0, l = roots.length; i < l; i++) {\n        var materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n        setBuffer(roots[i]);\n        var result = _raycastFirst(0, geometry, materialSide, ray);\n        clearBuffer();\n        if (result != null && (closestResult == null || result.distance < closestResult.distance)) {\n          closestResult = result;\n          if (isArrayMaterial) {\n            result.face.materialIndex = groups[i].materialIndex;\n          }\n        }\n      }\n      return closestResult;\n    }\n  }, {\n    key: \"intersectsGeometry\",\n    value: function intersectsGeometry(otherGeometry, geomToMesh) {\n      var geometry = this.geometry;\n      var result = false;\n      var _iterator = _createForOfIteratorHelper(this._roots),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var root = _step.value;\n          setBuffer(root);\n          result = _intersectsGeometry(0, geometry, otherGeometry, geomToMesh);\n          clearBuffer();\n          if (result) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return result;\n    }\n  }, {\n    key: \"shapecast\",\n    value: function shapecast(callbacks, _intersectsTriangleFunc, _orderNodesFunc) {\n      var geometry = this.geometry;\n      if (callbacks instanceof Function) {\n        if (_intersectsTriangleFunc) {\n          // Support the previous function signature that provided three sequential index buffer\n          // indices here.\n          var originalTriangleFunc = _intersectsTriangleFunc;\n          _intersectsTriangleFunc = function _intersectsTriangleFunc(tri, index, contained, depth) {\n            var i3 = index * 3;\n            return originalTriangleFunc(tri, i3, i3 + 1, i3 + 2, contained, depth);\n          };\n        }\n        callbacks = {\n          boundsTraverseOrder: _orderNodesFunc,\n          intersectsBounds: callbacks,\n          intersectsTriangle: _intersectsTriangleFunc,\n          intersectsRange: null\n        };\n        console.warn('MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.');\n      }\n      var triangle = trianglePool.getPrimitive();\n      var _callbacks = callbacks,\n        boundsTraverseOrder = _callbacks.boundsTraverseOrder,\n        intersectsBounds = _callbacks.intersectsBounds,\n        intersectsRange = _callbacks.intersectsRange,\n        intersectsTriangle = _callbacks.intersectsTriangle;\n      if (intersectsRange && intersectsTriangle) {\n        var originalIntersectsRange = intersectsRange;\n        intersectsRange = function intersectsRange(offset, count, contained, depth, nodeIndex) {\n          if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {\n            return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);\n          }\n          return true;\n        };\n      } else if (!intersectsRange) {\n        if (intersectsTriangle) {\n          intersectsRange = function intersectsRange(offset, count, contained, depth) {\n            return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);\n          };\n        } else {\n          intersectsRange = function intersectsRange(offset, count, contained) {\n            return contained;\n          };\n        }\n      }\n      var result = false;\n      var byteOffset = 0;\n      var _iterator2 = _createForOfIteratorHelper(this._roots),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var root = _step2.value;\n          setBuffer(root);\n          result = _shapecast(0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n          clearBuffer();\n          if (result) {\n            break;\n          }\n          byteOffset += root.byteLength;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      trianglePool.releasePrimitive(triangle);\n      return result;\n    }\n  }, {\n    key: \"bvhcast\",\n    value: function bvhcast(otherBvh, matrixToLocal, callbacks) {\n      // BVHCast function for intersecting two BVHs against each other. Ultimately just uses two recursive shapecast calls rather\n      // than an approach that walks down the tree (see bvhcast.js file for more info).\n\n      var intersectsRanges = callbacks.intersectsRanges,\n        intersectsTriangles = callbacks.intersectsTriangles;\n      var indexAttr = this.geometry.index;\n      var positionAttr = this.geometry.attributes.position;\n      var otherIndexAttr = otherBvh.geometry.index;\n      var otherPositionAttr = otherBvh.geometry.attributes.position;\n      tempMatrix.copy(matrixToLocal).invert();\n      var triangle = trianglePool.getPrimitive();\n      var triangle2 = trianglePool.getPrimitive();\n      if (intersectsTriangles) {\n        var iterateOverDoubleTriangles = function iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n          for (var i2 = offset2, l2 = offset2 + count2; i2 < l2; i2++) {\n            setTriangle(triangle2, i2 * 3, otherIndexAttr, otherPositionAttr);\n            triangle2.a.applyMatrix4(matrixToLocal);\n            triangle2.b.applyMatrix4(matrixToLocal);\n            triangle2.c.applyMatrix4(matrixToLocal);\n            triangle2.needsUpdate = true;\n            for (var i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++) {\n              setTriangle(triangle, i1 * 3, indexAttr, positionAttr);\n              triangle.needsUpdate = true;\n              if (intersectsTriangles(triangle, triangle2, i1, i2, depth1, index1, depth2, index2)) {\n                return true;\n              }\n            }\n          }\n          return false;\n        };\n        if (intersectsRanges) {\n          var originalIntersectsRanges = intersectsRanges;\n          intersectsRanges = function intersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n            if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {\n              return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);\n            }\n            return true;\n          };\n        } else {\n          intersectsRanges = iterateOverDoubleTriangles;\n        }\n      }\n      otherBvh.getBoundingBox(aabb2);\n      aabb2.applyMatrix4(matrixToLocal);\n      var result = this.shapecast({\n        intersectsBounds: function intersectsBounds(box) {\n          return aabb2.intersectsBox(box);\n        },\n        intersectsRange: function intersectsRange(offset1, count1, contained, depth1, nodeIndex1, box) {\n          aabb.copy(box);\n          aabb.applyMatrix4(tempMatrix);\n          return otherBvh.shapecast({\n            intersectsBounds: function intersectsBounds(box) {\n              return aabb.intersectsBox(box);\n            },\n            intersectsRange: function intersectsRange(offset2, count2, contained, depth2, nodeIndex2) {\n              return intersectsRanges(offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2);\n            }\n          });\n        }\n      });\n      trianglePool.releasePrimitive(triangle);\n      trianglePool.releasePrimitive(triangle2);\n      return result;\n    }\n\n    /* Derived Cast Functions */\n  }, {\n    key: \"intersectsBox\",\n    value: function intersectsBox(box, boxToMesh) {\n      obb.set(box.min, box.max, boxToMesh);\n      obb.needsUpdate = true;\n      return this.shapecast({\n        intersectsBounds: function intersectsBounds(box) {\n          return obb.intersectsBox(box);\n        },\n        intersectsTriangle: function intersectsTriangle(tri) {\n          return obb.intersectsTriangle(tri);\n        }\n      });\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      return this.shapecast({\n        intersectsBounds: function intersectsBounds(box) {\n          return sphere.intersectsBox(box);\n        },\n        intersectsTriangle: function intersectsTriangle(tri) {\n          return tri.intersectsSphere(sphere);\n        }\n      });\n    }\n  }, {\n    key: \"closestPointToGeometry\",\n    value: function closestPointToGeometry(otherGeometry, geometryToBvh) {\n      var target1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var target2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var minThreshold = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var maxThreshold = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Infinity;\n      if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n      }\n      obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n      obb.needsUpdate = true;\n      var geometry = this.geometry;\n      var pos = geometry.attributes.position;\n      var index = geometry.index;\n      var otherPos = otherGeometry.attributes.position;\n      var otherIndex = otherGeometry.index;\n      var triangle = trianglePool.getPrimitive();\n      var triangle2 = trianglePool.getPrimitive();\n      var tempTarget1 = temp1;\n      var tempTargetDest1 = temp2;\n      var tempTarget2 = null;\n      var tempTargetDest2 = null;\n      if (target2) {\n        tempTarget2 = temp3;\n        tempTargetDest2 = temp4;\n      }\n      var closestDistance = Infinity;\n      var closestDistanceTriIndex = null;\n      var closestDistanceOtherTriIndex = null;\n      tempMatrix.copy(geometryToBvh).invert();\n      obb2.matrix.copy(tempMatrix);\n      this.shapecast({\n        boundsTraverseOrder: function boundsTraverseOrder(box) {\n          return obb.distanceToBox(box);\n        },\n        intersectsBounds: function intersectsBounds(box, isLeaf, score) {\n          if (score < closestDistance && score < maxThreshold) {\n            // if we know the triangles of this bounds will be intersected next then\n            // save the bounds to use during triangle checks.\n            if (isLeaf) {\n              obb2.min.copy(box.min);\n              obb2.max.copy(box.max);\n              obb2.needsUpdate = true;\n            }\n            return true;\n          }\n          return false;\n        },\n        intersectsRange: function intersectsRange(offset, count) {\n          if (otherGeometry.boundsTree) {\n            // if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n            // the closest bounds in the other geometry to check.\n            return otherGeometry.boundsTree.shapecast({\n              boundsTraverseOrder: function boundsTraverseOrder(box) {\n                return obb2.distanceToBox(box);\n              },\n              intersectsBounds: function intersectsBounds(box, isLeaf, score) {\n                return score < closestDistance && score < maxThreshold;\n              },\n              intersectsRange: function intersectsRange(otherOffset, otherCount) {\n                for (var i2 = otherOffset * 3, l2 = (otherOffset + otherCount) * 3; i2 < l2; i2 += 3) {\n                  setTriangle(triangle2, i2, otherIndex, otherPos);\n                  triangle2.a.applyMatrix4(geometryToBvh);\n                  triangle2.b.applyMatrix4(geometryToBvh);\n                  triangle2.c.applyMatrix4(geometryToBvh);\n                  triangle2.needsUpdate = true;\n                  for (var i = offset * 3, l = (offset + count) * 3; i < l; i += 3) {\n                    setTriangle(triangle, i, index, pos);\n                    triangle.needsUpdate = true;\n                    var dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                    if (dist < closestDistance) {\n                      tempTargetDest1.copy(tempTarget1);\n                      if (tempTargetDest2) {\n                        tempTargetDest2.copy(tempTarget2);\n                      }\n                      closestDistance = dist;\n                      closestDistanceTriIndex = i / 3;\n                      closestDistanceOtherTriIndex = i2 / 3;\n                    }\n\n                    // stop traversal if we find a point that's under the given threshold\n                    if (dist < minThreshold) {\n                      return true;\n                    }\n                  }\n                }\n              }\n            });\n          } else {\n            // If no bounds tree then we'll just check every triangle.\n            var triCount = otherIndex ? otherIndex.count : otherPos.count;\n            for (var i2 = 0, l2 = triCount; i2 < l2; i2 += 3) {\n              setTriangle(triangle2, i2, otherIndex, otherPos);\n              triangle2.a.applyMatrix4(geometryToBvh);\n              triangle2.b.applyMatrix4(geometryToBvh);\n              triangle2.c.applyMatrix4(geometryToBvh);\n              triangle2.needsUpdate = true;\n              for (var i = offset * 3, l = (offset + count) * 3; i < l; i += 3) {\n                setTriangle(triangle, i, index, pos);\n                triangle.needsUpdate = true;\n                var dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                if (dist < closestDistance) {\n                  tempTargetDest1.copy(tempTarget1);\n                  if (tempTargetDest2) {\n                    tempTargetDest2.copy(tempTarget2);\n                  }\n                  closestDistance = dist;\n                  closestDistanceTriIndex = i / 3;\n                  closestDistanceOtherTriIndex = i2 / 3;\n                }\n\n                // stop traversal if we find a point that's under the given threshold\n                if (dist < minThreshold) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      });\n      trianglePool.releasePrimitive(triangle);\n      trianglePool.releasePrimitive(triangle2);\n      if (closestDistance === Infinity) return null;\n      if (!target1.point) target1.point = tempTargetDest1.clone();else target1.point.copy(tempTargetDest1);\n      target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n      if (target2) {\n        if (!target2.point) target2.point = tempTargetDest2.clone();else target2.point.copy(tempTargetDest2);\n        target2.point.applyMatrix4(tempMatrix);\n        tempTargetDest1.applyMatrix4(tempMatrix);\n        target2.distance = tempTargetDest1.sub(target2.point).length();\n        target2.faceIndex = closestDistanceOtherTriIndex;\n      }\n      return target1;\n    }\n  }, {\n    key: \"closestPointToPoint\",\n    value: function closestPointToPoint(point) {\n      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var minThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var maxThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n      // early out if under minThreshold\n      // skip checking if over maxThreshold\n      // set minThreshold = maxThreshold to quickly check if a point is within a threshold\n      // returns Infinity if no value found\n      var minThresholdSq = minThreshold * minThreshold;\n      var maxThresholdSq = maxThreshold * maxThreshold;\n      var closestDistanceSq = Infinity;\n      var closestDistanceTriIndex = null;\n      this.shapecast({\n        boundsTraverseOrder: function boundsTraverseOrder(box) {\n          temp.copy(point).clamp(box.min, box.max);\n          return temp.distanceToSquared(point);\n        },\n        intersectsBounds: function intersectsBounds(box, isLeaf, score) {\n          return score < closestDistanceSq && score < maxThresholdSq;\n        },\n        intersectsTriangle: function intersectsTriangle(tri, triIndex) {\n          tri.closestPointToPoint(point, temp);\n          var distSq = point.distanceToSquared(temp);\n          if (distSq < closestDistanceSq) {\n            temp1.copy(temp);\n            closestDistanceSq = distSq;\n            closestDistanceTriIndex = triIndex;\n          }\n          if (distSq < minThresholdSq) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      });\n      if (closestDistanceSq === Infinity) return null;\n      var closestDistance = Math.sqrt(closestDistanceSq);\n      if (!target.point) target.point = temp1.clone();else target.point.copy(temp1);\n      target.distance = closestDistance, target.faceIndex = closestDistanceTriIndex;\n      return target;\n    }\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(target) {\n      target.makeEmpty();\n      var roots = this._roots;\n      roots.forEach(function (buffer) {\n        arrayToBox(0, new Float32Array(buffer), tempBox);\n        target.union(tempBox);\n      });\n      return target;\n    }\n  }], [{\n    key: \"serialize\",\n    value: function serialize(bvh) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (options.isBufferGeometry) {\n        console.warn('MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.');\n        return MeshBVH.serialize(arguments[0], {\n          cloneBuffers: arguments[2] === undefined ? true : arguments[2]\n        });\n      }\n      options = _objectSpread({\n        cloneBuffers: true\n      }, options);\n      var geometry = bvh.geometry;\n      var rootData = bvh._roots;\n      var indexAttribute = geometry.getIndex();\n      var result;\n      if (options.cloneBuffers) {\n        result = {\n          roots: rootData.map(function (root) {\n            return root.slice();\n          }),\n          index: indexAttribute.array.slice()\n        };\n      } else {\n        result = {\n          roots: rootData,\n          index: indexAttribute.array\n        };\n      }\n      return result;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data, geometry) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (typeof options === 'boolean') {\n        console.warn('MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.');\n        return MeshBVH.deserialize(arguments[0], arguments[1], {\n          setIndex: arguments[2] === undefined ? true : arguments[2]\n        });\n      }\n      options = _objectSpread({\n        setIndex: true\n      }, options);\n      var index = data.index,\n        roots = data.roots;\n      var bvh = new MeshBVH(geometry, _objectSpread(_objectSpread({}, options), {}, _defineProperty({}, SKIP_GENERATION, true)));\n      bvh._roots = roots;\n      if (options.setIndex) {\n        var indexAttribute = geometry.getIndex();\n        if (indexAttribute === null) {\n          var newIndex = new BufferAttribute(data.index, 1, false);\n          geometry.setIndex(newIndex);\n        } else if (indexAttribute.array !== index) {\n          indexAttribute.array.set(index);\n          indexAttribute.needsUpdate = true;\n        }\n      }\n      return bvh;\n    }\n  }]);\n  return MeshBVH;\n}();","map":{"version":3,"names":["Vector3","BufferAttribute","Box3","FrontSide","Matrix4","CENTER","BYTES_PER_NODE","IS_LEAFNODE_FLAG","buildPackedTree","raycast","raycastFirst","shapecast","intersectsGeometry","setBuffer","clearBuffer","OrientedBox","ExtendedTriangle","PrimitivePool","arrayToBox","iterateOverTriangles","setTriangle","SKIP_GENERATION","Symbol","aabb","aabb2","tempMatrix","obb","obb2","temp","temp1","temp2","temp3","temp4","tempBox","trianglePool","MeshBVH","geometry","options","isBufferGeometry","Error","index","isInterleavedBufferAttribute","Object","assign","strategy","maxDepth","maxLeafTris","verbose","useSharedArrayBuffer","setBoundingBox","onProgress","SharedArrayBuffer","_roots","boundingBox","getBoundingBox","nodeIndices","Array","isArray","Set","indexArr","array","posAttr","attributes","position","buffer","uint32Array","uint16Array","float32Array","byteOffset","roots","i","l","length","Uint32Array","Uint16Array","Float32Array","_traverse","byteLength","node32Index","force","node16Index","isLeaf","offset","count","minx","Infinity","miny","minz","maxx","maxy","maxz","x","getX","y","getY","z","getZ","left","right","offsetLeft","offsetRight","forceChildren","includesLeft","includesRight","has","traverseLeft","traverseRight","leftChange","rightChange","didChange","lefti","righti","minLeftValue","maxLeftValue","minRightValue","maxRightValue","callback","rootIndex","depth","splitAxis","stopTraversal","ray","materialOrSide","intersects","isMaterial","isArrayMaterial","groups","side","materialSide","materialIndex","startCount","j","jl","face","closestResult","result","distance","otherGeometry","geomToMesh","root","callbacks","_intersectsTriangleFunc","_orderNodesFunc","Function","originalTriangleFunc","tri","contained","i3","boundsTraverseOrder","intersectsBounds","intersectsTriangle","intersectsRange","console","warn","triangle","getPrimitive","originalIntersectsRange","nodeIndex","releasePrimitive","otherBvh","matrixToLocal","intersectsRanges","intersectsTriangles","indexAttr","positionAttr","otherIndexAttr","otherPositionAttr","copy","invert","triangle2","iterateOverDoubleTriangles","offset1","count1","offset2","count2","depth1","index1","depth2","index2","i2","l2","a","applyMatrix4","b","c","needsUpdate","i1","l1","originalIntersectsRanges","box","intersectsBox","nodeIndex1","nodeIndex2","boxToMesh","set","min","max","sphere","intersectsSphere","geometryToBvh","target1","target2","minThreshold","maxThreshold","computeBoundingBox","pos","otherPos","otherIndex","tempTarget1","tempTargetDest1","tempTarget2","tempTargetDest2","closestDistance","closestDistanceTriIndex","closestDistanceOtherTriIndex","matrix","distanceToBox","score","boundsTree","otherOffset","otherCount","dist","distanceToTriangle","triCount","point","clone","faceIndex","sub","target","minThresholdSq","maxThresholdSq","closestDistanceSq","clamp","distanceToSquared","triIndex","closestPointToPoint","distSq","Math","sqrt","makeEmpty","forEach","union","bvh","serialize","arguments","cloneBuffers","undefined","rootData","indexAttribute","getIndex","map","slice","data","deserialize","setIndex","newIndex"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-mesh-bvh/src/core/MeshBVH.js"],"sourcesContent":["import { Vector3, BufferAttribute, Box3, FrontSide, Matrix4 } from 'three';\r\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG } from './Constants.js';\r\nimport { buildPackedTree } from './buildFunctions.js';\r\nimport {\r\n\traycast,\r\n\traycastFirst,\r\n\tshapecast,\r\n\tintersectsGeometry,\r\n\tsetBuffer,\r\n\tclearBuffer,\r\n} from './castFunctions.js';\r\nimport { OrientedBox } from '../math/OrientedBox.js';\r\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\r\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\r\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\r\nimport { iterateOverTriangles, setTriangle } from '../utils/TriangleUtilities.js';\r\n\r\nconst SKIP_GENERATION = Symbol( 'skip tree generation' );\r\n\r\nconst aabb = /* @__PURE__ */ new Box3();\r\nconst aabb2 = /* @__PURE__ */ new Box3();\r\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\r\nconst obb = /* @__PURE__ */ new OrientedBox();\r\nconst obb2 = /* @__PURE__ */ new OrientedBox();\r\nconst temp = /* @__PURE__ */ new Vector3();\r\nconst temp1 = /* @__PURE__ */ new Vector3();\r\nconst temp2 = /* @__PURE__ */ new Vector3();\r\nconst temp3 = /* @__PURE__ */ new Vector3();\r\nconst temp4 = /* @__PURE__ */ new Vector3();\r\nconst tempBox = /* @__PURE__ */ new Box3();\r\nconst trianglePool = /* @__PURE__ */ new PrimitivePool( () => new ExtendedTriangle() );\r\n\r\nexport class MeshBVH {\r\n\r\n\tstatic serialize( bvh, options = {} ) {\r\n\r\n\t\tif ( options.isBufferGeometry ) {\r\n\r\n\t\t\tconsole.warn( 'MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.' );\r\n\r\n\t\t\treturn MeshBVH.serialize(\r\n\t\t\t\targuments[ 0 ],\r\n\t\t\t\t{\r\n\t\t\t\t\tcloneBuffers: arguments[ 2 ] === undefined ? true : arguments[ 2 ],\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\toptions = {\r\n\t\t\tcloneBuffers: true,\r\n\t\t\t...options,\r\n\t\t};\r\n\r\n\t\tconst geometry = bvh.geometry;\r\n\t\tconst rootData = bvh._roots;\r\n\t\tconst indexAttribute = geometry.getIndex();\r\n\t\tlet result;\r\n\t\tif ( options.cloneBuffers ) {\r\n\r\n\t\t\tresult = {\r\n\t\t\t\troots: rootData.map( root => root.slice() ),\r\n\t\t\t\tindex: indexAttribute.array.slice(),\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult = {\r\n\t\t\t\troots: rootData,\r\n\t\t\t\tindex: indexAttribute.array,\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tstatic deserialize( data, geometry, options = {} ) {\r\n\r\n\t\tif ( typeof options === 'boolean' ) {\r\n\r\n\t\t\tconsole.warn( 'MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.' );\r\n\r\n\t\t\treturn MeshBVH.deserialize(\r\n\t\t\t\targuments[ 0 ],\r\n\t\t\t\targuments[ 1 ],\r\n\t\t\t\t{\r\n\t\t\t\t\tsetIndex: arguments[ 2 ] === undefined ? true : arguments[ 2 ],\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\toptions = {\r\n\t\t\tsetIndex: true,\r\n\t\t\t...options,\r\n\t\t};\r\n\r\n\t\tconst { index, roots } = data;\r\n\t\tconst bvh = new MeshBVH( geometry, { ...options, [ SKIP_GENERATION ]: true } );\r\n\t\tbvh._roots = roots;\r\n\r\n\t\tif ( options.setIndex ) {\r\n\r\n\t\t\tconst indexAttribute = geometry.getIndex();\r\n\t\t\tif ( indexAttribute === null ) {\r\n\r\n\t\t\t\tconst newIndex = new BufferAttribute( data.index, 1, false );\r\n\t\t\t\tgeometry.setIndex( newIndex );\r\n\r\n\t\t\t} else if ( indexAttribute.array !== index ) {\r\n\r\n\t\t\t\tindexAttribute.array.set( index );\r\n\t\t\t\tindexAttribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn bvh;\r\n\r\n\t}\r\n\r\n\tconstructor( geometry, options = {} ) {\r\n\r\n\t\tif ( ! geometry.isBufferGeometry ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\r\n\r\n\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\r\n\r\n\t\t}\r\n\r\n\t\t// default options\r\n\t\toptions = Object.assign( {\r\n\r\n\t\t\tstrategy: CENTER,\r\n\t\t\tmaxDepth: 40,\r\n\t\t\tmaxLeafTris: 10,\r\n\t\t\tverbose: true,\r\n\t\t\tuseSharedArrayBuffer: false,\r\n\t\t\tsetBoundingBox: true,\r\n\t\t\tonProgress: null,\r\n\r\n\t\t\t// undocumented options\r\n\r\n\t\t\t// Whether to skip generating the tree. Used for deserialization.\r\n\t\t\t[ SKIP_GENERATION ]: false,\r\n\r\n\t\t}, options );\r\n\r\n\t\tif ( options.useSharedArrayBuffer && typeof SharedArrayBuffer === 'undefined' ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: SharedArrayBuffer is not available.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis._roots = null;\r\n\t\tif ( ! options[ SKIP_GENERATION ] ) {\r\n\r\n\t\t\tthis._roots = buildPackedTree( geometry, options );\r\n\r\n\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\r\n\r\n\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new Box3() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// retain references to the geometry so we can use them it without having to\r\n\t\t// take a geometry reference in every function.\r\n\t\tthis.geometry = geometry;\r\n\r\n\t}\r\n\r\n\trefit( nodeIndices = null ) {\r\n\r\n\t\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\r\n\r\n\t\t\tnodeIndices = new Set( nodeIndices );\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst indexArr = geometry.index.array;\r\n\t\tconst posAttr = geometry.attributes.position;\r\n\r\n\t\tlet buffer, uint32Array, uint16Array, float32Array;\r\n\t\tlet byteOffset = 0;\r\n\t\tconst roots = this._roots;\r\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\r\n\r\n\t\t\tbuffer = roots[ i ];\r\n\t\t\tuint32Array = new Uint32Array( buffer );\r\n\t\t\tuint16Array = new Uint16Array( buffer );\r\n\t\t\tfloat32Array = new Float32Array( buffer );\r\n\r\n\t\t\t_traverse( 0, byteOffset );\r\n\t\t\tbyteOffset += buffer.byteLength;\r\n\r\n\t\t}\r\n\r\n\t\tfunction _traverse( node32Index, byteOffset, force = false ) {\r\n\r\n\t\t\tconst node16Index = node32Index * 2;\r\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\r\n\t\t\tif ( isLeaf ) {\r\n\r\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\r\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\r\n\r\n\t\t\t\tlet minx = Infinity;\r\n\t\t\t\tlet miny = Infinity;\r\n\t\t\t\tlet minz = Infinity;\r\n\t\t\t\tlet maxx = - Infinity;\r\n\t\t\t\tlet maxy = - Infinity;\r\n\t\t\t\tlet maxz = - Infinity;\r\n\r\n\t\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst index = indexArr[ i ];\r\n\t\t\t\t\tconst x = posAttr.getX( index );\r\n\t\t\t\t\tconst y = posAttr.getY( index );\r\n\t\t\t\t\tconst z = posAttr.getZ( index );\r\n\r\n\t\t\t\t\tif ( x < minx ) minx = x;\r\n\t\t\t\t\tif ( x > maxx ) maxx = x;\r\n\r\n\t\t\t\t\tif ( y < miny ) miny = y;\r\n\t\t\t\t\tif ( y > maxy ) maxy = y;\r\n\r\n\t\t\t\t\tif ( z < minz ) minz = z;\r\n\t\t\t\t\tif ( z > maxz ) maxz = z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\r\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\r\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\r\n\r\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\r\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\r\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\r\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\r\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\r\n\r\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\r\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\r\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\r\n\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst left = node32Index + 8;\r\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\r\n\r\n\t\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\r\n\t\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\r\n\t\t\t\tconst offsetLeft = left + byteOffset;\r\n\t\t\t\tconst offsetRight = right + byteOffset;\r\n\t\t\t\tlet forceChildren = force;\r\n\t\t\t\tlet includesLeft = false;\r\n\t\t\t\tlet includesRight = false;\r\n\r\n\t\t\t\tif ( nodeIndices ) {\r\n\r\n\t\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\r\n\t\t\t\t\t// then we assume that all children need to be updated.\r\n\t\t\t\t\tif ( ! forceChildren ) {\r\n\r\n\t\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\r\n\t\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\r\n\t\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tincludesLeft = true;\r\n\t\t\t\t\tincludesRight = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst traverseLeft = forceChildren || includesLeft;\r\n\t\t\t\tconst traverseRight = forceChildren || includesRight;\r\n\r\n\t\t\t\tlet leftChange = false;\r\n\t\t\t\tif ( traverseLeft ) {\r\n\r\n\t\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet rightChange = false;\r\n\t\t\t\tif ( traverseRight ) {\r\n\r\n\t\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst didChange = leftChange || rightChange;\r\n\t\t\t\tif ( didChange ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst lefti = left + i;\r\n\t\t\t\t\t\tconst righti = right + i;\r\n\t\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\r\n\t\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\r\n\t\t\t\t\t\tconst minRightValue = float32Array[ righti ];\r\n\t\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\r\n\r\n\t\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\r\n\t\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn didChange;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverse( callback, rootIndex = 0 ) {\r\n\r\n\t\tconst buffer = this._roots[ rootIndex ];\r\n\t\tconst uint32Array = new Uint32Array( buffer );\r\n\t\tconst uint16Array = new Uint16Array( buffer );\r\n\t\t_traverse( 0 );\r\n\r\n\t\tfunction _traverse( node32Index, depth = 0 ) {\r\n\r\n\t\t\tconst node16Index = node32Index * 2;\r\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\r\n\t\t\tif ( isLeaf ) {\r\n\r\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\r\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\r\n\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// TODO: use node functions here\r\n\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\r\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\r\n\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\r\n\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\r\n\r\n\t\t\t\tif ( ! stopTraversal ) {\r\n\r\n\t\t\t\t\t_traverse( left, depth + 1 );\r\n\t\t\t\t\t_traverse( right, depth + 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Core Cast Functions */\r\n\traycast( ray, materialOrSide = FrontSide ) {\r\n\r\n\t\tconst roots = this._roots;\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst intersects = [];\r\n\t\tconst isMaterial = materialOrSide.isMaterial;\r\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\r\n\r\n\t\tconst groups = geometry.groups;\r\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\r\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\r\n\t\t\tconst startCount = intersects.length;\r\n\r\n\t\t\tsetBuffer( roots[ i ] );\r\n\t\t\traycast( 0, geometry, materialSide, ray, intersects );\r\n\t\t\tclearBuffer();\r\n\r\n\t\t\tif ( isArrayMaterial ) {\r\n\r\n\t\t\t\tconst materialIndex = groups[ i ].materialIndex;\r\n\t\t\t\tfor ( let j = startCount, jl = intersects.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tintersects[ j ].face.materialIndex = materialIndex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn intersects;\r\n\r\n\t}\r\n\r\n\traycastFirst( ray, materialOrSide = FrontSide ) {\r\n\r\n\t\tconst roots = this._roots;\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst isMaterial = materialOrSide.isMaterial;\r\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\r\n\r\n\t\tlet closestResult = null;\r\n\r\n\t\tconst groups = geometry.groups;\r\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\r\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\r\n\r\n\t\t\tsetBuffer( roots[ i ] );\r\n\t\t\tconst result = raycastFirst( 0, geometry, materialSide, ray );\r\n\t\t\tclearBuffer();\r\n\r\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\r\n\r\n\t\t\t\tclosestResult = result;\r\n\t\t\t\tif ( isArrayMaterial ) {\r\n\r\n\t\t\t\t\tresult.face.materialIndex = groups[ i ].materialIndex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn closestResult;\r\n\r\n\t}\r\n\r\n\tintersectsGeometry( otherGeometry, geomToMesh ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tlet result = false;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tsetBuffer( root );\r\n\t\t\tresult = intersectsGeometry( 0, geometry, otherGeometry, geomToMesh );\r\n\t\t\tclearBuffer();\r\n\r\n\t\t\tif ( result ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tshapecast( callbacks, _intersectsTriangleFunc, _orderNodesFunc ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tif ( callbacks instanceof Function ) {\r\n\r\n\t\t\tif ( _intersectsTriangleFunc ) {\r\n\r\n\t\t\t\t// Support the previous function signature that provided three sequential index buffer\r\n\t\t\t\t// indices here.\r\n\t\t\t\tconst originalTriangleFunc = _intersectsTriangleFunc;\r\n\t\t\t\t_intersectsTriangleFunc = ( tri, index, contained, depth ) => {\r\n\r\n\t\t\t\t\tconst i3 = index * 3;\r\n\t\t\t\t\treturn originalTriangleFunc( tri, i3, i3 + 1, i3 + 2, contained, depth );\r\n\r\n\t\t\t\t};\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcallbacks = {\r\n\r\n\t\t\t\tboundsTraverseOrder: _orderNodesFunc,\r\n\t\t\t\tintersectsBounds: callbacks,\r\n\t\t\t\tintersectsTriangle: _intersectsTriangleFunc,\r\n\t\t\t\tintersectsRange: null,\r\n\r\n\t\t\t};\r\n\r\n\t\t\tconsole.warn( 'MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst triangle = trianglePool.getPrimitive();\r\n\t\tlet {\r\n\t\t\tboundsTraverseOrder,\r\n\t\t\tintersectsBounds,\r\n\t\t\tintersectsRange,\r\n\t\t\tintersectsTriangle,\r\n\t\t} = callbacks;\r\n\r\n\t\tif ( intersectsRange && intersectsTriangle ) {\r\n\r\n\t\t\tconst originalIntersectsRange = intersectsRange;\r\n\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\r\n\r\n\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\r\n\r\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t};\r\n\r\n\t\t} else if ( ! intersectsRange ) {\r\n\r\n\t\t\tif ( intersectsTriangle ) {\r\n\r\n\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\r\n\r\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tintersectsRange = ( offset, count, contained ) => {\r\n\r\n\t\t\t\t\treturn contained;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet result = false;\r\n\t\tlet byteOffset = 0;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tsetBuffer( root );\r\n\t\t\tresult = shapecast( 0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\r\n\t\t\tclearBuffer();\r\n\r\n\t\t\tif ( result ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbyteOffset += root.byteLength;\r\n\r\n\t\t}\r\n\r\n\t\ttrianglePool.releasePrimitive( triangle );\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tbvhcast( otherBvh, matrixToLocal, callbacks ) {\r\n\r\n\t\t// BVHCast function for intersecting two BVHs against each other. Ultimately just uses two recursive shapecast calls rather\r\n\t\t// than an approach that walks down the tree (see bvhcast.js file for more info).\r\n\r\n\t\tlet {\r\n\t\t\tintersectsRanges,\r\n\t\t\tintersectsTriangles,\r\n\t\t} = callbacks;\r\n\r\n\t\tconst indexAttr = this.geometry.index;\r\n\t\tconst positionAttr = this.geometry.attributes.position;\r\n\r\n\t\tconst otherIndexAttr = otherBvh.geometry.index;\r\n\t\tconst otherPositionAttr = otherBvh.geometry.attributes.position;\r\n\r\n\t\ttempMatrix.copy( matrixToLocal ).invert();\r\n\r\n\t\tconst triangle = trianglePool.getPrimitive();\r\n\t\tconst triangle2 = trianglePool.getPrimitive();\r\n\r\n\t\tif ( intersectsTriangles ) {\r\n\r\n\t\t\tfunction iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\r\n\r\n\t\t\t\tfor ( let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2 ++ ) {\r\n\r\n\t\t\t\t\tsetTriangle( triangle2, i2 * 3, otherIndexAttr, otherPositionAttr );\r\n\t\t\t\t\ttriangle2.a.applyMatrix4( matrixToLocal );\r\n\t\t\t\t\ttriangle2.b.applyMatrix4( matrixToLocal );\r\n\t\t\t\t\ttriangle2.c.applyMatrix4( matrixToLocal );\r\n\t\t\t\t\ttriangle2.needsUpdate = true;\r\n\r\n\t\t\t\t\tfor ( let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1 ++ ) {\r\n\r\n\t\t\t\t\t\tsetTriangle( triangle, i1 * 3, indexAttr, positionAttr );\r\n\t\t\t\t\t\ttriangle.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( intersectsTriangles( triangle, triangle2, i1, i2, depth1, index1, depth2, index2 ) ) {\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( intersectsRanges ) {\r\n\r\n\t\t\t\tconst originalIntersectsRanges = intersectsRanges;\r\n\t\t\t\tintersectsRanges = function ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\r\n\r\n\t\t\t\t\tif ( ! originalIntersectsRanges( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) ) {\r\n\r\n\t\t\t\t\t\treturn iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tintersectsRanges = iterateOverDoubleTriangles;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\totherBvh.getBoundingBox( aabb2 );\r\n\t\taabb2.applyMatrix4( matrixToLocal );\r\n\t\tconst result = this.shapecast( {\r\n\r\n\t\t\tintersectsBounds: box => aabb2.intersectsBox( box ),\r\n\r\n\t\t\tintersectsRange: ( offset1, count1, contained, depth1, nodeIndex1, box ) => {\r\n\r\n\t\t\t\taabb.copy( box );\r\n\t\t\t\taabb.applyMatrix4( tempMatrix );\r\n\t\t\t\treturn otherBvh.shapecast( {\r\n\r\n\t\t\t\t\tintersectsBounds: box => aabb.intersectsBox( box ),\r\n\r\n\t\t\t\t\tintersectsRange: ( offset2, count2, contained, depth2, nodeIndex2 ) => {\r\n\r\n\t\t\t\t\t\treturn intersectsRanges( offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2 );\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\ttrianglePool.releasePrimitive( triangle );\r\n\t\ttrianglePool.releasePrimitive( triangle2 );\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/* Derived Cast Functions */\r\n\tintersectsBox( box, boxToMesh ) {\r\n\r\n\t\tobb.set( box.min, box.max, boxToMesh );\r\n\t\tobb.needsUpdate = true;\r\n\r\n\t\treturn this.shapecast(\r\n\t\t\t{\r\n\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\r\n\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn this.shapecast(\r\n\t\t\t{\r\n\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\r\n\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tclosestPointToGeometry( otherGeometry, geometryToBvh, target1 = { }, target2 = { }, minThreshold = 0, maxThreshold = Infinity ) {\r\n\r\n\t\tif ( ! otherGeometry.boundingBox ) {\r\n\r\n\t\t\totherGeometry.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\r\n\t\tobb.needsUpdate = true;\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst pos = geometry.attributes.position;\r\n\t\tconst index = geometry.index;\r\n\t\tconst otherPos = otherGeometry.attributes.position;\r\n\t\tconst otherIndex = otherGeometry.index;\r\n\t\tconst triangle = trianglePool.getPrimitive();\r\n\t\tconst triangle2 = trianglePool.getPrimitive();\r\n\r\n\t\tlet tempTarget1 = temp1;\r\n\t\tlet tempTargetDest1 = temp2;\r\n\t\tlet tempTarget2 = null;\r\n\t\tlet tempTargetDest2 = null;\r\n\r\n\t\tif ( target2 ) {\r\n\r\n\t\t\ttempTarget2 = temp3;\r\n\t\t\ttempTargetDest2 = temp4;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tlet closestDistanceTriIndex = null;\r\n\t\tlet closestDistanceOtherTriIndex = null;\r\n\t\ttempMatrix.copy( geometryToBvh ).invert();\r\n\t\tobb2.matrix.copy( tempMatrix );\r\n\t\tthis.shapecast(\r\n\t\t\t{\r\n\r\n\t\t\t\tboundsTraverseOrder: box => {\r\n\r\n\t\t\t\t\treturn obb.distanceToBox( box );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\r\n\r\n\t\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\r\n\r\n\t\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\r\n\t\t\t\t\t\t// save the bounds to use during triangle checks.\r\n\t\t\t\t\t\tif ( isLeaf ) {\r\n\r\n\t\t\t\t\t\t\tobb2.min.copy( box.min );\r\n\t\t\t\t\t\t\tobb2.max.copy( box.max );\r\n\t\t\t\t\t\t\tobb2.needsUpdate = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tintersectsRange: ( offset, count ) => {\r\n\r\n\t\t\t\t\tif ( otherGeometry.boundsTree ) {\r\n\r\n\t\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\r\n\t\t\t\t\t\t// the closest bounds in the other geometry to check.\r\n\t\t\t\t\t\treturn otherGeometry.boundsTree.shapecast( {\r\n\t\t\t\t\t\t\tboundsTraverseOrder: box => {\r\n\r\n\t\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\r\n\r\n\t\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\r\n\r\n\t\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\r\n\r\n\t\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\r\n\r\n\t\t\t\t\t\t\t\tfor ( let i2 = otherOffset * 3, l2 = ( otherOffset + otherCount ) * 3; i2 < l2; i2 += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle2, i2, otherIndex, otherPos );\r\n\t\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\r\n\r\n\t\t\t\t\t\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tsetTriangle( triangle, i, index, pos );\r\n\t\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\r\n\t\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\r\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i / 3;\r\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2 / 3;\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\r\n\t\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\r\n\t\t\t\t\t\tconst triCount = otherIndex ? otherIndex.count : otherPos.count;\r\n\t\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 += 3 ) {\r\n\r\n\t\t\t\t\t\t\tsetTriangle( triangle2, i2, otherIndex, otherPos );\r\n\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\r\n\r\n\t\t\t\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\tsetTriangle( triangle, i, index, pos );\r\n\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\r\n\r\n\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\r\n\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\r\n\r\n\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\r\n\r\n\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tclosestDistance = dist;\r\n\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i / 3;\r\n\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2 / 3;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\r\n\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\r\n\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t}\r\n\r\n\t\t);\r\n\r\n\t\ttrianglePool.releasePrimitive( triangle );\r\n\t\ttrianglePool.releasePrimitive( triangle2 );\r\n\r\n\t\tif ( closestDistance === Infinity ) return null;\r\n\r\n\t\tif ( ! target1.point ) target1.point = tempTargetDest1.clone();\r\n\t\telse target1.point.copy( tempTargetDest1 );\r\n\t\ttarget1.distance = closestDistance,\r\n\t\ttarget1.faceIndex = closestDistanceTriIndex;\r\n\r\n\t\tif ( target2 ) {\r\n\r\n\t\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\r\n\t\t\telse target2.point.copy( tempTargetDest2 );\r\n\t\t\ttarget2.point.applyMatrix4( tempMatrix );\r\n\t\t\ttempTargetDest1.applyMatrix4( tempMatrix );\r\n\t\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\r\n\t\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\r\n\r\n\t\t}\r\n\r\n\t\treturn target1;\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( point, target = { }, minThreshold = 0, maxThreshold = Infinity ) {\r\n\r\n\t\t// early out if under minThreshold\r\n\t\t// skip checking if over maxThreshold\r\n\t\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\r\n\t\t// returns Infinity if no value found\r\n\t\tconst minThresholdSq = minThreshold * minThreshold;\r\n\t\tconst maxThresholdSq = maxThreshold * maxThreshold;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\t\tlet closestDistanceTriIndex = null;\r\n\t\tthis.shapecast(\r\n\r\n\t\t\t{\r\n\r\n\t\t\t\tboundsTraverseOrder: box => {\r\n\r\n\t\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\r\n\t\t\t\t\treturn temp.distanceToSquared( point );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\r\n\r\n\t\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tintersectsTriangle: ( tri, triIndex ) => {\r\n\r\n\t\t\t\t\ttri.closestPointToPoint( point, temp );\r\n\t\t\t\t\tconst distSq = point.distanceToSquared( temp );\r\n\t\t\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\t\t\ttemp1.copy( temp );\r\n\t\t\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\t\t\tclosestDistanceTriIndex = triIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( distSq < minThresholdSq ) {\r\n\r\n\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t}\r\n\r\n\t\t);\r\n\r\n\t\tif ( closestDistanceSq === Infinity ) return null;\r\n\r\n\t\tconst closestDistance = Math.sqrt( closestDistanceSq );\r\n\r\n\t\tif ( ! target.point ) target.point = temp1.clone();\r\n\t\telse target.point.copy( temp1 );\r\n\t\ttarget.distance = closestDistance,\r\n\t\ttarget.faceIndex = closestDistanceTriIndex;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetBoundingBox( target ) {\r\n\r\n\t\ttarget.makeEmpty();\r\n\r\n\t\tconst roots = this._roots;\r\n\t\troots.forEach( buffer => {\r\n\r\n\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\r\n\t\t\ttarget.union( tempBox );\r\n\r\n\t\t} );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n}\r\n"],"mappings":";;;;;AAAA,SAASA,OAAO,EAAEC,eAAe,EAAEC,IAAI,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC1E,SAASC,MAAM,EAAEC,cAAc,EAAEC,gBAAgB,QAAQ,gBAAgB;AACzE,SAASC,eAAe,QAAQ,qBAAqB;AACrD,SACCC,OAAO,IAAPA,QAAO,EACPC,YAAY,IAAZA,aAAY,EACZC,SAAS,IAATA,UAAS,EACTC,kBAAkB,IAAlBA,mBAAkB,EAClBC,SAAS,EACTC,WAAW,QACL,oBAAoB;AAC3B,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,SAASC,oBAAoB,EAAEC,WAAW,QAAQ,+BAA+B;AAEjF,IAAMC,eAAe,GAAGC,MAAM,CAAE,sBAAsB,CAAE;AAExD,IAAMC,IAAI,GAAG,eAAgB,IAAIrB,IAAI,EAAE;AACvC,IAAMsB,KAAK,GAAG,eAAgB,IAAItB,IAAI,EAAE;AACxC,IAAMuB,UAAU,GAAG,eAAgB,IAAIrB,OAAO,EAAE;AAChD,IAAMsB,GAAG,GAAG,eAAgB,IAAIX,WAAW,EAAE;AAC7C,IAAMY,IAAI,GAAG,eAAgB,IAAIZ,WAAW,EAAE;AAC9C,IAAMa,IAAI,GAAG,eAAgB,IAAI5B,OAAO,EAAE;AAC1C,IAAM6B,KAAK,GAAG,eAAgB,IAAI7B,OAAO,EAAE;AAC3C,IAAM8B,KAAK,GAAG,eAAgB,IAAI9B,OAAO,EAAE;AAC3C,IAAM+B,KAAK,GAAG,eAAgB,IAAI/B,OAAO,EAAE;AAC3C,IAAMgC,KAAK,GAAG,eAAgB,IAAIhC,OAAO,EAAE;AAC3C,IAAMiC,OAAO,GAAG,eAAgB,IAAI/B,IAAI,EAAE;AAC1C,IAAMgC,YAAY,GAAG,eAAgB,IAAIjB,aAAa,CAAE;EAAA,OAAM,IAAID,gBAAgB,EAAE;AAAA,EAAE;AAEtF,WAAamB,OAAO;EA4FnB,iBAAaC,QAAQ,EAAiB;IAAA,IAAfC,OAAO,uEAAG,CAAC,CAAC;IAAA;IAElC,IAAK,CAAED,QAAQ,CAACE,gBAAgB,EAAG;MAElC,MAAM,IAAIC,KAAK,CAAE,+CAA+C,CAAE;IAEnE,CAAC,MAAM,IAAKH,QAAQ,CAACI,KAAK,IAAIJ,QAAQ,CAACI,KAAK,CAACC,4BAA4B,EAAG;MAE3E,MAAM,IAAIF,KAAK,CAAE,+EAA+E,CAAE;IAEnG;;IAEA;IACAF,OAAO,GAAGK,MAAM,CAACC,MAAM;MAEtBC,QAAQ,EAAEvC,MAAM;MAChBwC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,IAAI;MACbC,oBAAoB,EAAE,KAAK;MAC3BC,cAAc,EAAE,IAAI;MACpBC,UAAU,EAAE;IAAI,GAKd7B,eAAe,EAAI,KAAK,GAExBgB,OAAO,CAAE;IAEZ,IAAKA,OAAO,CAACW,oBAAoB,IAAI,OAAOG,iBAAiB,KAAK,WAAW,EAAG;MAE/E,MAAM,IAAIZ,KAAK,CAAE,8CAA8C,CAAE;IAElE;IAEA,IAAI,CAACa,MAAM,GAAG,IAAI;IAClB,IAAK,CAAEf,OAAO,CAAEhB,eAAe,CAAE,EAAG;MAEnC,IAAI,CAAC+B,MAAM,GAAG5C,eAAe,CAAE4B,QAAQ,EAAEC,OAAO,CAAE;MAElD,IAAK,CAAED,QAAQ,CAACiB,WAAW,IAAIhB,OAAO,CAACY,cAAc,EAAG;QAEvDb,QAAQ,CAACiB,WAAW,GAAG,IAAI,CAACC,cAAc,CAAE,IAAIpD,IAAI,EAAE,CAAE;MAEzD;IAED;;IAEA;IACA;IACA,IAAI,CAACkC,QAAQ,GAAGA,QAAQ;EAEzB;EAAC;IAAA;IAAA,OAED,iBAA4B;MAAA,IAArBmB,WAAW,uEAAG,IAAI;MAExB,IAAKA,WAAW,IAAIC,KAAK,CAACC,OAAO,CAAEF,WAAW,CAAE,EAAG;QAElDA,WAAW,GAAG,IAAIG,GAAG,CAAEH,WAAW,CAAE;MAErC;MAEA,IAAMnB,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAMuB,QAAQ,GAAGvB,QAAQ,CAACI,KAAK,CAACoB,KAAK;MACrC,IAAMC,OAAO,GAAGzB,QAAQ,CAAC0B,UAAU,CAACC,QAAQ;MAE5C,IAAIC,MAAM,EAAEC,WAAW,EAAEC,WAAW,EAAEC,YAAY;MAClD,IAAIC,UAAU,GAAG,CAAC;MAClB,IAAMC,KAAK,GAAG,IAAI,CAACjB,MAAM;MACzB,KAAM,IAAIkB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;QAEhDN,MAAM,GAAGK,KAAK,CAAEC,CAAC,CAAE;QACnBL,WAAW,GAAG,IAAIQ,WAAW,CAAET,MAAM,CAAE;QACvCE,WAAW,GAAG,IAAIQ,WAAW,CAAEV,MAAM,CAAE;QACvCG,YAAY,GAAG,IAAIQ,YAAY,CAAEX,MAAM,CAAE;QAEzCY,SAAS,CAAE,CAAC,EAAER,UAAU,CAAE;QAC1BA,UAAU,IAAIJ,MAAM,CAACa,UAAU;MAEhC;MAEA,SAASD,SAAS,CAAEE,WAAW,EAAEV,UAAU,EAAkB;QAAA,IAAhBW,KAAK,uEAAG,KAAK;QAEzD,IAAMC,WAAW,GAAGF,WAAW,GAAG,CAAC;QACnC,IAAMG,MAAM,GAAGf,WAAW,CAAEc,WAAW,GAAG,EAAE,CAAE,KAAKzE,gBAAgB;QACnE,IAAK0E,MAAM,EAAG;UAEb,IAAMC,MAAM,GAAGjB,WAAW,CAAEa,WAAW,GAAG,CAAC,CAAE;UAC7C,IAAMK,KAAK,GAAGjB,WAAW,CAAEc,WAAW,GAAG,EAAE,CAAE;UAE7C,IAAII,IAAI,GAAGC,QAAQ;UACnB,IAAIC,IAAI,GAAGD,QAAQ;UACnB,IAAIE,IAAI,GAAGF,QAAQ;UACnB,IAAIG,IAAI,GAAG,CAAEH,QAAQ;UACrB,IAAII,IAAI,GAAG,CAAEJ,QAAQ;UACrB,IAAIK,IAAI,GAAG,CAAEL,QAAQ;UAErB,KAAM,IAAIf,EAAC,GAAG,CAAC,GAAGY,MAAM,EAAEX,EAAC,GAAG,CAAC,IAAKW,MAAM,GAAGC,KAAK,CAAE,EAAEb,EAAC,GAAGC,EAAC,EAAED,EAAC,EAAG,EAAG;YAEnE,IAAM9B,KAAK,GAAGmB,QAAQ,CAAEW,EAAC,CAAE;YAC3B,IAAMqB,CAAC,GAAG9B,OAAO,CAAC+B,IAAI,CAAEpD,KAAK,CAAE;YAC/B,IAAMqD,CAAC,GAAGhC,OAAO,CAACiC,IAAI,CAAEtD,KAAK,CAAE;YAC/B,IAAMuD,CAAC,GAAGlC,OAAO,CAACmC,IAAI,CAAExD,KAAK,CAAE;YAE/B,IAAKmD,CAAC,GAAGP,IAAI,EAAGA,IAAI,GAAGO,CAAC;YACxB,IAAKA,CAAC,GAAGH,IAAI,EAAGA,IAAI,GAAGG,CAAC;YAExB,IAAKE,CAAC,GAAGP,IAAI,EAAGA,IAAI,GAAGO,CAAC;YACxB,IAAKA,CAAC,GAAGJ,IAAI,EAAGA,IAAI,GAAGI,CAAC;YAExB,IAAKE,CAAC,GAAGR,IAAI,EAAGA,IAAI,GAAGQ,CAAC;YACxB,IAAKA,CAAC,GAAGL,IAAI,EAAGA,IAAI,GAAGK,CAAC;UAEzB;UAEA,IACC5B,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,KAAKM,IAAI,IACxCjB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,KAAKQ,IAAI,IACxCnB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,KAAKS,IAAI,IAExCpB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,KAAKU,IAAI,IACxCrB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,KAAKW,IAAI,IACxCtB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,KAAKY,IAAI,EACvC;YAEDvB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,GAAGM,IAAI;YACtCjB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,GAAGQ,IAAI;YACtCnB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,GAAGS,IAAI;YAEtCpB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,GAAGU,IAAI;YACtCrB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,GAAGW,IAAI;YACtCtB,YAAY,CAAEW,WAAW,GAAG,CAAC,CAAE,GAAGY,IAAI;YAEtC,OAAO,IAAI;UAEZ,CAAC,MAAM;YAEN,OAAO,KAAK;UAEb;QAED,CAAC,MAAM;UAEN,IAAMO,IAAI,GAAGnB,WAAW,GAAG,CAAC;UAC5B,IAAMoB,KAAK,GAAGjC,WAAW,CAAEa,WAAW,GAAG,CAAC,CAAE;;UAE5C;UACA;UACA,IAAMqB,UAAU,GAAGF,IAAI,GAAG7B,UAAU;UACpC,IAAMgC,WAAW,GAAGF,KAAK,GAAG9B,UAAU;UACtC,IAAIiC,aAAa,GAAGtB,KAAK;UACzB,IAAIuB,YAAY,GAAG,KAAK;UACxB,IAAIC,aAAa,GAAG,KAAK;UAEzB,IAAKhD,WAAW,EAAG;YAElB;YACA;YACA,IAAK,CAAE8C,aAAa,EAAG;cAEtBC,YAAY,GAAG/C,WAAW,CAACiD,GAAG,CAAEL,UAAU,CAAE;cAC5CI,aAAa,GAAGhD,WAAW,CAACiD,GAAG,CAAEJ,WAAW,CAAE;cAC9CC,aAAa,GAAG,CAAEC,YAAY,IAAI,CAAEC,aAAa;YAElD;UAED,CAAC,MAAM;YAEND,YAAY,GAAG,IAAI;YACnBC,aAAa,GAAG,IAAI;UAErB;UAEA,IAAME,YAAY,GAAGJ,aAAa,IAAIC,YAAY;UAClD,IAAMI,aAAa,GAAGL,aAAa,IAAIE,aAAa;UAEpD,IAAII,UAAU,GAAG,KAAK;UACtB,IAAKF,YAAY,EAAG;YAEnBE,UAAU,GAAG/B,SAAS,CAAEqB,IAAI,EAAE7B,UAAU,EAAEiC,aAAa,CAAE;UAE1D;UAEA,IAAIO,WAAW,GAAG,KAAK;UACvB,IAAKF,aAAa,EAAG;YAEpBE,WAAW,GAAGhC,SAAS,CAAEsB,KAAK,EAAE9B,UAAU,EAAEiC,aAAa,CAAE;UAE5D;UAEA,IAAMQ,SAAS,GAAGF,UAAU,IAAIC,WAAW;UAC3C,IAAKC,SAAS,EAAG;YAEhB,KAAM,IAAIvC,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,CAAC,EAAEA,GAAC,EAAG,EAAG;cAE9B,IAAMwC,KAAK,GAAGb,IAAI,GAAG3B,GAAC;cACtB,IAAMyC,MAAM,GAAGb,KAAK,GAAG5B,GAAC;cACxB,IAAM0C,YAAY,GAAG7C,YAAY,CAAE2C,KAAK,CAAE;cAC1C,IAAMG,YAAY,GAAG9C,YAAY,CAAE2C,KAAK,GAAG,CAAC,CAAE;cAC9C,IAAMI,aAAa,GAAG/C,YAAY,CAAE4C,MAAM,CAAE;cAC5C,IAAMI,aAAa,GAAGhD,YAAY,CAAE4C,MAAM,GAAG,CAAC,CAAE;cAEhD5C,YAAY,CAAEW,WAAW,GAAGR,GAAC,CAAE,GAAG0C,YAAY,GAAGE,aAAa,GAAGF,YAAY,GAAGE,aAAa;cAC7F/C,YAAY,CAAEW,WAAW,GAAGR,GAAC,GAAG,CAAC,CAAE,GAAG2C,YAAY,GAAGE,aAAa,GAAGF,YAAY,GAAGE,aAAa;YAElG;UAED;UAEA,OAAON,SAAS;QAEjB;MAED;IAED;EAAC;IAAA;IAAA,OAED,kBAAUO,QAAQ,EAAkB;MAAA,IAAhBC,SAAS,uEAAG,CAAC;MAEhC,IAAMrD,MAAM,GAAG,IAAI,CAACZ,MAAM,CAAEiE,SAAS,CAAE;MACvC,IAAMpD,WAAW,GAAG,IAAIQ,WAAW,CAAET,MAAM,CAAE;MAC7C,IAAME,WAAW,GAAG,IAAIQ,WAAW,CAAEV,MAAM,CAAE;MAC7CY,SAAS,CAAE,CAAC,CAAE;MAEd,SAASA,SAAS,CAAEE,WAAW,EAAc;QAAA,IAAZwC,KAAK,uEAAG,CAAC;QAEzC,IAAMtC,WAAW,GAAGF,WAAW,GAAG,CAAC;QACnC,IAAMG,MAAM,GAAGf,WAAW,CAAEc,WAAW,GAAG,EAAE,CAAE,KAAKzE,gBAAgB;QACnE,IAAK0E,MAAM,EAAG;UAEb,IAAMC,MAAM,GAAGjB,WAAW,CAAEa,WAAW,GAAG,CAAC,CAAE;UAC7C,IAAMK,KAAK,GAAGjB,WAAW,CAAEc,WAAW,GAAG,EAAE,CAAE;UAC7CoC,QAAQ,CAAEE,KAAK,EAAErC,MAAM,EAAE,IAAIN,YAAY,CAAEX,MAAM,EAAEc,WAAW,GAAG,CAAC,EAAE,CAAC,CAAE,EAAEI,MAAM,EAAEC,KAAK,CAAE;QAEzF,CAAC,MAAM;UAEN;UACA,IAAMc,IAAI,GAAGnB,WAAW,GAAGxE,cAAc,GAAG,CAAC;UAC7C,IAAM4F,KAAK,GAAGjC,WAAW,CAAEa,WAAW,GAAG,CAAC,CAAE;UAC5C,IAAMyC,SAAS,GAAGtD,WAAW,CAAEa,WAAW,GAAG,CAAC,CAAE;UAChD,IAAM0C,aAAa,GAAGJ,QAAQ,CAAEE,KAAK,EAAErC,MAAM,EAAE,IAAIN,YAAY,CAAEX,MAAM,EAAEc,WAAW,GAAG,CAAC,EAAE,CAAC,CAAE,EAAEyC,SAAS,CAAE;UAE1G,IAAK,CAAEC,aAAa,EAAG;YAEtB5C,SAAS,CAAEqB,IAAI,EAAEqB,KAAK,GAAG,CAAC,CAAE;YAC5B1C,SAAS,CAAEsB,KAAK,EAAEoB,KAAK,GAAG,CAAC,CAAE;UAE9B;QAED;MAED;IAED;;IAEA;EAAA;IAAA;IAAA,OACA,iBAASG,GAAG,EAA+B;MAAA,IAA7BC,cAAc,uEAAGvH,SAAS;MAEvC,IAAMkE,KAAK,GAAG,IAAI,CAACjB,MAAM;MACzB,IAAMhB,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAMuF,UAAU,GAAG,EAAE;MACrB,IAAMC,UAAU,GAAGF,cAAc,CAACE,UAAU;MAC5C,IAAMC,eAAe,GAAGrE,KAAK,CAACC,OAAO,CAAEiE,cAAc,CAAE;MAEvD,IAAMI,MAAM,GAAG1F,QAAQ,CAAC0F,MAAM;MAC9B,IAAMC,IAAI,GAAGH,UAAU,GAAGF,cAAc,CAACK,IAAI,GAAGL,cAAc;MAC9D,KAAM,IAAIpD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;QAEhD,IAAM0D,YAAY,GAAGH,eAAe,GAAGH,cAAc,CAAEI,MAAM,CAAExD,CAAC,CAAE,CAAC2D,aAAa,CAAE,CAACF,IAAI,GAAGA,IAAI;QAC9F,IAAMG,UAAU,GAAGP,UAAU,CAACnD,MAAM;QAEpC3D,SAAS,CAAEwD,KAAK,CAAEC,CAAC,CAAE,CAAE;QACvB7D,QAAO,CAAE,CAAC,EAAE2B,QAAQ,EAAE4F,YAAY,EAAEP,GAAG,EAAEE,UAAU,CAAE;QACrD7G,WAAW,EAAE;QAEb,IAAK+G,eAAe,EAAG;UAEtB,IAAMI,aAAa,GAAGH,MAAM,CAAExD,CAAC,CAAE,CAAC2D,aAAa;UAC/C,KAAM,IAAIE,CAAC,GAAGD,UAAU,EAAEE,EAAE,GAAGT,UAAU,CAACnD,MAAM,EAAE2D,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAG,EAAG;YAEhER,UAAU,CAAEQ,CAAC,CAAE,CAACE,IAAI,CAACJ,aAAa,GAAGA,aAAa;UAEnD;QAED;MAED;MAEA,OAAON,UAAU;IAElB;EAAC;IAAA;IAAA,OAED,sBAAcF,GAAG,EAA+B;MAAA,IAA7BC,cAAc,uEAAGvH,SAAS;MAE5C,IAAMkE,KAAK,GAAG,IAAI,CAACjB,MAAM;MACzB,IAAMhB,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAMwF,UAAU,GAAGF,cAAc,CAACE,UAAU;MAC5C,IAAMC,eAAe,GAAGrE,KAAK,CAACC,OAAO,CAAEiE,cAAc,CAAE;MAEvD,IAAIY,aAAa,GAAG,IAAI;MAExB,IAAMR,MAAM,GAAG1F,QAAQ,CAAC0F,MAAM;MAC9B,IAAMC,IAAI,GAAGH,UAAU,GAAGF,cAAc,CAACK,IAAI,GAAGL,cAAc;MAC9D,KAAM,IAAIpD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;QAEhD,IAAM0D,YAAY,GAAGH,eAAe,GAAGH,cAAc,CAAEI,MAAM,CAAExD,CAAC,CAAE,CAAC2D,aAAa,CAAE,CAACF,IAAI,GAAGA,IAAI;QAE9FlH,SAAS,CAAEwD,KAAK,CAAEC,CAAC,CAAE,CAAE;QACvB,IAAMiE,MAAM,GAAG7H,aAAY,CAAE,CAAC,EAAE0B,QAAQ,EAAE4F,YAAY,EAAEP,GAAG,CAAE;QAC7D3G,WAAW,EAAE;QAEb,IAAKyH,MAAM,IAAI,IAAI,KAAMD,aAAa,IAAI,IAAI,IAAIC,MAAM,CAACC,QAAQ,GAAGF,aAAa,CAACE,QAAQ,CAAE,EAAG;UAE9FF,aAAa,GAAGC,MAAM;UACtB,IAAKV,eAAe,EAAG;YAEtBU,MAAM,CAACF,IAAI,CAACJ,aAAa,GAAGH,MAAM,CAAExD,CAAC,CAAE,CAAC2D,aAAa;UAEtD;QAED;MAED;MAEA,OAAOK,aAAa;IAErB;EAAC;IAAA;IAAA,OAED,4BAAoBG,aAAa,EAAEC,UAAU,EAAG;MAE/C,IAAMtG,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAImG,MAAM,GAAG,KAAK;MAAC,2CACC,IAAI,CAACnF,MAAM;QAAA;MAAA;QAA/B,oDAAkC;UAAA,IAAtBuF,IAAI;UAEf9H,SAAS,CAAE8H,IAAI,CAAE;UACjBJ,MAAM,GAAG3H,mBAAkB,CAAE,CAAC,EAAEwB,QAAQ,EAAEqG,aAAa,EAAEC,UAAU,CAAE;UACrE5H,WAAW,EAAE;UAEb,IAAKyH,MAAM,EAAG;YAEb;UAED;QAED;MAAC;QAAA;MAAA;QAAA;MAAA;MAED,OAAOA,MAAM;IAEd;EAAC;IAAA;IAAA,OAED,mBAAWK,SAAS,EAAEC,uBAAuB,EAAEC,eAAe,EAAG;MAEhE,IAAM1G,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAKwG,SAAS,YAAYG,QAAQ,EAAG;QAEpC,IAAKF,uBAAuB,EAAG;UAE9B;UACA;UACA,IAAMG,oBAAoB,GAAGH,uBAAuB;UACpDA,uBAAuB,GAAG,iCAAEI,GAAG,EAAEzG,KAAK,EAAE0G,SAAS,EAAE5B,KAAK,EAAM;YAE7D,IAAM6B,EAAE,GAAG3G,KAAK,GAAG,CAAC;YACpB,OAAOwG,oBAAoB,CAAEC,GAAG,EAAEE,EAAE,EAAEA,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG,CAAC,EAAED,SAAS,EAAE5B,KAAK,CAAE;UAEzE,CAAC;QAGF;QAEAsB,SAAS,GAAG;UAEXQ,mBAAmB,EAAEN,eAAe;UACpCO,gBAAgB,EAAET,SAAS;UAC3BU,kBAAkB,EAAET,uBAAuB;UAC3CU,eAAe,EAAE;QAElB,CAAC;QAEDC,OAAO,CAACC,IAAI,CAAE,0IAA0I,CAAE;MAE3J;MAEA,IAAMC,QAAQ,GAAGxH,YAAY,CAACyH,YAAY,EAAE;MAC5C,iBAKIf,SAAS;QAJZQ,mBAAmB,cAAnBA,mBAAmB;QACnBC,gBAAgB,cAAhBA,gBAAgB;QAChBE,eAAe,cAAfA,eAAe;QACfD,kBAAkB,cAAlBA,kBAAkB;MAGnB,IAAKC,eAAe,IAAID,kBAAkB,EAAG;QAE5C,IAAMM,uBAAuB,GAAGL,eAAe;QAC/CA,eAAe,GAAG,yBAAErE,MAAM,EAAEC,KAAK,EAAE+D,SAAS,EAAE5B,KAAK,EAAEuC,SAAS,EAAM;UAEnE,IAAK,CAAED,uBAAuB,CAAE1E,MAAM,EAAEC,KAAK,EAAE+D,SAAS,EAAE5B,KAAK,EAAEuC,SAAS,CAAE,EAAG;YAE9E,OAAO1I,oBAAoB,CAAE+D,MAAM,EAAEC,KAAK,EAAE/C,QAAQ,EAAEkH,kBAAkB,EAAEJ,SAAS,EAAE5B,KAAK,EAAEoC,QAAQ,CAAE;UAEvG;UAEA,OAAO,IAAI;QAEZ,CAAC;MAEF,CAAC,MAAM,IAAK,CAAEH,eAAe,EAAG;QAE/B,IAAKD,kBAAkB,EAAG;UAEzBC,eAAe,GAAG,yBAAErE,MAAM,EAAEC,KAAK,EAAE+D,SAAS,EAAE5B,KAAK,EAAM;YAExD,OAAOnG,oBAAoB,CAAE+D,MAAM,EAAEC,KAAK,EAAE/C,QAAQ,EAAEkH,kBAAkB,EAAEJ,SAAS,EAAE5B,KAAK,EAAEoC,QAAQ,CAAE;UAEvG,CAAC;QAEF,CAAC,MAAM;UAENH,eAAe,GAAG,yBAAErE,MAAM,EAAEC,KAAK,EAAE+D,SAAS,EAAM;YAEjD,OAAOA,SAAS;UAEjB,CAAC;QAEF;MAED;MAEA,IAAIX,MAAM,GAAG,KAAK;MAClB,IAAInE,UAAU,GAAG,CAAC;MAAC,4CACC,IAAI,CAAChB,MAAM;QAAA;MAAA;QAA/B,uDAAkC;UAAA,IAAtBuF,IAAI;UAEf9H,SAAS,CAAE8H,IAAI,CAAE;UACjBJ,MAAM,GAAG5H,UAAS,CAAE,CAAC,EAAEyB,QAAQ,EAAEiH,gBAAgB,EAAEE,eAAe,EAAEH,mBAAmB,EAAEhF,UAAU,CAAE;UACrGtD,WAAW,EAAE;UAEb,IAAKyH,MAAM,EAAG;YAEb;UAED;UAEAnE,UAAU,IAAIuE,IAAI,CAAC9D,UAAU;QAE9B;MAAC;QAAA;MAAA;QAAA;MAAA;MAED3C,YAAY,CAAC4H,gBAAgB,CAAEJ,QAAQ,CAAE;MAEzC,OAAOnB,MAAM;IAEd;EAAC;IAAA;IAAA,OAED,iBAASwB,QAAQ,EAAEC,aAAa,EAAEpB,SAAS,EAAG;MAE7C;MACA;;MAEA,IACCqB,gBAAgB,GAEbrB,SAAS,CAFZqB,gBAAgB;QAChBC,mBAAmB,GAChBtB,SAAS,CADZsB,mBAAmB;MAGpB,IAAMC,SAAS,GAAG,IAAI,CAAC/H,QAAQ,CAACI,KAAK;MACrC,IAAM4H,YAAY,GAAG,IAAI,CAAChI,QAAQ,CAAC0B,UAAU,CAACC,QAAQ;MAEtD,IAAMsG,cAAc,GAAGN,QAAQ,CAAC3H,QAAQ,CAACI,KAAK;MAC9C,IAAM8H,iBAAiB,GAAGP,QAAQ,CAAC3H,QAAQ,CAAC0B,UAAU,CAACC,QAAQ;MAE/DtC,UAAU,CAAC8I,IAAI,CAAEP,aAAa,CAAE,CAACQ,MAAM,EAAE;MAEzC,IAAMd,QAAQ,GAAGxH,YAAY,CAACyH,YAAY,EAAE;MAC5C,IAAMc,SAAS,GAAGvI,YAAY,CAACyH,YAAY,EAAE;MAE7C,IAAKO,mBAAmB,EAAG;QAAA,IAEjBQ,0BAA0B,GAAnC,SAASA,0BAA0B,CAAEC,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAG;UAEvG,KAAM,IAAIC,EAAE,GAAGN,OAAO,EAAEO,EAAE,GAAGP,OAAO,GAAGC,MAAM,EAAEK,EAAE,GAAGC,EAAE,EAAED,EAAE,EAAG,EAAG;YAE/D/J,WAAW,CAAEqJ,SAAS,EAAEU,EAAE,GAAG,CAAC,EAAEd,cAAc,EAAEC,iBAAiB,CAAE;YACnEG,SAAS,CAACY,CAAC,CAACC,YAAY,CAAEtB,aAAa,CAAE;YACzCS,SAAS,CAACc,CAAC,CAACD,YAAY,CAAEtB,aAAa,CAAE;YACzCS,SAAS,CAACe,CAAC,CAACF,YAAY,CAAEtB,aAAa,CAAE;YACzCS,SAAS,CAACgB,WAAW,GAAG,IAAI;YAE5B,KAAM,IAAIC,EAAE,GAAGf,OAAO,EAAEgB,EAAE,GAAGhB,OAAO,GAAGC,MAAM,EAAEc,EAAE,GAAGC,EAAE,EAAED,EAAE,EAAG,EAAG;cAE/DtK,WAAW,CAAEsI,QAAQ,EAAEgC,EAAE,GAAG,CAAC,EAAEvB,SAAS,EAAEC,YAAY,CAAE;cACxDV,QAAQ,CAAC+B,WAAW,GAAG,IAAI;cAE3B,IAAKvB,mBAAmB,CAAER,QAAQ,EAAEe,SAAS,EAAEiB,EAAE,EAAEP,EAAE,EAAEJ,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAE,EAAG;gBAEzF,OAAO,IAAI;cAEZ;YAED;UAED;UAEA,OAAO,KAAK;QAEb,CAAC;QAED,IAAKjB,gBAAgB,EAAG;UAEvB,IAAM2B,wBAAwB,GAAG3B,gBAAgB;UACjDA,gBAAgB,GAAG,0BAAWU,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAG;YAEhG,IAAK,CAAEU,wBAAwB,CAAEjB,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAE,EAAG;cAErG,OAAOR,0BAA0B,CAAEC,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAE;YAEtG;YAEA,OAAO,IAAI;UAEZ,CAAC;QAEF,CAAC,MAAM;UAENjB,gBAAgB,GAAGS,0BAA0B;QAE9C;MAED;MAEAX,QAAQ,CAACzG,cAAc,CAAE9B,KAAK,CAAE;MAChCA,KAAK,CAAC8J,YAAY,CAAEtB,aAAa,CAAE;MACnC,IAAMzB,MAAM,GAAG,IAAI,CAAC5H,SAAS,CAAE;QAE9B0I,gBAAgB,EAAE,0BAAAwC,GAAG;UAAA,OAAIrK,KAAK,CAACsK,aAAa,CAAED,GAAG,CAAE;QAAA;QAEnDtC,eAAe,EAAE,yBAAEoB,OAAO,EAAEC,MAAM,EAAE1B,SAAS,EAAE6B,MAAM,EAAEgB,UAAU,EAAEF,GAAG,EAAM;UAE3EtK,IAAI,CAACgJ,IAAI,CAAEsB,GAAG,CAAE;UAChBtK,IAAI,CAAC+J,YAAY,CAAE7J,UAAU,CAAE;UAC/B,OAAOsI,QAAQ,CAACpJ,SAAS,CAAE;YAE1B0I,gBAAgB,EAAE,0BAAAwC,GAAG;cAAA,OAAItK,IAAI,CAACuK,aAAa,CAAED,GAAG,CAAE;YAAA;YAElDtC,eAAe,EAAE,yBAAEsB,OAAO,EAAEC,MAAM,EAAE5B,SAAS,EAAE+B,MAAM,EAAEe,UAAU,EAAM;cAEtE,OAAO/B,gBAAgB,CAAEU,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEgB,UAAU,EAAEd,MAAM,EAAEe,UAAU,CAAE;YAEpG;UAED,CAAC,CAAE;QAEJ;MAED,CAAC,CAAE;MAEH9J,YAAY,CAAC4H,gBAAgB,CAAEJ,QAAQ,CAAE;MACzCxH,YAAY,CAAC4H,gBAAgB,CAAEW,SAAS,CAAE;MAC1C,OAAOlC,MAAM;IAEd;;IAEA;EAAA;IAAA;IAAA,OACA,uBAAesD,GAAG,EAAEI,SAAS,EAAG;MAE/BvK,GAAG,CAACwK,GAAG,CAAEL,GAAG,CAACM,GAAG,EAAEN,GAAG,CAACO,GAAG,EAAEH,SAAS,CAAE;MACtCvK,GAAG,CAAC+J,WAAW,GAAG,IAAI;MAEtB,OAAO,IAAI,CAAC9K,SAAS,CACpB;QACC0I,gBAAgB,EAAE,0BAAAwC,GAAG;UAAA,OAAInK,GAAG,CAACoK,aAAa,CAAED,GAAG,CAAE;QAAA;QACjDvC,kBAAkB,EAAE,4BAAAL,GAAG;UAAA,OAAIvH,GAAG,CAAC4H,kBAAkB,CAAEL,GAAG,CAAE;QAAA;MACzD,CAAC,CACD;IAEF;EAAC;IAAA;IAAA,OAED,0BAAkBoD,MAAM,EAAG;MAE1B,OAAO,IAAI,CAAC1L,SAAS,CACpB;QACC0I,gBAAgB,EAAE,0BAAAwC,GAAG;UAAA,OAAIQ,MAAM,CAACP,aAAa,CAAED,GAAG,CAAE;QAAA;QACpDvC,kBAAkB,EAAE,4BAAAL,GAAG;UAAA,OAAIA,GAAG,CAACqD,gBAAgB,CAAED,MAAM,CAAE;QAAA;MAC1D,CAAC,CACD;IAEF;EAAC;IAAA;IAAA,OAED,gCAAwB5D,aAAa,EAAE8D,aAAa,EAA4E;MAAA,IAA1EC,OAAO,uEAAG,CAAE,CAAC;MAAA,IAAEC,OAAO,uEAAG,CAAE,CAAC;MAAA,IAAEC,YAAY,uEAAG,CAAC;MAAA,IAAEC,YAAY,uEAAGtH,QAAQ;MAE5H,IAAK,CAAEoD,aAAa,CAACpF,WAAW,EAAG;QAElCoF,aAAa,CAACmE,kBAAkB,EAAE;MAEnC;MAEAlL,GAAG,CAACwK,GAAG,CAAEzD,aAAa,CAACpF,WAAW,CAAC8I,GAAG,EAAE1D,aAAa,CAACpF,WAAW,CAAC+I,GAAG,EAAEG,aAAa,CAAE;MACtF7K,GAAG,CAAC+J,WAAW,GAAG,IAAI;MAEtB,IAAMrJ,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAMyK,GAAG,GAAGzK,QAAQ,CAAC0B,UAAU,CAACC,QAAQ;MACxC,IAAMvB,KAAK,GAAGJ,QAAQ,CAACI,KAAK;MAC5B,IAAMsK,QAAQ,GAAGrE,aAAa,CAAC3E,UAAU,CAACC,QAAQ;MAClD,IAAMgJ,UAAU,GAAGtE,aAAa,CAACjG,KAAK;MACtC,IAAMkH,QAAQ,GAAGxH,YAAY,CAACyH,YAAY,EAAE;MAC5C,IAAMc,SAAS,GAAGvI,YAAY,CAACyH,YAAY,EAAE;MAE7C,IAAIqD,WAAW,GAAGnL,KAAK;MACvB,IAAIoL,eAAe,GAAGnL,KAAK;MAC3B,IAAIoL,WAAW,GAAG,IAAI;MACtB,IAAIC,eAAe,GAAG,IAAI;MAE1B,IAAKV,OAAO,EAAG;QAEdS,WAAW,GAAGnL,KAAK;QACnBoL,eAAe,GAAGnL,KAAK;MAExB;MAEA,IAAIoL,eAAe,GAAG/H,QAAQ;MAC9B,IAAIgI,uBAAuB,GAAG,IAAI;MAClC,IAAIC,4BAA4B,GAAG,IAAI;MACvC7L,UAAU,CAAC8I,IAAI,CAAEgC,aAAa,CAAE,CAAC/B,MAAM,EAAE;MACzC7I,IAAI,CAAC4L,MAAM,CAAChD,IAAI,CAAE9I,UAAU,CAAE;MAC9B,IAAI,CAACd,SAAS,CACb;QAECyI,mBAAmB,EAAE,6BAAAyC,GAAG,EAAI;UAE3B,OAAOnK,GAAG,CAAC8L,aAAa,CAAE3B,GAAG,CAAE;QAEhC,CAAC;QAEDxC,gBAAgB,EAAE,0BAAEwC,GAAG,EAAE5G,MAAM,EAAEwI,KAAK,EAAM;UAE3C,IAAKA,KAAK,GAAGL,eAAe,IAAIK,KAAK,GAAGd,YAAY,EAAG;YAEtD;YACA;YACA,IAAK1H,MAAM,EAAG;cAEbtD,IAAI,CAACwK,GAAG,CAAC5B,IAAI,CAAEsB,GAAG,CAACM,GAAG,CAAE;cACxBxK,IAAI,CAACyK,GAAG,CAAC7B,IAAI,CAAEsB,GAAG,CAACO,GAAG,CAAE;cACxBzK,IAAI,CAAC8J,WAAW,GAAG,IAAI;YAExB;YAEA,OAAO,IAAI;UAEZ;UAEA,OAAO,KAAK;QAEb,CAAC;QAEDlC,eAAe,EAAE,yBAAErE,MAAM,EAAEC,KAAK,EAAM;UAErC,IAAKsD,aAAa,CAACiF,UAAU,EAAG;YAE/B;YACA;YACA,OAAOjF,aAAa,CAACiF,UAAU,CAAC/M,SAAS,CAAE;cAC1CyI,mBAAmB,EAAE,6BAAAyC,GAAG,EAAI;gBAE3B,OAAOlK,IAAI,CAAC6L,aAAa,CAAE3B,GAAG,CAAE;cAEjC,CAAC;cAEDxC,gBAAgB,EAAE,0BAAEwC,GAAG,EAAE5G,MAAM,EAAEwI,KAAK,EAAM;gBAE3C,OAAOA,KAAK,GAAGL,eAAe,IAAIK,KAAK,GAAGd,YAAY;cAEvD,CAAC;cAEDpD,eAAe,EAAE,yBAAEoE,WAAW,EAAEC,UAAU,EAAM;gBAE/C,KAAM,IAAIzC,EAAE,GAAGwC,WAAW,GAAG,CAAC,EAAEvC,EAAE,GAAG,CAAEuC,WAAW,GAAGC,UAAU,IAAK,CAAC,EAAEzC,EAAE,GAAGC,EAAE,EAAED,EAAE,IAAI,CAAC,EAAG;kBAEzF/J,WAAW,CAAEqJ,SAAS,EAAEU,EAAE,EAAE4B,UAAU,EAAED,QAAQ,CAAE;kBAClDrC,SAAS,CAACY,CAAC,CAACC,YAAY,CAAEiB,aAAa,CAAE;kBACzC9B,SAAS,CAACc,CAAC,CAACD,YAAY,CAAEiB,aAAa,CAAE;kBACzC9B,SAAS,CAACe,CAAC,CAACF,YAAY,CAAEiB,aAAa,CAAE;kBACzC9B,SAAS,CAACgB,WAAW,GAAG,IAAI;kBAE5B,KAAM,IAAInH,CAAC,GAAGY,MAAM,GAAG,CAAC,EAAEX,CAAC,GAAG,CAAEW,MAAM,GAAGC,KAAK,IAAK,CAAC,EAAEb,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAG;oBAErElD,WAAW,CAAEsI,QAAQ,EAAEpF,CAAC,EAAE9B,KAAK,EAAEqK,GAAG,CAAE;oBACtCnD,QAAQ,CAAC+B,WAAW,GAAG,IAAI;oBAE3B,IAAMoC,IAAI,GAAGnE,QAAQ,CAACoE,kBAAkB,CAAErD,SAAS,EAAEuC,WAAW,EAAEE,WAAW,CAAE;oBAC/E,IAAKW,IAAI,GAAGT,eAAe,EAAG;sBAE7BH,eAAe,CAAC1C,IAAI,CAAEyC,WAAW,CAAE;sBAEnC,IAAKG,eAAe,EAAG;wBAEtBA,eAAe,CAAC5C,IAAI,CAAE2C,WAAW,CAAE;sBAEpC;sBAEAE,eAAe,GAAGS,IAAI;sBACtBR,uBAAuB,GAAG/I,CAAC,GAAG,CAAC;sBAC/BgJ,4BAA4B,GAAGnC,EAAE,GAAG,CAAC;oBAEtC;;oBAEA;oBACA,IAAK0C,IAAI,GAAGnB,YAAY,EAAG;sBAE1B,OAAO,IAAI;oBAEZ;kBAED;gBAED;cAED;YACD,CAAC,CAAE;UAEJ,CAAC,MAAM;YAEN;YACA,IAAMqB,QAAQ,GAAGhB,UAAU,GAAGA,UAAU,CAAC5H,KAAK,GAAG2H,QAAQ,CAAC3H,KAAK;YAC/D,KAAM,IAAIgG,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG2C,QAAQ,EAAE5C,EAAE,GAAGC,EAAE,EAAED,EAAE,IAAI,CAAC,EAAG;cAEnD/J,WAAW,CAAEqJ,SAAS,EAAEU,EAAE,EAAE4B,UAAU,EAAED,QAAQ,CAAE;cAClDrC,SAAS,CAACY,CAAC,CAACC,YAAY,CAAEiB,aAAa,CAAE;cACzC9B,SAAS,CAACc,CAAC,CAACD,YAAY,CAAEiB,aAAa,CAAE;cACzC9B,SAAS,CAACe,CAAC,CAACF,YAAY,CAAEiB,aAAa,CAAE;cACzC9B,SAAS,CAACgB,WAAW,GAAG,IAAI;cAE5B,KAAM,IAAInH,CAAC,GAAGY,MAAM,GAAG,CAAC,EAAEX,CAAC,GAAG,CAAEW,MAAM,GAAGC,KAAK,IAAK,CAAC,EAAEb,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAG;gBAErElD,WAAW,CAAEsI,QAAQ,EAAEpF,CAAC,EAAE9B,KAAK,EAAEqK,GAAG,CAAE;gBACtCnD,QAAQ,CAAC+B,WAAW,GAAG,IAAI;gBAE3B,IAAMoC,IAAI,GAAGnE,QAAQ,CAACoE,kBAAkB,CAAErD,SAAS,EAAEuC,WAAW,EAAEE,WAAW,CAAE;gBAC/E,IAAKW,IAAI,GAAGT,eAAe,EAAG;kBAE7BH,eAAe,CAAC1C,IAAI,CAAEyC,WAAW,CAAE;kBAEnC,IAAKG,eAAe,EAAG;oBAEtBA,eAAe,CAAC5C,IAAI,CAAE2C,WAAW,CAAE;kBAEpC;kBAEAE,eAAe,GAAGS,IAAI;kBACtBR,uBAAuB,GAAG/I,CAAC,GAAG,CAAC;kBAC/BgJ,4BAA4B,GAAGnC,EAAE,GAAG,CAAC;gBAEtC;;gBAEA;gBACA,IAAK0C,IAAI,GAAGnB,YAAY,EAAG;kBAE1B,OAAO,IAAI;gBAEZ;cAED;YAED;UAED;QAED;MAED,CAAC,CAED;MAEDxK,YAAY,CAAC4H,gBAAgB,CAAEJ,QAAQ,CAAE;MACzCxH,YAAY,CAAC4H,gBAAgB,CAAEW,SAAS,CAAE;MAE1C,IAAK2C,eAAe,KAAK/H,QAAQ,EAAG,OAAO,IAAI;MAE/C,IAAK,CAAEmH,OAAO,CAACwB,KAAK,EAAGxB,OAAO,CAACwB,KAAK,GAAGf,eAAe,CAACgB,KAAK,EAAE,CAAC,KAC1DzB,OAAO,CAACwB,KAAK,CAACzD,IAAI,CAAE0C,eAAe,CAAE;MAC1CT,OAAO,CAAChE,QAAQ,GAAG4E,eAAe,EAClCZ,OAAO,CAAC0B,SAAS,GAAGb,uBAAuB;MAE3C,IAAKZ,OAAO,EAAG;QAEd,IAAK,CAAEA,OAAO,CAACuB,KAAK,EAAGvB,OAAO,CAACuB,KAAK,GAAGb,eAAe,CAACc,KAAK,EAAE,CAAC,KAC1DxB,OAAO,CAACuB,KAAK,CAACzD,IAAI,CAAE4C,eAAe,CAAE;QAC1CV,OAAO,CAACuB,KAAK,CAAC1C,YAAY,CAAE7J,UAAU,CAAE;QACxCwL,eAAe,CAAC3B,YAAY,CAAE7J,UAAU,CAAE;QAC1CgL,OAAO,CAACjE,QAAQ,GAAGyE,eAAe,CAACkB,GAAG,CAAE1B,OAAO,CAACuB,KAAK,CAAE,CAACxJ,MAAM,EAAE;QAChEiI,OAAO,CAACyB,SAAS,GAAGZ,4BAA4B;MAEjD;MAEA,OAAOd,OAAO;IAEf;EAAC;IAAA;IAAA,OAED,6BAAqBwB,KAAK,EAA4D;MAAA,IAA1DI,MAAM,uEAAG,CAAE,CAAC;MAAA,IAAE1B,YAAY,uEAAG,CAAC;MAAA,IAAEC,YAAY,uEAAGtH,QAAQ;MAElF;MACA;MACA;MACA;MACA,IAAMgJ,cAAc,GAAG3B,YAAY,GAAGA,YAAY;MAClD,IAAM4B,cAAc,GAAG3B,YAAY,GAAGA,YAAY;MAClD,IAAI4B,iBAAiB,GAAGlJ,QAAQ;MAChC,IAAIgI,uBAAuB,GAAG,IAAI;MAClC,IAAI,CAAC1M,SAAS,CAEb;QAECyI,mBAAmB,EAAE,6BAAAyC,GAAG,EAAI;UAE3BjK,IAAI,CAAC2I,IAAI,CAAEyD,KAAK,CAAE,CAACQ,KAAK,CAAE3C,GAAG,CAACM,GAAG,EAAEN,GAAG,CAACO,GAAG,CAAE;UAC5C,OAAOxK,IAAI,CAAC6M,iBAAiB,CAAET,KAAK,CAAE;QAEvC,CAAC;QAED3E,gBAAgB,EAAE,0BAAEwC,GAAG,EAAE5G,MAAM,EAAEwI,KAAK,EAAM;UAE3C,OAAOA,KAAK,GAAGc,iBAAiB,IAAId,KAAK,GAAGa,cAAc;QAE3D,CAAC;QAEDhF,kBAAkB,EAAE,4BAAEL,GAAG,EAAEyF,QAAQ,EAAM;UAExCzF,GAAG,CAAC0F,mBAAmB,CAAEX,KAAK,EAAEpM,IAAI,CAAE;UACtC,IAAMgN,MAAM,GAAGZ,KAAK,CAACS,iBAAiB,CAAE7M,IAAI,CAAE;UAC9C,IAAKgN,MAAM,GAAGL,iBAAiB,EAAG;YAEjC1M,KAAK,CAAC0I,IAAI,CAAE3I,IAAI,CAAE;YAClB2M,iBAAiB,GAAGK,MAAM;YAC1BvB,uBAAuB,GAAGqB,QAAQ;UAEnC;UAEA,IAAKE,MAAM,GAAGP,cAAc,EAAG;YAE9B,OAAO,IAAI;UAEZ,CAAC,MAAM;YAEN,OAAO,KAAK;UAEb;QAED;MAED,CAAC,CAED;MAED,IAAKE,iBAAiB,KAAKlJ,QAAQ,EAAG,OAAO,IAAI;MAEjD,IAAM+H,eAAe,GAAGyB,IAAI,CAACC,IAAI,CAAEP,iBAAiB,CAAE;MAEtD,IAAK,CAAEH,MAAM,CAACJ,KAAK,EAAGI,MAAM,CAACJ,KAAK,GAAGnM,KAAK,CAACoM,KAAK,EAAE,CAAC,KAC9CG,MAAM,CAACJ,KAAK,CAACzD,IAAI,CAAE1I,KAAK,CAAE;MAC/BuM,MAAM,CAAC5F,QAAQ,GAAG4E,eAAe,EACjCgB,MAAM,CAACF,SAAS,GAAGb,uBAAuB;MAE1C,OAAOe,MAAM;IAEd;EAAC;IAAA;IAAA,OAED,wBAAgBA,MAAM,EAAG;MAExBA,MAAM,CAACW,SAAS,EAAE;MAElB,IAAM1K,KAAK,GAAG,IAAI,CAACjB,MAAM;MACzBiB,KAAK,CAAC2K,OAAO,CAAE,UAAAhL,MAAM,EAAI;QAExB9C,UAAU,CAAE,CAAC,EAAE,IAAIyD,YAAY,CAAEX,MAAM,CAAE,EAAE/B,OAAO,CAAE;QACpDmM,MAAM,CAACa,KAAK,CAAEhN,OAAO,CAAE;MAExB,CAAC,CAAE;MAEH,OAAOmM,MAAM;IAEd;EAAC;IAAA;IAAA,OAx8BD,mBAAkBc,GAAG,EAAiB;MAAA,IAAf7M,OAAO,uEAAG,CAAC,CAAC;MAElC,IAAKA,OAAO,CAACC,gBAAgB,EAAG;QAE/BkH,OAAO,CAACC,IAAI,CAAE,sGAAsG,CAAE;QAEtH,OAAOtH,OAAO,CAACgN,SAAS,CACvBC,SAAS,CAAE,CAAC,CAAE,EACd;UACCC,YAAY,EAAED,SAAS,CAAE,CAAC,CAAE,KAAKE,SAAS,GAAG,IAAI,GAAGF,SAAS,CAAE,CAAC;QACjE,CAAC,CACD;MAEF;MAEA/M,OAAO;QACNgN,YAAY,EAAE;MAAI,GACfhN,OAAO,CACV;MAED,IAAMD,QAAQ,GAAG8M,GAAG,CAAC9M,QAAQ;MAC7B,IAAMmN,QAAQ,GAAGL,GAAG,CAAC9L,MAAM;MAC3B,IAAMoM,cAAc,GAAGpN,QAAQ,CAACqN,QAAQ,EAAE;MAC1C,IAAIlH,MAAM;MACV,IAAKlG,OAAO,CAACgN,YAAY,EAAG;QAE3B9G,MAAM,GAAG;UACRlE,KAAK,EAAEkL,QAAQ,CAACG,GAAG,CAAE,UAAA/G,IAAI;YAAA,OAAIA,IAAI,CAACgH,KAAK,EAAE;UAAA,EAAE;UAC3CnN,KAAK,EAAEgN,cAAc,CAAC5L,KAAK,CAAC+L,KAAK;QAClC,CAAC;MAEF,CAAC,MAAM;QAENpH,MAAM,GAAG;UACRlE,KAAK,EAAEkL,QAAQ;UACf/M,KAAK,EAAEgN,cAAc,CAAC5L;QACvB,CAAC;MAEF;MAEA,OAAO2E,MAAM;IAEd;EAAC;IAAA;IAAA,OAED,qBAAoBqH,IAAI,EAAExN,QAAQ,EAAiB;MAAA,IAAfC,OAAO,uEAAG,CAAC,CAAC;MAE/C,IAAK,OAAOA,OAAO,KAAK,SAAS,EAAG;QAEnCmH,OAAO,CAACC,IAAI,CAAE,wGAAwG,CAAE;QAExH,OAAOtH,OAAO,CAAC0N,WAAW,CACzBT,SAAS,CAAE,CAAC,CAAE,EACdA,SAAS,CAAE,CAAC,CAAE,EACd;UACCU,QAAQ,EAAEV,SAAS,CAAE,CAAC,CAAE,KAAKE,SAAS,GAAG,IAAI,GAAGF,SAAS,CAAE,CAAC;QAC7D,CAAC,CACD;MAEF;MAEA/M,OAAO;QACNyN,QAAQ,EAAE;MAAI,GACXzN,OAAO,CACV;MAED,IAAQG,KAAK,GAAYoN,IAAI,CAArBpN,KAAK;QAAE6B,KAAK,GAAKuL,IAAI,CAAdvL,KAAK;MACpB,IAAM6K,GAAG,GAAG,IAAI/M,OAAO,CAAEC,QAAQ,kCAAOC,OAAO,2BAAIhB,eAAe,EAAI,IAAI,GAAI;MAC9E6N,GAAG,CAAC9L,MAAM,GAAGiB,KAAK;MAElB,IAAKhC,OAAO,CAACyN,QAAQ,EAAG;QAEvB,IAAMN,cAAc,GAAGpN,QAAQ,CAACqN,QAAQ,EAAE;QAC1C,IAAKD,cAAc,KAAK,IAAI,EAAG;UAE9B,IAAMO,QAAQ,GAAG,IAAI9P,eAAe,CAAE2P,IAAI,CAACpN,KAAK,EAAE,CAAC,EAAE,KAAK,CAAE;UAC5DJ,QAAQ,CAAC0N,QAAQ,CAAEC,QAAQ,CAAE;QAE9B,CAAC,MAAM,IAAKP,cAAc,CAAC5L,KAAK,KAAKpB,KAAK,EAAG;UAE5CgN,cAAc,CAAC5L,KAAK,CAACsI,GAAG,CAAE1J,KAAK,CAAE;UACjCgN,cAAc,CAAC/D,WAAW,GAAG,IAAI;QAElC;MAED;MAEA,OAAOyD,GAAG;IAEX;EAAC;EAAA;AAAA"},"metadata":{},"sourceType":"module"}