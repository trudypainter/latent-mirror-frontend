{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from 'three';\nimport { CSMFrustum } from './CSMFrustum.js';\nimport { CSMShader } from './CSMShader.js';\nvar _cameraToLightMatrix = new Matrix4();\nvar _lightSpaceFrustum = new CSMFrustum();\nvar _center = new Vector3();\nvar _bbox = new Box3();\nvar _uniformArray = [];\nvar _logArray = [];\nvar CSM = /*#__PURE__*/function () {\n  function CSM(data) {\n    _classCallCheck(this, CSM);\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 100000;\n    this.mode = data.mode || 'practical';\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 0.000001;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2000;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new CSMFrustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n  _createClass(CSM, [{\n    key: \"createLights\",\n    value: function createLights() {\n      for (var i = 0; i < this.cascades; i++) {\n        var light = new DirectionalLight(0xffffff, this.lightIntensity);\n        light.castShadow = true;\n        light.shadow.mapSize.width = this.shadowMapSize;\n        light.shadow.mapSize.height = this.shadowMapSize;\n        light.shadow.camera.near = this.lightNear;\n        light.shadow.camera.far = this.lightFar;\n        light.shadow.bias = this.shadowBias;\n        this.parent.add(light);\n        this.parent.add(light.target);\n        this.lights.push(light);\n      }\n    }\n  }, {\n    key: \"initCascades\",\n    value: function initCascades() {\n      var camera = this.camera;\n      camera.updateProjectionMatrix();\n      this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n      this.mainFrustum.split(this.breaks, this.frustums);\n    }\n  }, {\n    key: \"updateShadowBounds\",\n    value: function updateShadowBounds() {\n      var frustums = this.frustums;\n      for (var i = 0; i < frustums.length; i++) {\n        var light = this.lights[i];\n        var shadowCam = light.shadow.camera;\n        var frustum = this.frustums[i]; // Get the two points that represent that furthest points on the frustum assuming\n        // that's either the diagonal across the far plane or the diagonal across the whole\n        // frustum itself.\n\n        var nearVerts = frustum.vertices.near;\n        var farVerts = frustum.vertices.far;\n        var point1 = farVerts[0];\n        var point2 = void 0;\n        if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n          point2 = farVerts[2];\n        } else {\n          point2 = nearVerts[2];\n        }\n        var squaredBBWidth = point1.distanceTo(point2);\n        if (this.fade) {\n          // expand the shadow extents by the fade margin if fade is enabled.\n          var camera = this.camera;\n          var far = Math.max(camera.far, this.maxFar);\n          var linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n          var margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near);\n          squaredBBWidth += margin;\n        }\n        shadowCam.left = -squaredBBWidth / 2;\n        shadowCam.right = squaredBBWidth / 2;\n        shadowCam.top = squaredBBWidth / 2;\n        shadowCam.bottom = -squaredBBWidth / 2;\n        shadowCam.updateProjectionMatrix();\n      }\n    }\n  }, {\n    key: \"getBreaks\",\n    value: function getBreaks() {\n      var camera = this.camera;\n      var far = Math.min(camera.far, this.maxFar);\n      this.breaks.length = 0;\n      switch (this.mode) {\n        case 'uniform':\n          uniformSplit(this.cascades, camera.near, far, this.breaks);\n          break;\n        case 'logarithmic':\n          logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n          break;\n        case 'practical':\n          practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n          break;\n        case 'custom':\n          if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.');\n          this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n          break;\n      }\n      function uniformSplit(amount, near, far, target) {\n        for (var i = 1; i < amount; i++) {\n          target.push((near + (far - near) * i / amount) / far);\n        }\n        target.push(1);\n      }\n      function logarithmicSplit(amount, near, far, target) {\n        for (var i = 1; i < amount; i++) {\n          target.push(near * Math.pow(far / near, i / amount) / far);\n        }\n        target.push(1);\n      }\n      function practicalSplit(amount, near, far, lambda, target) {\n        _uniformArray.length = 0;\n        _logArray.length = 0;\n        logarithmicSplit(amount, near, far, _logArray);\n        uniformSplit(amount, near, far, _uniformArray);\n        for (var i = 1; i < amount; i++) {\n          target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n        }\n        target.push(1);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var camera = this.camera;\n      var frustums = this.frustums;\n      for (var i = 0; i < frustums.length; i++) {\n        var light = this.lights[i];\n        var shadowCam = light.shadow.camera;\n        var texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n        var texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n        light.shadow.camera.updateMatrixWorld(true);\n        _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n        frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n        var nearVerts = _lightSpaceFrustum.vertices.near;\n        var farVerts = _lightSpaceFrustum.vertices.far;\n        _bbox.makeEmpty();\n        for (var j = 0; j < 4; j++) {\n          _bbox.expandByPoint(nearVerts[j]);\n          _bbox.expandByPoint(farVerts[j]);\n        }\n        _bbox.getCenter(_center);\n        _center.z = _bbox.max.z + this.lightMargin;\n        _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n        _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n        _center.applyMatrix4(light.shadow.camera.matrixWorld);\n        light.position.copy(_center);\n        light.target.position.copy(_center);\n        light.target.position.x += this.lightDirection.x;\n        light.target.position.y += this.lightDirection.y;\n        light.target.position.z += this.lightDirection.z;\n      }\n    }\n  }, {\n    key: \"injectInclude\",\n    value: function injectInclude() {\n      ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;\n      ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;\n    }\n  }, {\n    key: \"setupMaterial\",\n    value: function setupMaterial(material) {\n      material.defines = material.defines || {};\n      material.defines.USE_CSM = 1;\n      material.defines.CSM_CASCADES = this.cascades;\n      if (this.fade) {\n        material.defines.CSM_FADE = '';\n      }\n      var breaksVec2 = [];\n      var scope = this;\n      var shaders = this.shaders;\n      material.onBeforeCompile = function (shader) {\n        var far = Math.min(scope.camera.far, scope.maxFar);\n        scope.getExtendedBreaks(breaksVec2);\n        shader.uniforms.CSM_cascades = {\n          value: breaksVec2\n        };\n        shader.uniforms.cameraNear = {\n          value: scope.camera.near\n        };\n        shader.uniforms.shadowFar = {\n          value: far\n        };\n        shaders.set(material, shader);\n      };\n      shaders.set(material, null);\n    }\n  }, {\n    key: \"updateUniforms\",\n    value: function updateUniforms() {\n      var far = Math.min(this.camera.far, this.maxFar);\n      var shaders = this.shaders;\n      shaders.forEach(function (shader, material) {\n        if (shader !== null) {\n          var uniforms = shader.uniforms;\n          this.getExtendedBreaks(uniforms.CSM_cascades.value);\n          uniforms.cameraNear.value = this.camera.near;\n          uniforms.shadowFar.value = far;\n        }\n        if (!this.fade && 'CSM_FADE' in material.defines) {\n          delete material.defines.CSM_FADE;\n          material.needsUpdate = true;\n        } else if (this.fade && !('CSM_FADE' in material.defines)) {\n          material.defines.CSM_FADE = '';\n          material.needsUpdate = true;\n        }\n      }, this);\n    }\n  }, {\n    key: \"getExtendedBreaks\",\n    value: function getExtendedBreaks(target) {\n      while (target.length < this.breaks.length) {\n        target.push(new Vector2());\n      }\n      target.length = this.breaks.length;\n      for (var i = 0; i < this.cascades; i++) {\n        var amount = this.breaks[i];\n        var prev = this.breaks[i - 1] || 0;\n        target[i].x = prev;\n        target[i].y = amount;\n      }\n    }\n  }, {\n    key: \"updateFrustums\",\n    value: function updateFrustums() {\n      this.getBreaks();\n      this.initCascades();\n      this.updateShadowBounds();\n      this.updateUniforms();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var i = 0; i < this.lights.length; i++) {\n        this.parent.remove(this.lights[i]);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var shaders = this.shaders;\n      shaders.forEach(function (shader, material) {\n        delete material.onBeforeCompile;\n        delete material.defines.USE_CSM;\n        delete material.defines.CSM_CASCADES;\n        delete material.defines.CSM_FADE;\n        if (shader !== null) {\n          delete shader.uniforms.CSM_cascades;\n          delete shader.uniforms.cameraNear;\n          delete shader.uniforms.shadowFar;\n        }\n        material.needsUpdate = true;\n      });\n      shaders.clear();\n    }\n  }]);\n  return CSM;\n}();\nexport { CSM };","map":{"version":3,"names":["Matrix4","Vector3","Box3","DirectionalLight","MathUtils","ShaderChunk","Vector2","CSMFrustum","CSMShader","_cameraToLightMatrix","_lightSpaceFrustum","_center","_bbox","_uniformArray","_logArray","CSM","data","camera","parent","cascades","maxFar","mode","shadowMapSize","shadowBias","lightDirection","normalize","lightIntensity","lightNear","lightFar","lightMargin","customSplitsCallback","fade","mainFrustum","frustums","breaks","lights","shaders","Map","createLights","updateFrustums","injectInclude","i","light","castShadow","shadow","mapSize","width","height","near","far","bias","add","target","push","updateProjectionMatrix","setFromProjectionMatrix","projectionMatrix","split","length","shadowCam","frustum","nearVerts","vertices","farVerts","point1","point2","distanceTo","squaredBBWidth","Math","max","linearDepth","z","margin","pow","left","right","top","bottom","min","uniformSplit","logarithmicSplit","practicalSplit","undefined","console","error","amount","lambda","lerp","texelWidth","texelHeight","updateMatrixWorld","multiplyMatrices","matrixWorldInverse","matrixWorld","toSpace","makeEmpty","j","expandByPoint","getCenter","x","floor","y","applyMatrix4","position","copy","lights_fragment_begin","lights_pars_begin","material","defines","USE_CSM","CSM_CASCADES","CSM_FADE","breaksVec2","scope","onBeforeCompile","shader","getExtendedBreaks","uniforms","CSM_cascades","value","cameraNear","shadowFar","set","forEach","needsUpdate","prev","getBreaks","initCascades","updateShadowBounds","updateUniforms","remove","clear"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/csm/CSM.js"],"sourcesContent":["import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from 'three';\nimport { CSMFrustum } from './CSMFrustum.js';\nimport { CSMShader } from './CSMShader.js';\n\nconst _cameraToLightMatrix = new Matrix4();\n\nconst _lightSpaceFrustum = new CSMFrustum();\n\nconst _center = new Vector3();\n\nconst _bbox = new Box3();\n\nconst _uniformArray = [];\nconst _logArray = [];\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 100000;\n    this.mode = data.mode || 'practical';\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 0.000001;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2000;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new CSMFrustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(0xffffff, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n\n  updateShadowBounds() {\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i]; // Get the two points that represent that furthest points on the frustum assuming\n      // that's either the diagonal across the far plane or the diagonal across the whole\n      // frustum itself.\n\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n\n      let squaredBBWidth = point1.distanceTo(point2);\n\n      if (this.fade) {\n        // expand the shadow extents by the fade margin if fade is enabled.\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n\n    switch (this.mode) {\n      case 'uniform':\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'logarithmic':\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'practical':\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n\n      case 'custom':\n        if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.');\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n\n    function uniformSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far - near) * i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function logarithmicSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far / near) ** (i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function practicalSplit(amount, near, far, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far, _logArray);\n      uniformSplit(amount, near, far, _uniformArray);\n\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n\n      target.push(1);\n    }\n  }\n\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n\n      _bbox.makeEmpty();\n\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n\n        _bbox.expandByPoint(farVerts[j]);\n      }\n\n      _bbox.getCenter(_center);\n\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;\n  }\n\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n\n    if (this.fade) {\n      material.defines.CSM_FADE = '';\n    }\n\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n\n    material.onBeforeCompile = function (shader) {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = {\n        value: breaksVec2\n      };\n      shader.uniforms.cameraNear = {\n        value: scope.camera.near\n      };\n      shader.uniforms.shadowFar = {\n        value: far\n      };\n      shaders.set(material, shader);\n    };\n\n    shaders.set(material, null);\n  }\n\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n\n      if (!this.fade && 'CSM_FADE' in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !('CSM_FADE' in material.defines)) {\n        material.defines.CSM_FADE = '';\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n\n    target.length = this.breaks.length;\n\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n\n}\n\nexport { CSM };\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AACjG,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,IAAMC,oBAAoB,GAAG,IAAIT,OAAO,EAAE;AAE1C,IAAMU,kBAAkB,GAAG,IAAIH,UAAU,EAAE;AAE3C,IAAMI,OAAO,GAAG,IAAIV,OAAO,EAAE;AAE7B,IAAMW,KAAK,GAAG,IAAIV,IAAI,EAAE;AAExB,IAAMW,aAAa,GAAG,EAAE;AACxB,IAAMC,SAAS,GAAG,EAAE;AAAC,IACfC,GAAG;EACP,aAAYC,IAAI,EAAE;IAAA;IAChBA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAI,CAACC,MAAM,GAAGD,IAAI,CAACC,MAAM;IACzB,IAAI,CAACC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACzB,IAAI,CAACC,QAAQ,GAAGH,IAAI,CAACG,QAAQ,IAAI,CAAC;IAClC,IAAI,CAACC,MAAM,GAAGJ,IAAI,CAACI,MAAM,IAAI,MAAM;IACnC,IAAI,CAACC,IAAI,GAAGL,IAAI,CAACK,IAAI,IAAI,WAAW;IACpC,IAAI,CAACC,aAAa,GAAGN,IAAI,CAACM,aAAa,IAAI,IAAI;IAC/C,IAAI,CAACC,UAAU,GAAGP,IAAI,CAACO,UAAU,IAAI,QAAQ;IAC7C,IAAI,CAACC,cAAc,GAAGR,IAAI,CAACQ,cAAc,IAAI,IAAIvB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAACwB,SAAS,EAAE;IAC9E,IAAI,CAACC,cAAc,GAAGV,IAAI,CAACU,cAAc,IAAI,CAAC;IAC9C,IAAI,CAACC,SAAS,GAAGX,IAAI,CAACW,SAAS,IAAI,CAAC;IACpC,IAAI,CAACC,QAAQ,GAAGZ,IAAI,CAACY,QAAQ,IAAI,IAAI;IACrC,IAAI,CAACC,WAAW,GAAGb,IAAI,CAACa,WAAW,IAAI,GAAG;IAC1C,IAAI,CAACC,oBAAoB,GAAGd,IAAI,CAACc,oBAAoB;IACrD,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB,IAAI,CAACC,WAAW,GAAG,IAAIzB,UAAU,EAAE;IACnC,IAAI,CAAC0B,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAE;IACxB,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACC,aAAa,EAAE;EACtB;EAAC;IAAA;IAAA,OAED,wBAAe;MACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACtB,QAAQ,EAAEsB,CAAC,EAAE,EAAE;QACtC,IAAMC,KAAK,GAAG,IAAIvC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACuB,cAAc,CAAC;QACjEgB,KAAK,CAACC,UAAU,GAAG,IAAI;QACvBD,KAAK,CAACE,MAAM,CAACC,OAAO,CAACC,KAAK,GAAG,IAAI,CAACxB,aAAa;QAC/CoB,KAAK,CAACE,MAAM,CAACC,OAAO,CAACE,MAAM,GAAG,IAAI,CAACzB,aAAa;QAChDoB,KAAK,CAACE,MAAM,CAAC3B,MAAM,CAAC+B,IAAI,GAAG,IAAI,CAACrB,SAAS;QACzCe,KAAK,CAACE,MAAM,CAAC3B,MAAM,CAACgC,GAAG,GAAG,IAAI,CAACrB,QAAQ;QACvCc,KAAK,CAACE,MAAM,CAACM,IAAI,GAAG,IAAI,CAAC3B,UAAU;QACnC,IAAI,CAACL,MAAM,CAACiC,GAAG,CAACT,KAAK,CAAC;QACtB,IAAI,CAACxB,MAAM,CAACiC,GAAG,CAACT,KAAK,CAACU,MAAM,CAAC;QAC7B,IAAI,CAACjB,MAAM,CAACkB,IAAI,CAACX,KAAK,CAAC;MACzB;IACF;EAAC;IAAA;IAAA,OAED,wBAAe;MACb,IAAMzB,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1BA,MAAM,CAACqC,sBAAsB,EAAE;MAC/B,IAAI,CAACtB,WAAW,CAACuB,uBAAuB,CAACtC,MAAM,CAACuC,gBAAgB,EAAE,IAAI,CAACpC,MAAM,CAAC;MAC9E,IAAI,CAACY,WAAW,CAACyB,KAAK,CAAC,IAAI,CAACvB,MAAM,EAAE,IAAI,CAACD,QAAQ,CAAC;IACpD;EAAC;IAAA;IAAA,OAED,8BAAqB;MACnB,IAAMA,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAE9B,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,CAACyB,MAAM,EAAEjB,CAAC,EAAE,EAAE;QACxC,IAAMC,KAAK,GAAG,IAAI,CAACP,MAAM,CAACM,CAAC,CAAC;QAC5B,IAAMkB,SAAS,GAAGjB,KAAK,CAACE,MAAM,CAAC3B,MAAM;QACrC,IAAM2C,OAAO,GAAG,IAAI,CAAC3B,QAAQ,CAACQ,CAAC,CAAC,CAAC,CAAC;QAClC;QACA;;QAEA,IAAMoB,SAAS,GAAGD,OAAO,CAACE,QAAQ,CAACd,IAAI;QACvC,IAAMe,QAAQ,GAAGH,OAAO,CAACE,QAAQ,CAACb,GAAG;QACrC,IAAMe,MAAM,GAAGD,QAAQ,CAAC,CAAC,CAAC;QAC1B,IAAIE,MAAM;QAEV,IAAID,MAAM,CAACE,UAAU,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAGC,MAAM,CAACE,UAAU,CAACL,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;UACpEI,MAAM,GAAGF,QAAQ,CAAC,CAAC,CAAC;QACtB,CAAC,MAAM;UACLE,MAAM,GAAGJ,SAAS,CAAC,CAAC,CAAC;QACvB;QAEA,IAAIM,cAAc,GAAGH,MAAM,CAACE,UAAU,CAACD,MAAM,CAAC;QAE9C,IAAI,IAAI,CAAClC,IAAI,EAAE;UACb;UACA,IAAMd,MAAM,GAAG,IAAI,CAACA,MAAM;UAC1B,IAAMgC,GAAG,GAAGmB,IAAI,CAACC,GAAG,CAACpD,MAAM,CAACgC,GAAG,EAAE,IAAI,CAAC7B,MAAM,CAAC;UAC7C,IAAMkD,WAAW,GAAGV,OAAO,CAACE,QAAQ,CAACb,GAAG,CAAC,CAAC,CAAC,CAACsB,CAAC,IAAItB,GAAG,GAAGhC,MAAM,CAAC+B,IAAI,CAAC;UACnE,IAAMwB,MAAM,GAAG,IAAI,GAAGJ,IAAI,CAACK,GAAG,CAACH,WAAW,EAAE,GAAG,CAAC,IAAIrB,GAAG,GAAGhC,MAAM,CAAC+B,IAAI,CAAC;UACtEmB,cAAc,IAAIK,MAAM;QAC1B;QAEAb,SAAS,CAACe,IAAI,GAAG,CAACP,cAAc,GAAG,CAAC;QACpCR,SAAS,CAACgB,KAAK,GAAGR,cAAc,GAAG,CAAC;QACpCR,SAAS,CAACiB,GAAG,GAAGT,cAAc,GAAG,CAAC;QAClCR,SAAS,CAACkB,MAAM,GAAG,CAACV,cAAc,GAAG,CAAC;QACtCR,SAAS,CAACL,sBAAsB,EAAE;MACpC;IACF;EAAC;IAAA;IAAA,OAED,qBAAY;MACV,IAAMrC,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,IAAMgC,GAAG,GAAGmB,IAAI,CAACU,GAAG,CAAC7D,MAAM,CAACgC,GAAG,EAAE,IAAI,CAAC7B,MAAM,CAAC;MAC7C,IAAI,CAACc,MAAM,CAACwB,MAAM,GAAG,CAAC;MAEtB,QAAQ,IAAI,CAACrC,IAAI;QACf,KAAK,SAAS;UACZ0D,YAAY,CAAC,IAAI,CAAC5D,QAAQ,EAAEF,MAAM,CAAC+B,IAAI,EAAEC,GAAG,EAAE,IAAI,CAACf,MAAM,CAAC;UAC1D;QAEF,KAAK,aAAa;UAChB8C,gBAAgB,CAAC,IAAI,CAAC7D,QAAQ,EAAEF,MAAM,CAAC+B,IAAI,EAAEC,GAAG,EAAE,IAAI,CAACf,MAAM,CAAC;UAC9D;QAEF,KAAK,WAAW;UACd+C,cAAc,CAAC,IAAI,CAAC9D,QAAQ,EAAEF,MAAM,CAAC+B,IAAI,EAAEC,GAAG,EAAE,GAAG,EAAE,IAAI,CAACf,MAAM,CAAC;UACjE;QAEF,KAAK,QAAQ;UACX,IAAI,IAAI,CAACJ,oBAAoB,KAAKoD,SAAS,EAAEC,OAAO,CAACC,KAAK,CAAC,gDAAgD,CAAC;UAC5G,IAAI,CAACtD,oBAAoB,CAAC,IAAI,CAACX,QAAQ,EAAEF,MAAM,CAAC+B,IAAI,EAAEC,GAAG,EAAE,IAAI,CAACf,MAAM,CAAC;UACvE;MAAM;MAGV,SAAS6C,YAAY,CAACM,MAAM,EAAErC,IAAI,EAAEC,GAAG,EAAEG,MAAM,EAAE;QAC/C,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4C,MAAM,EAAE5C,CAAC,EAAE,EAAE;UAC/BW,MAAM,CAACC,IAAI,CAAC,CAACL,IAAI,GAAG,CAACC,GAAG,GAAGD,IAAI,IAAIP,CAAC,GAAG4C,MAAM,IAAIpC,GAAG,CAAC;QACvD;QAEAG,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;MAChB;MAEA,SAAS2B,gBAAgB,CAACK,MAAM,EAAErC,IAAI,EAAEC,GAAG,EAAEG,MAAM,EAAE;QACnD,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4C,MAAM,EAAE5C,CAAC,EAAE,EAAE;UAC/BW,MAAM,CAACC,IAAI,CAACL,IAAI,YAAIC,GAAG,GAAGD,IAAI,EAAMP,CAAC,GAAG4C,MAAM,CAAC,GAAGpC,GAAG,CAAC;QACxD;QAEAG,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;MAChB;MAEA,SAAS4B,cAAc,CAACI,MAAM,EAAErC,IAAI,EAAEC,GAAG,EAAEqC,MAAM,EAAElC,MAAM,EAAE;QACzDvC,aAAa,CAAC6C,MAAM,GAAG,CAAC;QACxB5C,SAAS,CAAC4C,MAAM,GAAG,CAAC;QACpBsB,gBAAgB,CAACK,MAAM,EAAErC,IAAI,EAAEC,GAAG,EAAEnC,SAAS,CAAC;QAC9CiE,YAAY,CAACM,MAAM,EAAErC,IAAI,EAAEC,GAAG,EAAEpC,aAAa,CAAC;QAE9C,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4C,MAAM,EAAE5C,CAAC,EAAE,EAAE;UAC/BW,MAAM,CAACC,IAAI,CAACjD,SAAS,CAACmF,IAAI,CAAC1E,aAAa,CAAC4B,CAAC,GAAG,CAAC,CAAC,EAAE3B,SAAS,CAAC2B,CAAC,GAAG,CAAC,CAAC,EAAE6C,MAAM,CAAC,CAAC;QAC7E;QAEAlC,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;MAChB;IACF;EAAC;IAAA;IAAA,OAED,kBAAS;MACP,IAAMpC,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,IAAMgB,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAE9B,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,CAACyB,MAAM,EAAEjB,CAAC,EAAE,EAAE;QACxC,IAAMC,KAAK,GAAG,IAAI,CAACP,MAAM,CAACM,CAAC,CAAC;QAC5B,IAAMkB,SAAS,GAAGjB,KAAK,CAACE,MAAM,CAAC3B,MAAM;QACrC,IAAMuE,UAAU,GAAG,CAAC7B,SAAS,CAACgB,KAAK,GAAGhB,SAAS,CAACe,IAAI,IAAI,IAAI,CAACpD,aAAa;QAC1E,IAAMmE,WAAW,GAAG,CAAC9B,SAAS,CAACiB,GAAG,GAAGjB,SAAS,CAACkB,MAAM,IAAI,IAAI,CAACvD,aAAa;QAC3EoB,KAAK,CAACE,MAAM,CAAC3B,MAAM,CAACyE,iBAAiB,CAAC,IAAI,CAAC;QAE3CjF,oBAAoB,CAACkF,gBAAgB,CAACjD,KAAK,CAACE,MAAM,CAAC3B,MAAM,CAAC2E,kBAAkB,EAAE3E,MAAM,CAAC4E,WAAW,CAAC;QAEjG5D,QAAQ,CAACQ,CAAC,CAAC,CAACqD,OAAO,CAACrF,oBAAoB,EAAEC,kBAAkB,CAAC;QAC7D,IAAMmD,SAAS,GAAGnD,kBAAkB,CAACoD,QAAQ,CAACd,IAAI;QAClD,IAAMe,QAAQ,GAAGrD,kBAAkB,CAACoD,QAAQ,CAACb,GAAG;QAEhDrC,KAAK,CAACmF,SAAS,EAAE;QAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1BpF,KAAK,CAACqF,aAAa,CAACpC,SAAS,CAACmC,CAAC,CAAC,CAAC;UAEjCpF,KAAK,CAACqF,aAAa,CAAClC,QAAQ,CAACiC,CAAC,CAAC,CAAC;QAClC;QAEApF,KAAK,CAACsF,SAAS,CAACvF,OAAO,CAAC;QAExBA,OAAO,CAAC4D,CAAC,GAAG3D,KAAK,CAACyD,GAAG,CAACE,CAAC,GAAG,IAAI,CAAC1C,WAAW;QAC1ClB,OAAO,CAACwF,CAAC,GAAG/B,IAAI,CAACgC,KAAK,CAACzF,OAAO,CAACwF,CAAC,GAAGX,UAAU,CAAC,GAAGA,UAAU;QAC3D7E,OAAO,CAAC0F,CAAC,GAAGjC,IAAI,CAACgC,KAAK,CAACzF,OAAO,CAAC0F,CAAC,GAAGZ,WAAW,CAAC,GAAGA,WAAW;QAE7D9E,OAAO,CAAC2F,YAAY,CAAC5D,KAAK,CAACE,MAAM,CAAC3B,MAAM,CAAC4E,WAAW,CAAC;QAErDnD,KAAK,CAAC6D,QAAQ,CAACC,IAAI,CAAC7F,OAAO,CAAC;QAC5B+B,KAAK,CAACU,MAAM,CAACmD,QAAQ,CAACC,IAAI,CAAC7F,OAAO,CAAC;QACnC+B,KAAK,CAACU,MAAM,CAACmD,QAAQ,CAACJ,CAAC,IAAI,IAAI,CAAC3E,cAAc,CAAC2E,CAAC;QAChDzD,KAAK,CAACU,MAAM,CAACmD,QAAQ,CAACF,CAAC,IAAI,IAAI,CAAC7E,cAAc,CAAC6E,CAAC;QAChD3D,KAAK,CAACU,MAAM,CAACmD,QAAQ,CAAChC,CAAC,IAAI,IAAI,CAAC/C,cAAc,CAAC+C,CAAC;MAClD;IACF;EAAC;IAAA;IAAA,OAED,yBAAgB;MACdlE,WAAW,CAACoG,qBAAqB,GAAGjG,SAAS,CAACiG,qBAAqB;MACnEpG,WAAW,CAACqG,iBAAiB,GAAGlG,SAAS,CAACkG,iBAAiB;IAC7D;EAAC;IAAA;IAAA,OAED,uBAAcC,QAAQ,EAAE;MACtBA,QAAQ,CAACC,OAAO,GAAGD,QAAQ,CAACC,OAAO,IAAI,CAAC,CAAC;MACzCD,QAAQ,CAACC,OAAO,CAACC,OAAO,GAAG,CAAC;MAC5BF,QAAQ,CAACC,OAAO,CAACE,YAAY,GAAG,IAAI,CAAC3F,QAAQ;MAE7C,IAAI,IAAI,CAACY,IAAI,EAAE;QACb4E,QAAQ,CAACC,OAAO,CAACG,QAAQ,GAAG,EAAE;MAChC;MAEA,IAAMC,UAAU,GAAG,EAAE;MACrB,IAAMC,KAAK,GAAG,IAAI;MAClB,IAAM7E,OAAO,GAAG,IAAI,CAACA,OAAO;MAE5BuE,QAAQ,CAACO,eAAe,GAAG,UAAUC,MAAM,EAAE;QAC3C,IAAMlE,GAAG,GAAGmB,IAAI,CAACU,GAAG,CAACmC,KAAK,CAAChG,MAAM,CAACgC,GAAG,EAAEgE,KAAK,CAAC7F,MAAM,CAAC;QACpD6F,KAAK,CAACG,iBAAiB,CAACJ,UAAU,CAAC;QACnCG,MAAM,CAACE,QAAQ,CAACC,YAAY,GAAG;UAC7BC,KAAK,EAAEP;QACT,CAAC;QACDG,MAAM,CAACE,QAAQ,CAACG,UAAU,GAAG;UAC3BD,KAAK,EAAEN,KAAK,CAAChG,MAAM,CAAC+B;QACtB,CAAC;QACDmE,MAAM,CAACE,QAAQ,CAACI,SAAS,GAAG;UAC1BF,KAAK,EAAEtE;QACT,CAAC;QACDb,OAAO,CAACsF,GAAG,CAACf,QAAQ,EAAEQ,MAAM,CAAC;MAC/B,CAAC;MAED/E,OAAO,CAACsF,GAAG,CAACf,QAAQ,EAAE,IAAI,CAAC;IAC7B;EAAC;IAAA;IAAA,OAED,0BAAiB;MACf,IAAM1D,GAAG,GAAGmB,IAAI,CAACU,GAAG,CAAC,IAAI,CAAC7D,MAAM,CAACgC,GAAG,EAAE,IAAI,CAAC7B,MAAM,CAAC;MAClD,IAAMgB,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5BA,OAAO,CAACuF,OAAO,CAAC,UAAUR,MAAM,EAAER,QAAQ,EAAE;QAC1C,IAAIQ,MAAM,KAAK,IAAI,EAAE;UACnB,IAAME,QAAQ,GAAGF,MAAM,CAACE,QAAQ;UAChC,IAAI,CAACD,iBAAiB,CAACC,QAAQ,CAACC,YAAY,CAACC,KAAK,CAAC;UACnDF,QAAQ,CAACG,UAAU,CAACD,KAAK,GAAG,IAAI,CAACtG,MAAM,CAAC+B,IAAI;UAC5CqE,QAAQ,CAACI,SAAS,CAACF,KAAK,GAAGtE,GAAG;QAChC;QAEA,IAAI,CAAC,IAAI,CAAClB,IAAI,IAAI,UAAU,IAAI4E,QAAQ,CAACC,OAAO,EAAE;UAChD,OAAOD,QAAQ,CAACC,OAAO,CAACG,QAAQ;UAChCJ,QAAQ,CAACiB,WAAW,GAAG,IAAI;QAC7B,CAAC,MAAM,IAAI,IAAI,CAAC7F,IAAI,IAAI,EAAE,UAAU,IAAI4E,QAAQ,CAACC,OAAO,CAAC,EAAE;UACzDD,QAAQ,CAACC,OAAO,CAACG,QAAQ,GAAG,EAAE;UAC9BJ,QAAQ,CAACiB,WAAW,GAAG,IAAI;QAC7B;MACF,CAAC,EAAE,IAAI,CAAC;IACV;EAAC;IAAA;IAAA,OAED,2BAAkBxE,MAAM,EAAE;MACxB,OAAOA,MAAM,CAACM,MAAM,GAAG,IAAI,CAACxB,MAAM,CAACwB,MAAM,EAAE;QACzCN,MAAM,CAACC,IAAI,CAAC,IAAI/C,OAAO,EAAE,CAAC;MAC5B;MAEA8C,MAAM,CAACM,MAAM,GAAG,IAAI,CAACxB,MAAM,CAACwB,MAAM;MAElC,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACtB,QAAQ,EAAEsB,CAAC,EAAE,EAAE;QACtC,IAAM4C,MAAM,GAAG,IAAI,CAACnD,MAAM,CAACO,CAAC,CAAC;QAC7B,IAAMoF,IAAI,GAAG,IAAI,CAAC3F,MAAM,CAACO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACpCW,MAAM,CAACX,CAAC,CAAC,CAAC0D,CAAC,GAAG0B,IAAI;QAClBzE,MAAM,CAACX,CAAC,CAAC,CAAC4D,CAAC,GAAGhB,MAAM;MACtB;IACF;EAAC;IAAA;IAAA,OAED,0BAAiB;MACf,IAAI,CAACyC,SAAS,EAAE;MAChB,IAAI,CAACC,YAAY,EAAE;MACnB,IAAI,CAACC,kBAAkB,EAAE;MACzB,IAAI,CAACC,cAAc,EAAE;IACvB;EAAC;IAAA;IAAA,OAED,kBAAS;MACP,KAAK,IAAIxF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACN,MAAM,CAACuB,MAAM,EAAEjB,CAAC,EAAE,EAAE;QAC3C,IAAI,CAACvB,MAAM,CAACgH,MAAM,CAAC,IAAI,CAAC/F,MAAM,CAACM,CAAC,CAAC,CAAC;MACpC;IACF;EAAC;IAAA;IAAA,OAED,mBAAU;MACR,IAAML,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5BA,OAAO,CAACuF,OAAO,CAAC,UAAUR,MAAM,EAAER,QAAQ,EAAE;QAC1C,OAAOA,QAAQ,CAACO,eAAe;QAC/B,OAAOP,QAAQ,CAACC,OAAO,CAACC,OAAO;QAC/B,OAAOF,QAAQ,CAACC,OAAO,CAACE,YAAY;QACpC,OAAOH,QAAQ,CAACC,OAAO,CAACG,QAAQ;QAEhC,IAAII,MAAM,KAAK,IAAI,EAAE;UACnB,OAAOA,MAAM,CAACE,QAAQ,CAACC,YAAY;UACnC,OAAOH,MAAM,CAACE,QAAQ,CAACG,UAAU;UACjC,OAAOL,MAAM,CAACE,QAAQ,CAACI,SAAS;QAClC;QAEAd,QAAQ,CAACiB,WAAW,GAAG,IAAI;MAC7B,CAAC,CAAC;MACFxF,OAAO,CAAC+F,KAAK,EAAE;IACjB;EAAC;EAAA;AAAA;AAIH,SAASpH,GAAG"},"metadata":{},"sourceType":"module"}