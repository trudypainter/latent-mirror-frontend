{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3 } from 'three';\nexport var SeparatingAxisBounds = /*#__PURE__*/function () {\n  function SeparatingAxisBounds() {\n    _classCallCheck(this, SeparatingAxisBounds);\n    this.min = Infinity;\n    this.max = -Infinity;\n  }\n  _createClass(SeparatingAxisBounds, [{\n    key: \"setFromPointsField\",\n    value: function setFromPointsField(points, field) {\n      var min = Infinity;\n      var max = -Infinity;\n      for (var i = 0, l = points.length; i < l; i++) {\n        var p = points[i];\n        var val = p[field];\n        min = val < min ? val : min;\n        max = val > max ? val : max;\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"setFromPoints\",\n    value: function setFromPoints(axis, points) {\n      var min = Infinity;\n      var max = -Infinity;\n      for (var i = 0, l = points.length; i < l; i++) {\n        var p = points[i];\n        var val = axis.dot(p);\n        min = val < min ? val : min;\n        max = val > max ? val : max;\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"isSeparated\",\n    value: function isSeparated(other) {\n      return this.min > other.max || other.min > this.max;\n    }\n  }]);\n  return SeparatingAxisBounds;\n}();\nSeparatingAxisBounds.prototype.setFromBox = function () {\n  var p = new Vector3();\n  return function setFromBox(axis, box) {\n    var boxMin = box.min;\n    var boxMax = box.max;\n    var min = Infinity;\n    var max = -Infinity;\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          p.x = boxMin.x * x + boxMax.x * (1 - x);\n          p.y = boxMin.y * y + boxMax.y * (1 - y);\n          p.z = boxMin.z * z + boxMax.z * (1 - z);\n          var val = axis.dot(p);\n          min = Math.min(val, min);\n          max = Math.max(val, max);\n        }\n      }\n    }\n    this.min = min;\n    this.max = max;\n  };\n}();\nexport var areIntersecting = function () {\n  var cacheSatBounds = new SeparatingAxisBounds();\n  return function areIntersecting(shape1, shape2) {\n    var points1 = shape1.points;\n    var satAxes1 = shape1.satAxes;\n    var satBounds1 = shape1.satBounds;\n    var points2 = shape2.points;\n    var satAxes2 = shape2.satAxes;\n    var satBounds2 = shape2.satBounds;\n\n    // check axes of the first shape\n    for (var i = 0; i < 3; i++) {\n      var sb = satBounds1[i];\n      var sa = satAxes1[i];\n      cacheSatBounds.setFromPoints(sa, points2);\n      if (sb.isSeparated(cacheSatBounds)) return false;\n    }\n\n    // check axes of the second shape\n    for (var _i = 0; _i < 3; _i++) {\n      var _sb = satBounds2[_i];\n      var _sa = satAxes2[_i];\n      cacheSatBounds.setFromPoints(_sa, points1);\n      if (_sb.isSeparated(cacheSatBounds)) return false;\n    }\n  };\n}();","map":{"version":3,"names":["Vector3","SeparatingAxisBounds","min","Infinity","max","points","field","i","l","length","p","val","axis","dot","other","prototype","setFromBox","box","boxMin","boxMax","x","y","z","Math","areIntersecting","cacheSatBounds","shape1","shape2","points1","satAxes1","satAxes","satBounds1","satBounds","points2","satAxes2","satBounds2","sb","sa","setFromPoints","isSeparated"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js"],"sourcesContent":["import { Vector3 } from 'three';\r\n\r\nexport class SeparatingAxisBounds {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.min = Infinity;\r\n\t\tthis.max = - Infinity;\r\n\r\n\t}\r\n\r\n\tsetFromPointsField( points, field ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = p[ field ];\r\n\t\t\tmin = val < min ? val : min;\r\n\t\t\tmax = val > max ? val : max;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( axis, points ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = axis.dot( p );\r\n\t\t\tmin = val < min ? val : min;\r\n\t\t\tmax = val > max ? val : max;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tisSeparated( other ) {\r\n\r\n\t\treturn this.min > other.max || other.min > this.max;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\r\n\r\n\tconst p = new Vector3();\r\n\treturn function setFromBox( axis, box ) {\r\n\r\n\t\tconst boxMin = box.min;\r\n\t\tconst boxMax = box.max;\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\r\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\r\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\r\n\r\n\t\t\t\t\tconst val = axis.dot( p );\r\n\t\t\t\t\tmin = Math.min( val, min );\r\n\t\t\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const areIntersecting = ( function () {\r\n\r\n\tconst cacheSatBounds = new SeparatingAxisBounds();\r\n\treturn function areIntersecting( shape1, shape2 ) {\r\n\r\n\t\tconst points1 = shape1.points;\r\n\t\tconst satAxes1 = shape1.satAxes;\r\n\t\tconst satBounds1 = shape1.satBounds;\r\n\r\n\t\tconst points2 = shape2.points;\r\n\t\tconst satAxes2 = shape2.satAxes;\r\n\t\tconst satBounds2 = shape2.satBounds;\r\n\r\n\t\t// check axes of the first shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check axes of the second shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}