{"ast":null,"code":"import { Box3, Vector3 } from 'three';\nimport { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../core/Constants.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nvar _box1 = /* @__PURE__ */new Box3();\nvar _box2 = /* @__PURE__ */new Box3();\nvar _vec = /* @__PURE__ */new Vector3();\n\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\nfunction getPrimitiveSize(el) {\n  switch (typeof el) {\n    case 'number':\n      return 8;\n    case 'string':\n      return el.length * 2;\n    case 'boolean':\n      return 4;\n    default:\n      return 0;\n  }\n}\nfunction isTypedArray(arr) {\n  var regex = /(Uint|Int|Float)(8|16|32)Array/;\n  return regex.test(arr.constructor.name);\n}\nfunction getRootExtremes(bvh, group) {\n  var result = {\n    nodeCount: 0,\n    leafNodeCount: 0,\n    depth: {\n      min: Infinity,\n      max: -Infinity\n    },\n    tris: {\n      min: Infinity,\n      max: -Infinity\n    },\n    splits: [0, 0, 0],\n    surfaceAreaScore: 0\n  };\n  bvh.traverse(function (depth, isLeaf, boundingData, offsetOrSplit, count) {\n    var l0 = boundingData[0 + 3] - boundingData[0];\n    var l1 = boundingData[1 + 3] - boundingData[1];\n    var l2 = boundingData[2 + 3] - boundingData[2];\n    var surfaceArea = 2 * (l0 * l1 + l1 * l2 + l2 * l0);\n    result.nodeCount++;\n    if (isLeaf) {\n      result.leafNodeCount++;\n      result.depth.min = Math.min(depth, result.depth.min);\n      result.depth.max = Math.max(depth, result.depth.max);\n      result.tris.min = Math.min(count, result.tris.min);\n      result.tris.max = Math.max(count, result.tris.max);\n      result.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\n    } else {\n      result.splits[offsetOrSplit]++;\n      result.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\n    }\n  }, group);\n\n  // If there are no leaf nodes because the tree hasn't finished generating yet.\n  if (result.tris.min === Infinity) {\n    result.tris.min = 0;\n    result.tris.max = 0;\n  }\n  if (result.depth.min === Infinity) {\n    result.depth.min = 0;\n    result.depth.max = 0;\n  }\n  return result;\n}\nfunction getBVHExtremes(bvh) {\n  return bvh._roots.map(function (root, i) {\n    return getRootExtremes(bvh, i);\n  });\n}\nfunction estimateMemoryInBytes(obj) {\n  var traversed = new Set();\n  var stack = [obj];\n  var bytes = 0;\n  while (stack.length) {\n    var curr = stack.pop();\n    if (traversed.has(curr)) {\n      continue;\n    }\n    traversed.add(curr);\n    for (var key in curr) {\n      if (!curr.hasOwnProperty(key)) {\n        continue;\n      }\n      bytes += getPrimitiveSize(key);\n      var value = curr[key];\n      if (value && (typeof value === 'object' || typeof value === 'function')) {\n        if (isTypedArray(value)) {\n          bytes += value.byteLength;\n        } else if (value instanceof ArrayBuffer) {\n          bytes += value.byteLength;\n        } else {\n          stack.push(value);\n        }\n      } else {\n        bytes += getPrimitiveSize(value);\n      }\n    }\n  }\n  return bytes;\n}\nfunction validateBounds(bvh) {\n  var geometry = bvh.geometry;\n  var depthStack = [];\n  var index = geometry.index;\n  var position = geometry.getAttribute('position');\n  var passes = true;\n  bvh.traverse(function (depth, isLeaf, boundingData, offset, count) {\n    var info = {\n      depth: depth,\n      isLeaf: isLeaf,\n      boundingData: boundingData,\n      offset: offset,\n      count: count\n    };\n    depthStack[depth] = info;\n    arrayToBox(0, boundingData, _box1);\n    var parent = depthStack[depth - 1];\n    if (isLeaf) {\n      // check triangles\n      for (var i = offset * 3, l = (offset + count) * 3; i < l; i += 3) {\n        var i0 = index.getX(i);\n        var i1 = index.getX(i + 1);\n        var i2 = index.getX(i + 2);\n        var isContained = void 0;\n        _vec.fromBufferAttribute(position, i0);\n        isContained = _box1.containsPoint(_vec);\n        _vec.fromBufferAttribute(position, i1);\n        isContained = isContained && _box1.containsPoint(_vec);\n        _vec.fromBufferAttribute(position, i2);\n        isContained = isContained && _box1.containsPoint(_vec);\n        console.assert(isContained, 'Leaf bounds does not fully contain triangle.');\n        passes = passes && isContained;\n      }\n    }\n    if (parent) {\n      // check if my bounds fit in my parents\n      arrayToBox(0, boundingData, _box2);\n      var _isContained = _box2.containsBox(_box1);\n      console.assert(_isContained, 'Parent bounds does not fully contain child.');\n      passes = passes && _isContained;\n    }\n  });\n  return passes;\n}\n\n// Returns a simple, human readable object that represents the BVH.\nfunction getJSONStructure(bvh) {\n  var depthStack = [];\n  bvh.traverse(function (depth, isLeaf, boundingData, offset, count) {\n    var info = {\n      bounds: arrayToBox(0, boundingData, new Box3())\n    };\n    if (isLeaf) {\n      info.count = count;\n      info.offset = offset;\n    } else {\n      info.left = null;\n      info.right = null;\n    }\n    depthStack[depth] = info;\n\n    // traversal hits the left then right node\n    var parent = depthStack[depth - 1];\n    if (parent) {\n      if (parent.left === null) {\n        parent.left = info;\n      } else {\n        parent.right = info;\n      }\n    }\n  });\n  return depthStack[0];\n}\nexport { estimateMemoryInBytes, getBVHExtremes, validateBounds, getJSONStructure };","map":{"version":3,"names":["Box3","Vector3","TRAVERSAL_COST","TRIANGLE_INTERSECT_COST","arrayToBox","_box1","_box2","_vec","getPrimitiveSize","el","length","isTypedArray","arr","regex","test","constructor","name","getRootExtremes","bvh","group","result","nodeCount","leafNodeCount","depth","min","Infinity","max","tris","splits","surfaceAreaScore","traverse","isLeaf","boundingData","offsetOrSplit","count","l0","l1","l2","surfaceArea","Math","getBVHExtremes","_roots","map","root","i","estimateMemoryInBytes","obj","traversed","Set","stack","bytes","curr","pop","has","add","key","hasOwnProperty","value","byteLength","ArrayBuffer","push","validateBounds","geometry","depthStack","index","position","getAttribute","passes","offset","info","parent","l","i0","getX","i1","i2","isContained","fromBufferAttribute","containsPoint","console","assert","containsBox","getJSONStructure","bounds","left","right"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-mesh-bvh/src/debug/Debug.js"],"sourcesContent":["import { Box3, Vector3 } from 'three';\r\nimport { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../core/Constants.js';\r\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\r\n\r\nconst _box1 = /* @__PURE__ */ new Box3();\r\nconst _box2 = /* @__PURE__ */ new Box3();\r\nconst _vec = /* @__PURE__ */ new Vector3();\r\n\r\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\r\nfunction getPrimitiveSize( el ) {\r\n\r\n\tswitch ( typeof el ) {\r\n\r\n\t\tcase 'number':\r\n\t\t\treturn 8;\r\n\t\tcase 'string':\r\n\t\t\treturn el.length * 2;\r\n\t\tcase 'boolean':\r\n\t\t\treturn 4;\r\n\t\tdefault:\r\n\t\t\treturn 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction isTypedArray( arr ) {\r\n\r\n\tconst regex = /(Uint|Int|Float)(8|16|32)Array/;\r\n\treturn regex.test( arr.constructor.name );\r\n\r\n}\r\n\r\nfunction getRootExtremes( bvh, group ) {\r\n\r\n\tconst result = {\r\n\t\tnodeCount: 0,\r\n\t\tleafNodeCount: 0,\r\n\r\n\t\tdepth: {\r\n\t\t\tmin: Infinity, max: - Infinity\r\n\t\t},\r\n\t\ttris: {\r\n\t\t\tmin: Infinity, max: - Infinity\r\n\t\t},\r\n\t\tsplits: [ 0, 0, 0 ],\r\n\t\tsurfaceAreaScore: 0,\r\n\t};\r\n\r\n\tbvh.traverse( ( depth, isLeaf, boundingData, offsetOrSplit, count ) => {\r\n\r\n\t\tconst l0 = boundingData[ 0 + 3 ] - boundingData[ 0 ];\r\n\t\tconst l1 = boundingData[ 1 + 3 ] - boundingData[ 1 ];\r\n\t\tconst l2 = boundingData[ 2 + 3 ] - boundingData[ 2 ];\r\n\r\n\t\tconst surfaceArea = 2 * ( l0 * l1 + l1 * l2 + l2 * l0 );\r\n\r\n\t\tresult.nodeCount ++;\r\n\t\tif ( isLeaf ) {\r\n\r\n\t\t\tresult.leafNodeCount ++;\r\n\r\n\t\t\tresult.depth.min = Math.min( depth, result.depth.min );\r\n\t\t\tresult.depth.max = Math.max( depth, result.depth.max );\r\n\r\n\t\t\tresult.tris.min = Math.min( count, result.tris.min );\r\n\t\t\tresult.tris.max = Math.max( count, result.tris.max );\r\n\r\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult.splits[ offsetOrSplit ] ++;\r\n\r\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\r\n\r\n\t\t}\r\n\r\n\t}, group );\r\n\r\n\t// If there are no leaf nodes because the tree hasn't finished generating yet.\r\n\tif ( result.tris.min === Infinity ) {\r\n\r\n\t\tresult.tris.min = 0;\r\n\t\tresult.tris.max = 0;\r\n\r\n\t}\r\n\r\n\tif ( result.depth.min === Infinity ) {\r\n\r\n\t\tresult.depth.min = 0;\r\n\t\tresult.depth.max = 0;\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nfunction getBVHExtremes( bvh ) {\r\n\r\n\treturn bvh._roots.map( ( root, i ) => getRootExtremes( bvh, i ) );\r\n\r\n}\r\n\r\nfunction estimateMemoryInBytes( obj ) {\r\n\r\n\tconst traversed = new Set();\r\n\tconst stack = [ obj ];\r\n\tlet bytes = 0;\r\n\r\n\twhile ( stack.length ) {\r\n\r\n\t\tconst curr = stack.pop();\r\n\t\tif ( traversed.has( curr ) ) {\r\n\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\ttraversed.add( curr );\r\n\r\n\t\tfor ( let key in curr ) {\r\n\r\n\t\t\tif ( ! curr.hasOwnProperty( key ) ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbytes += getPrimitiveSize( key );\r\n\r\n\t\t\tconst value = curr[ key ];\r\n\t\t\tif ( value && ( typeof value === 'object' || typeof value === 'function' ) ) {\r\n\r\n\t\t\t\tif ( isTypedArray( value ) ) {\r\n\r\n\t\t\t\t\tbytes += value.byteLength;\r\n\r\n\t\t\t\t} else if ( value instanceof ArrayBuffer ) {\r\n\r\n\t\t\t\t\tbytes += value.byteLength;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstack.push( value );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbytes += getPrimitiveSize( value );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn bytes;\r\n\r\n}\r\n\r\nfunction validateBounds( bvh ) {\r\n\r\n\tconst geometry = bvh.geometry;\r\n\tconst depthStack = [];\r\n\tconst index = geometry.index;\r\n\tconst position = geometry.getAttribute( 'position' );\r\n\tlet passes = true;\r\n\r\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\r\n\r\n\t\tconst info = {\r\n\t\t\tdepth,\r\n\t\t\tisLeaf,\r\n\t\t\tboundingData,\r\n\t\t\toffset,\r\n\t\t\tcount,\r\n\t\t};\r\n\t\tdepthStack[ depth ] = info;\r\n\r\n\t\tarrayToBox( 0, boundingData, _box1 );\r\n\t\tconst parent = depthStack[ depth - 1 ];\r\n\r\n\t\tif ( isLeaf ) {\r\n\r\n\t\t\t// check triangles\r\n\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\tconst i0 = index.getX( i );\r\n\t\t\t\tconst i1 = index.getX( i + 1 );\r\n\t\t\t\tconst i2 = index.getX( i + 2 );\r\n\r\n\t\t\t\tlet isContained;\r\n\r\n\t\t\t\t_vec.fromBufferAttribute( position, i0 );\r\n\t\t\t\tisContained = _box1.containsPoint( _vec );\r\n\r\n\t\t\t\t_vec.fromBufferAttribute( position, i1 );\r\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\r\n\r\n\t\t\t\t_vec.fromBufferAttribute( position, i2 );\r\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\r\n\r\n\t\t\t\tconsole.assert( isContained, 'Leaf bounds does not fully contain triangle.' );\r\n\t\t\t\tpasses = passes && isContained;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( parent ) {\r\n\r\n\t\t\t// check if my bounds fit in my parents\r\n\t\t\tarrayToBox( 0, boundingData, _box2 );\r\n\r\n\t\t\tconst isContained = _box2.containsBox( _box1 );\r\n\t\t\tconsole.assert( isContained, 'Parent bounds does not fully contain child.' );\r\n\t\t\tpasses = passes && isContained;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn passes;\r\n\r\n}\r\n\r\n// Returns a simple, human readable object that represents the BVH.\r\nfunction getJSONStructure( bvh ) {\r\n\r\n\tconst depthStack = [];\r\n\r\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\r\n\r\n\t\tconst info = {\r\n\t\t\tbounds: arrayToBox( 0, boundingData, new Box3() ),\r\n\t\t};\r\n\r\n\t\tif ( isLeaf ) {\r\n\r\n\t\t\tinfo.count = count;\r\n\t\t\tinfo.offset = offset;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tinfo.left = null;\r\n\t\t\tinfo.right = null;\r\n\r\n\t\t}\r\n\r\n\t\tdepthStack[ depth ] = info;\r\n\r\n\t\t// traversal hits the left then right node\r\n\t\tconst parent = depthStack[ depth - 1 ];\r\n\t\tif ( parent ) {\r\n\r\n\t\t\tif ( parent.left === null ) {\r\n\r\n\t\t\t\tparent.left = info;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tparent.right = info;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn depthStack[ 0 ];\r\n\r\n}\r\n\r\nexport { estimateMemoryInBytes, getBVHExtremes, validateBounds, getJSONStructure };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}