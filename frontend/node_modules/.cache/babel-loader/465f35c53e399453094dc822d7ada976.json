{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nvar SSAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SSAOPass, _Pass);\n  var _super = _createSuper(SSAOPass);\n  function SSAOPass(scene, camera, width, height) {\n    var _this;\n    _classCallCheck(this, SSAOPass);\n    _this = _super.call(this);\n    _this.width = width !== undefined ? width : 512;\n    _this.height = height !== undefined ? height : 512;\n    _this.clear = true;\n    _this.camera = camera;\n    _this.scene = scene;\n    _this.kernelRadius = 8;\n    _this.kernelSize = 32;\n    _this.kernel = [];\n    _this.noiseTexture = null;\n    _this.output = 0;\n    _this.minDistance = 0.005;\n    _this.maxDistance = 0.1;\n    _this._visibilityCache = new Map(); //\n\n    _this.generateSampleKernel();\n    _this.generateRandomKernelRotations(); // beauty render target\n\n    var depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height); // normal render target with depth buffer\n\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    _this.ssaoRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.blurRenderTarget = _this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n    _this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssaoMaterial.uniforms['tDiffuse'].value = _this.beautyRenderTarget.texture;\n    _this.ssaoMaterial.uniforms['tNormal'].value = _this.normalRenderTarget.texture;\n    _this.ssaoMaterial.uniforms['tDepth'].value = _this.normalRenderTarget.depthTexture;\n    _this.ssaoMaterial.uniforms['tNoise'].value = _this.noiseTexture;\n    _this.ssaoMaterial.uniforms['kernel'].value = _this.kernel;\n    _this.ssaoMaterial.uniforms['cameraNear'].value = _this.camera.near;\n    _this.ssaoMaterial.uniforms['cameraFar'].value = _this.camera.far;\n    _this.ssaoMaterial.uniforms['resolution'].value.set(_this.width, _this.height);\n    _this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(_this.camera.projectionMatrix);\n    _this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(_this.camera.projectionMatrixInverse); // normal material\n\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending; // blur material\n\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms['tDiffuse'].value = _this.ssaoRenderTarget.texture;\n    _this.blurMaterial.uniforms['resolution'].value.set(_this.width, _this.height); // material for rendering the depth\n\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms['tDepth'].value = _this.normalRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms['cameraNear'].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms['cameraFar'].value = _this.camera.far; // material for rendering the content of a render target\n\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(SSAOPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      // dispose render targets\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose(); // dispose materials\n\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer\n    /*, readBuffer, deltaTime, maskActive */) {\n      if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n      this.restoreVisibility(); // render SSAO\n\n      this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n      this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n      switch (this.output) {\n        case SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn('THREE.SSAOPass: Unknown output type.');\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      // save original state\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget); // setup pass state\n\n      renderer.autoClear = false;\n      if (clearColor !== undefined && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0.0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer); // restore original state\n\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== undefined && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0.0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null; // restore original state\n\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n      this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    }\n  }, {\n    key: \"generateSampleKernel\",\n    value: function generateSampleKernel() {\n      var kernelSize = this.kernelSize;\n      var kernel = this.kernel;\n      for (var i = 0; i < kernelSize; i++) {\n        var sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        var scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n  }, {\n    key: \"generateRandomKernelRotations\",\n    value: function generateRandomKernelRotations() {\n      var width = 4,\n        height = 4;\n      if (SimplexNoise === undefined) {\n        console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n      }\n      var simplex = new SimplexNoise();\n      var size = width * height;\n      var data = new Float32Array(size);\n      for (var i = 0; i < size; i++) {\n        var x = Math.random() * 2 - 1;\n        var y = Math.random() * 2 - 1;\n        var z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n  }, {\n    key: \"overrideVisibility\",\n    value: function overrideVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n  }, {\n    key: \"restoreVisibility\",\n    value: function restoreVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        var visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  }]);\n  return SSAOPass;\n}(Pass);\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":{"version":3,"names":["DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","scene","camera","width","height","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","render","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["import { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SSAOPass extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 0.005;\n    this.maxDistance = 0.1;\n    this._visibilityCache = new Map(); //\n\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations(); // beauty render target\n\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height); // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending; // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n\n  dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  }\n\n  render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n          height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n\n}\n\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\n\nexport { SSAOPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}