{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\nvar FunctionNode = /*#__PURE__*/function (_CodeNode) {\n  _inherits(FunctionNode, _CodeNode);\n  var _super = _createSuper(FunctionNode);\n  function FunctionNode() {\n    var _this;\n    var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    _classCallCheck(this, FunctionNode);\n    _this = _super.call(this, code);\n    _this.keywords = {};\n    return _this;\n  }\n  _createClass(FunctionNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return this.getNodeFunction(builder).type;\n    }\n  }, {\n    key: \"getInputs\",\n    value: function getInputs(builder) {\n      return this.getNodeFunction(builder).inputs;\n    }\n  }, {\n    key: \"getNodeFunction\",\n    value: function getNodeFunction(builder) {\n      var nodeData = builder.getDataFromNode(this);\n      var nodeFunction = nodeData.nodeFunction;\n      if (nodeFunction === undefined) {\n        nodeFunction = builder.parser.parseFunction(this.code);\n        nodeData.nodeFunction = nodeFunction;\n      }\n      return nodeFunction;\n    }\n  }, {\n    key: \"call\",\n    value: function call() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new FunctionCallNode(this, parameters);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      _get(_getPrototypeOf(FunctionNode.prototype), \"generate\", this).call(this, builder);\n      var nodeFunction = this.getNodeFunction(builder);\n      var name = nodeFunction.name;\n      var type = nodeFunction.type;\n      var nodeCode = builder.getCodeFromNode(this, type);\n      if (name !== '') {\n        // use a custom property name\n        nodeCode.name = name;\n      }\n      var propertyName = builder.getPropertyName(nodeCode);\n      var code = this.getNodeFunction(builder).getCode(propertyName);\n      var keywords = this.keywords;\n      var keywordsProperties = Object.keys(keywords);\n      if (keywordsProperties.length > 0) {\n        var _iterator = _createForOfIteratorHelper(keywordsProperties),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var property = _step.value;\n            var propertyRegExp = new RegExp(\"\\\\b\".concat(property, \"\\\\b\"), 'g');\n            var nodeProperty = keywords[property].build(builder, 'property');\n            code = code.replace(propertyRegExp, nodeProperty);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      nodeCode.code = code;\n      if (output === 'property') {\n        return propertyName;\n      } else {\n        return builder.format(\"\".concat(propertyName, \"()\"), type, output);\n      }\n    }\n  }]);\n  return FunctionNode;\n}(CodeNode);\nexport default FunctionNode;","map":{"version":3,"names":["CodeNode","FunctionCallNode","FunctionNode","code","keywords","builder","getNodeFunction","type","inputs","nodeData","getDataFromNode","nodeFunction","undefined","parser","parseFunction","parameters","output","name","nodeCode","getCodeFromNode","propertyName","getPropertyName","getCode","keywordsProperties","Object","keys","length","property","propertyRegExp","RegExp","nodeProperty","build","replace","format"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/nodes/core/FunctionNode.js"],"sourcesContent":["import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nclass FunctionNode extends CodeNode {\n  constructor(code = '') {\n    super(code);\n    this.keywords = {};\n  }\n\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n\n    return nodeFunction;\n  }\n\n  call(parameters = {}) {\n    return new FunctionCallNode(this, parameters);\n  }\n\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n\n    if (name !== '') {\n      // use a custom property name\n      nodeCode.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n\n    nodeCode.code = code;\n\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n\n}\n\nexport default FunctionNode;\n"],"mappings":";;;;;;;AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,OAAOC,gBAAgB,MAAM,uBAAuB;AAAC,IAE/CC,YAAY;EAAA;EAAA;EAChB,wBAAuB;IAAA;IAAA,IAAXC,IAAI,uEAAG,EAAE;IAAA;IACnB,0BAAMA,IAAI;IACV,MAAKC,QAAQ,GAAG,CAAC,CAAC;IAAC;EACrB;EAAC;IAAA;IAAA,OAED,qBAAYC,OAAO,EAAE;MACnB,OAAO,IAAI,CAACC,eAAe,CAACD,OAAO,CAAC,CAACE,IAAI;IAC3C;EAAC;IAAA;IAAA,OAED,mBAAUF,OAAO,EAAE;MACjB,OAAO,IAAI,CAACC,eAAe,CAACD,OAAO,CAAC,CAACG,MAAM;IAC7C;EAAC;IAAA;IAAA,OAED,yBAAgBH,OAAO,EAAE;MACvB,IAAMI,QAAQ,GAAGJ,OAAO,CAACK,eAAe,CAAC,IAAI,CAAC;MAC9C,IAAIC,YAAY,GAAGF,QAAQ,CAACE,YAAY;MAExC,IAAIA,YAAY,KAAKC,SAAS,EAAE;QAC9BD,YAAY,GAAGN,OAAO,CAACQ,MAAM,CAACC,aAAa,CAAC,IAAI,CAACX,IAAI,CAAC;QACtDM,QAAQ,CAACE,YAAY,GAAGA,YAAY;MACtC;MAEA,OAAOA,YAAY;IACrB;EAAC;IAAA;IAAA,OAED,gBAAsB;MAAA,IAAjBI,UAAU,uEAAG,CAAC,CAAC;MAClB,OAAO,IAAId,gBAAgB,CAAC,IAAI,EAAEc,UAAU,CAAC;IAC/C;EAAC;IAAA;IAAA,OAED,kBAASV,OAAO,EAAEW,MAAM,EAAE;MACxB,2EAAeX,OAAO;MACtB,IAAMM,YAAY,GAAG,IAAI,CAACL,eAAe,CAACD,OAAO,CAAC;MAClD,IAAMY,IAAI,GAAGN,YAAY,CAACM,IAAI;MAC9B,IAAMV,IAAI,GAAGI,YAAY,CAACJ,IAAI;MAC9B,IAAMW,QAAQ,GAAGb,OAAO,CAACc,eAAe,CAAC,IAAI,EAAEZ,IAAI,CAAC;MAEpD,IAAIU,IAAI,KAAK,EAAE,EAAE;QACf;QACAC,QAAQ,CAACD,IAAI,GAAGA,IAAI;MACtB;MAEA,IAAMG,YAAY,GAAGf,OAAO,CAACgB,eAAe,CAACH,QAAQ,CAAC;MACtD,IAAIf,IAAI,GAAG,IAAI,CAACG,eAAe,CAACD,OAAO,CAAC,CAACiB,OAAO,CAACF,YAAY,CAAC;MAC9D,IAAMhB,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAMmB,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CAACrB,QAAQ,CAAC;MAEhD,IAAImB,kBAAkB,CAACG,MAAM,GAAG,CAAC,EAAE;QAAA,2CACVH,kBAAkB;UAAA;QAAA;UAAzC,oDAA2C;YAAA,IAAhCI,QAAQ;YACjB,IAAMC,cAAc,GAAG,IAAIC,MAAM,cAAOF,QAAQ,UAAO,GAAG,CAAC;YAC3D,IAAMG,YAAY,GAAG1B,QAAQ,CAACuB,QAAQ,CAAC,CAACI,KAAK,CAAC1B,OAAO,EAAE,UAAU,CAAC;YAClEF,IAAI,GAAGA,IAAI,CAAC6B,OAAO,CAACJ,cAAc,EAAEE,YAAY,CAAC;UACnD;QAAC;UAAA;QAAA;UAAA;QAAA;MACH;MAEAZ,QAAQ,CAACf,IAAI,GAAGA,IAAI;MAEpB,IAAIa,MAAM,KAAK,UAAU,EAAE;QACzB,OAAOI,YAAY;MACrB,CAAC,MAAM;QACL,OAAOf,OAAO,CAAC4B,MAAM,WAAIb,YAAY,SAAMb,IAAI,EAAES,MAAM,CAAC;MAC1D;IACF;EAAC;EAAA;AAAA,EA9DwBhB,QAAQ;AAkEnC,eAAeE,YAAY"},"metadata":{},"sourceType":"module"}