{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\nvar DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nvar DEFAULT_PROFILE = 'generic-trigger';\nvar XRControllerModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRControllerModel, _Object3D);\n  var _super = _createSuper(XRControllerModel);\n  function XRControllerModel() {\n    var _this;\n    _classCallCheck(this, XRControllerModel);\n    _this = _super.call(this);\n    _this.motionController = null;\n    _this.envMap = null;\n    return _this;\n  }\n  _createClass(XRControllerModel, [{\n    key: \"setEnvironmentMap\",\n    value: function setEnvironmentMap(envMap) {\n      var _this2 = this;\n      if (this.envMap == envMap) {\n        return this;\n      }\n      this.envMap = envMap;\n      this.traverse(function (child) {\n        if (child.isMesh) {\n          child.material.envMap = _this2.envMap;\n          child.material.needsUpdate = true;\n        }\n      });\n      return this;\n    }\n    /**\n     * Polls data from the XRInputSource and updates the model's components to match\n     * the real world data\n     */\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRControllerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n      this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n      Object.values(this.motionController.components).forEach(function (component) {\n        // Update node data based on the visual responses' current states\n        Object.values(component.visualResponses).forEach(function (visualResponse) {\n          var valueNode = visualResponse.valueNode,\n            minNode = visualResponse.minNode,\n            maxNode = visualResponse.maxNode,\n            value = visualResponse.value,\n            valueNodeProperty = visualResponse.valueNodeProperty; // Skip if the visual response node is not found. No error is needed,\n          // because it will have been reported at load time.\n\n          if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n          if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            valueNode.visible = value;\n          } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n            valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n            valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n          }\n        });\n      });\n    }\n  }]);\n  return XRControllerModel;\n}(Object3D); /**\n              * Walks the model's tree to find the nodes needed to animate the components and\n              * saves them to the motionContoller components for use in the frame loop. When\n              * touchpads are found, attaches a touch dot to them.\n              */\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(function (component) {\n    var type = component.type,\n      touchPointNodeName = component.touchPointNodeName,\n      visualResponses = component.visualResponses;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        var sphereGeometry = new SphereGeometry(0.001);\n        var material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        var sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(\"Could not find touch dot, \".concat(component.touchPointNodeName, \", in touchpad component \").concat(component.id));\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n    Object.values(visualResponses).forEach(function (visualResponse) {\n      var valueNodeName = visualResponse.valueNodeName,\n        minNodeName = visualResponse.minNodeName,\n        maxNodeName = visualResponse.maxNodeName,\n        valueNodeProperty = visualResponse.valueNodeProperty; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(\"Could not find \".concat(minNodeName, \" in the model\"));\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(\"Could not find \".concat(maxNodeName, \" in the model\"));\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(\"Could not find \".concat(valueNodeName, \" in the model\"));\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(function (child) {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n  controllerModel.add(scene);\n}\nvar XRControllerModelFactory = /*#__PURE__*/function () {\n  function XRControllerModelFactory() {\n    var gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    _classCallCheck(this, XRControllerModelFactory);\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  _createClass(XRControllerModelFactory, [{\n    key: \"createControllerModel\",\n    value: function createControllerModel(controller) {\n      var _this3 = this;\n      var controllerModel = new XRControllerModel();\n      var scene = null;\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n        fetchProfile(xrInputSource, _this3.path, DEFAULT_PROFILE).then(function (_ref) {\n          var profile = _ref.profile,\n            assetPath = _ref.assetPath;\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n          var cachedAsset = _this3._assetCache[controllerModel.motionController.assetUrl];\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          } else {\n            if (!_this3.gltfLoader) {\n              throw new Error('GLTFLoader not set.');\n            }\n            _this3.gltfLoader.setPath('');\n            _this3.gltfLoader.load(controllerModel.motionController.assetUrl, function (asset) {\n              _this3._assetCache[controllerModel.motionController.assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            }, null, function () {\n              throw new Error(\"Asset \".concat(controllerModel.motionController.assetUrl, \" missing or malformed.\"));\n            });\n          }\n        }).catch(function (err) {\n          console.warn(err);\n        });\n      });\n      controller.addEventListener('disconnected', function () {\n        controllerModel.motionController = null;\n        controllerModel.remove(scene);\n        scene = null;\n      });\n      return controllerModel;\n    }\n  }]);\n  return XRControllerModelFactory;\n}();\nexport { XRControllerModelFactory };","map":{"version":3,"names":["Object3D","SphereGeometry","MeshBasicMaterial","Mesh","GLTFLoader","fetchProfile","MotionController","MotionControllerConstants","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","XRControllerModel","motionController","envMap","traverse","child","isMesh","material","needsUpdate","force","updateFromGamepad","Object","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","value","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","path","_assetCache","controller","addEventListener","event","xrInputSource","data","targetRayMode","gamepad","then","profile","assetPath","cachedAsset","assetUrl","clone","Error","setPath","load","asset","catch","err","remove"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"sourcesContent":["import { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n\n}\n\nexport { XRControllerModelFactory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}