{"ast":null,"code":"import { BufferGeometry, Clock, Float32BufferAttribute, Mesh, OrthographicCamera, Vector2, WebGLRenderTarget } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    this.renderer = renderer;\n    if (renderTarget === undefined) {\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    this.passes = [];\n\n    // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n    return true;\n  }\n  render(deltaTime) {\n    // deltaTime value is in seconds\n\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    for (let i = 0, il = this.passes.length; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil;\n\n          //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n\n          //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n        this.swapBuffers();\n      }\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n}\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    this.enabled = true;\n\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    this.needsSwap = true;\n\n    // if set to true, the pass clears its buffer before rendering\n    this.clear = false;\n\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    this.renderToScreen = false;\n  }\n  setSize() {}\n  render() {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n_geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\nclass FullScreenQuad {\n  constructor(material) {\n    this._mesh = new Mesh(_geometry, material);\n  }\n  dispose() {\n    this._mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this._mesh, _camera);\n  }\n  get material() {\n    return this._mesh.material;\n  }\n  set material(value) {\n    this._mesh.material = value;\n  }\n}\nexport { EffectComposer, Pass, FullScreenQuad };","map":{"version":3,"names":["BufferGeometry","Clock","Float32BufferAttribute","Mesh","OrthographicCamera","Vector2","WebGLRenderTarget","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","constructor","renderer","renderTarget","undefined","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","console","error","copyPass","clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","Pass","clear","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","geometry","value"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three/examples/jsm/postprocessing/EffectComposer.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tMesh,\n\tOrthographicCamera,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}