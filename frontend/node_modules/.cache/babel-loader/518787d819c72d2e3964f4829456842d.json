{"ast":null,"code":"import _regeneratorRuntime from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _FORMAT_MAP, _TYPE_MAP, _ENCODING_MAP;\nimport { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nvar _taskCache = new WeakMap();\nvar _activeLoaders = 0;\nvar _zstd;\nvar KTX2Loader = /*#__PURE__*/function (_Loader) {\n  _inherits(KTX2Loader, _Loader);\n  var _super = _createSuper(KTX2Loader);\n  function KTX2Loader(manager) {\n    var _this;\n    _classCallCheck(this, KTX2Loader);\n    _this = _super.call(this, manager);\n    _this.transcoderPath = '';\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerPool = new WorkerPool();\n    _this.workerSourceURL = '';\n    _this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n    return _this;\n  }\n  _createClass(KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(num) {\n      this.workerPool.setWorkerLimit(num);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n      if (renderer.capabilities.isWebGL2) {\n        // https://github.com/mrdoob/three.js/pull/22928\n        this.workerConfig.etc1Supported = false;\n      }\n      return this;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n      if (!this.transcoderPending) {\n        // Load transcoder wrapper.\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType('arraybuffer');\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent = _ref2[0],\n            binaryContent = _ref2[1];\n          var fn = KTX2Loader.BasisWorker.toString();\n          var body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n          _this2.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this2.transcoderBinary = binaryContent;\n          _this2.workerPool.setWorkerCreator(function () {\n            var worker = new Worker(_this2.workerSourceURL);\n            var transcoderBinary = _this2.transcoderBinary.slice(0);\n            worker.postMessage({\n              type: 'init',\n              config: _this2.workerConfig,\n              transcoderBinary: transcoderBinary\n            }, [transcoderBinary]);\n            return worker;\n          });\n        });\n        if (_activeLoaders > 0) {\n          // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n          console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n        }\n        _activeLoaders++;\n      }\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this3 = this;\n      if (this.workerConfig === null) {\n        throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n      }\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this3._createTexture(buffer).then(function (texture) {\n          return onLoad ? onLoad(texture) : null;\n        }).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"_createTextureFrom\",\n    value: function _createTextureFrom(transcodeResult) {\n      var mipmaps = transcodeResult.mipmaps,\n        width = transcodeResult.width,\n        height = transcodeResult.height,\n        format = transcodeResult.format,\n        type = transcodeResult.type,\n        error = transcodeResult.error,\n        dfdTransferFn = transcodeResult.dfdTransferFn,\n        dfdFlags = transcodeResult.dfdFlags;\n      if (type === 'error') return Promise.reject(error);\n      var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n      return texture;\n    }\n    /**\n     * @param {ArrayBuffer} buffer\n     * @param {object?} config\n     * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n     */\n  }, {\n    key: \"_createTexture\",\n    value: function _createTexture(buffer) {\n      var _this4 = this;\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var container = read(new Uint8Array(buffer));\n      if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n        return createDataTexture(container);\n      } //\n\n      var taskConfig = config;\n      var texturePending = this.init().then(function () {\n        return _this4.workerPool.postMessage({\n          type: 'transcode',\n          buffer: buffer,\n          taskConfig: taskConfig\n        }, [buffer]);\n      }).then(function (e) {\n        return _this4._createTextureFrom(e.data);\n      }); // Cache the task result.\n\n      _taskCache.set(buffer, {\n        promise: texturePending\n      });\n      return texturePending;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workerPool.dispose();\n      if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n      _activeLoaders--;\n      return this;\n    }\n  }]);\n  return KTX2Loader;\n}(Loader); /* CONSTANTS */\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    var message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(function () {\n          try {\n            var _transcode = transcode(message.buffer),\n              width = _transcode.width,\n              height = _transcode.height,\n              hasAlpha = _transcode.hasAlpha,\n              mipmaps = _transcode.mipmaps,\n              format = _transcode.format,\n              dfdTransferFn = _transcode.dfdTransferFn,\n              dfdFlags = _transcode.dfdFlags;\n            var buffers = [];\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format,\n              dfdTransferFn: dfdTransferFn,\n              dfdFlags: dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(function () {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n  function transcode(buffer) {\n    var ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n    var basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = ktx2File.getWidth();\n    var height = ktx2File.getHeight();\n    var levels = ktx2File.getLevels();\n    var hasAlpha = ktx2File.getHasAlpha();\n    var dfdTransferFn = ktx2File.getDFDTransferFunc();\n    var dfdFlags = ktx2File.getDFDFlags();\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n      transcoderFormat = _getTranscoderFormat.transcoderFormat,\n      engineFormat = _getTranscoderFormat.engineFormat;\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n    var mipmaps = [];\n    for (var mip = 0; mip < levels; mip++) {\n      var levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      var mipWidth = levelInfo.origWidth;\n      var mipHeight = levelInfo.origHeight;\n      var dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      var status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat,\n      dfdTransferFn: dfdTransferFn,\n      dfdFlags: dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n  var FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\nvar FORMAT_MAP = (_FORMAT_MAP = {}, _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_UNORM, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_SRGB, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_UNORM, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_SRGB, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_SRGB, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_UNORM, RedFormat), _FORMAT_MAP);\nvar TYPE_MAP = (_TYPE_MAP = {}, _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_UNORM, UnsignedByteType), _TYPE_MAP);\nvar ENCODING_MAP = (_ENCODING_MAP = {}, _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8B8A8_SRGB, sRGBEncoding), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8_SRGB, sRGBEncoding), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8_SRGB, sRGBEncoding), _ENCODING_MAP);\nfunction createDataTexture(_x) {\n  return _createDataTexture.apply(this, arguments);\n}\nfunction _createDataTexture() {\n  _createDataTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(container) {\n    var vkFormat, pixelWidth, pixelHeight, pixelDepth, level, levelData, view, texture;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            vkFormat = container.vkFormat, pixelWidth = container.pixelWidth, pixelHeight = container.pixelHeight, pixelDepth = container.pixelDepth;\n            if (!(FORMAT_MAP[vkFormat] === undefined)) {\n              _context2.next = 3;\n              break;\n            }\n            throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n          case 3:\n            //\n            level = container.levels[0];\n            if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE)) {\n              _context2.next = 8;\n              break;\n            }\n            levelData = level.levelData;\n            _context2.next = 16;\n            break;\n          case 8:\n            if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD)) {\n              _context2.next = 15;\n              break;\n            }\n            if (!_zstd) {\n              _zstd = new Promise( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve) {\n                  var zstd;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          zstd = new ZSTDDecoder();\n                          _context.next = 3;\n                          return zstd.init();\n                        case 3:\n                          resolve(zstd);\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n                return function (_x2) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n            }\n            _context2.next = 12;\n            return _zstd;\n          case 12:\n            levelData = _context2.sent.decode(level.levelData, level.uncompressedByteLength);\n            _context2.next = 16;\n            break;\n          case 15:\n            throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n          case 16:\n            if (TYPE_MAP[vkFormat] === FloatType) {\n              view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n            } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n              view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n            } else {\n              view = levelData;\n            } //\n            texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n            texture.type = TYPE_MAP[vkFormat];\n            texture.format = FORMAT_MAP[vkFormat];\n            texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n            texture.needsUpdate = true; //\n            return _context2.abrupt(\"return\", Promise.resolve(texture));\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createDataTexture.apply(this, arguments);\n}\nexport { KTX2Loader };","map":{"version":3,"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","sRGBEncoding","LinearEncoding","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FloatType","HalfFloatType","DataTexture","Data3DTexture","RGFormat","RedFormat","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","ZSTDDecoder","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","path","num","setWorkerLimit","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","url","onLoad","onProgress","onError","Error","loader","load","buffer","cachedTask","get","promise","catch","_createTexture","texture","transcodeResult","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","minFilter","length","magFilter","generateMipmaps","needsUpdate","encoding","premultiplyAlpha","container","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","init","e","_createTextureFrom","data","set","dispose","revokeObjectURL","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","transcode","hasAlpha","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","undefined","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","getTranscoderFormat","transcoderFormat","engineFormat","startTranscoding","mip","levelInfo","getImageLevelInfo","mipWidth","origWidth","mipHeight","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","value","FORMAT_MAP","TYPE_MAP","ENCODING_MAP","pixelWidth","pixelHeight","pixelDepth","level","supercompressionScheme","levelData","zstd","decode","uncompressedByteLength","view","Float32Array","byteOffset","byteLength","BYTES_PER_ELEMENT","Uint16Array"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false;\n    }\n\n    return this;\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n\n      _activeLoaders++;\n    }\n\n    return this.transcoderPending;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n\n  _createTextureFrom(transcodeResult) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n   */\n\n\n  _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    } //\n\n\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data)); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      const mipWidth = levelInfo.origWidth;\n      const mipHeight = levelInfo.origHeight;\n      const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8G8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8_SRGB]: sRGBEncoding\n};\n\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  } //\n\n\n  const level = container.levels[0];\n  let levelData;\n  let view;\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n  }\n\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  } //\n\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n  texture.needsUpdate = true; //\n\n  return Promise.resolve(texture);\n}\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}