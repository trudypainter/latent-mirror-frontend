{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\nvar NRRDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(NRRDLoader, _Loader);\n  var _super = _createSuper(NRRDLoader);\n  function NRRDLoader(manager) {\n    _classCallCheck(this, NRRDLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(NRRDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n      var _data = data;\n      var _dataPointer = 0;\n      var _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n      var _littleEndian = true;\n      var headerObject = {};\n      function scan(type, chunks) {\n        if (chunks === undefined || chunks === null) {\n          chunks = 1;\n        }\n        var _chunkSize = 1;\n        var _array_type = Uint8Array;\n        switch (type) {\n          // 1 byte data types\n          case 'uchar':\n            break;\n          case 'schar':\n            _array_type = Int8Array;\n            break;\n          // 2 byte data types\n\n          case 'ushort':\n            _array_type = Uint16Array;\n            _chunkSize = 2;\n            break;\n          case 'sshort':\n            _array_type = Int16Array;\n            _chunkSize = 2;\n            break;\n          // 4 byte data types\n\n          case 'uint':\n            _array_type = Uint32Array;\n            _chunkSize = 4;\n            break;\n          case 'sint':\n            _array_type = Int32Array;\n            _chunkSize = 4;\n            break;\n          case 'float':\n            _array_type = Float32Array;\n            _chunkSize = 4;\n            break;\n          case 'complex':\n            _array_type = Float64Array;\n            _chunkSize = 8;\n            break;\n          case 'double':\n            _array_type = Float64Array;\n            _chunkSize = 8;\n            break;\n        } // increase the data pointer in-place\n\n        var _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n        if (_nativeLittleEndian != _littleEndian) {\n          // we need to flip here since the format doesn't match the native endianness\n          _bytes = flipEndianness(_bytes, _chunkSize);\n        }\n        if (chunks == 1) {\n          // if only one chunk was requested, just return one value\n          return _bytes[0];\n        } // return the byte array\n\n        return _bytes;\n      } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n      function flipEndianness(array, chunkSize) {\n        var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n        for (var _i2 = 0; _i2 < array.byteLength; _i2 += chunkSize) {\n          for (var j = _i2 + chunkSize - 1, k = _i2; j > k; j--, k++) {\n            var tmp = u8[k];\n            u8[k] = u8[j];\n            u8[j] = tmp;\n          }\n        }\n        return array;\n      } //parse the header\n\n      function parseHeader(header) {\n        var data, field, fn, i, l, m, _i, _len;\n        var lines = header.split(/\\r?\\n/);\n        for (_i = 0, _len = lines.length; _i < _len; _i++) {\n          l = lines[_i];\n          if (l.match(/NRRD\\d+/)) {\n            headerObject.isNrrd = true;\n          } else if (l.match(/^#/)) ;else if (m = l.match(/(.*):(.*)/)) {\n            field = m[1].trim();\n            data = m[2].trim();\n            fn = _fieldFunctions[field];\n            if (fn) {\n              fn.call(headerObject, data);\n            } else {\n              headerObject[field] = data;\n            }\n          }\n        }\n        if (!headerObject.isNrrd) {\n          throw new Error('Not an NRRD file');\n        }\n        if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n          throw new Error('Bzip is not supported');\n        }\n        if (!headerObject.vectors) {\n          //if no space direction is set, let's use the identity\n          headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n          if (headerObject.spacings) {\n            for (i = 0; i <= 2; i++) {\n              if (!isNaN(headerObject.spacings[i])) {\n                headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n              }\n            }\n          }\n        }\n      } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n      function parseDataAsText(data, start, end) {\n        var number = '';\n        start = start || 0;\n        end = end || data.length;\n        var value; //length of the result is the product of the sizes\n\n        var lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n          return previous * current;\n        }, 1);\n        var base = 10;\n        if (headerObject.encoding === 'hex') {\n          base = 16;\n        }\n        var result = new headerObject.__array(lengthOfTheResult);\n        var resultIndex = 0;\n        var parsingFunction = parseInt;\n        if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n          parsingFunction = parseFloat;\n        }\n        for (var _i3 = start; _i3 < end; _i3++) {\n          value = data[_i3]; //if value is not a space\n\n          if ((value < 9 || value > 13) && value !== 32) {\n            number += String.fromCharCode(value);\n          } else {\n            if (number !== '') {\n              result[resultIndex] = parsingFunction(number, base);\n              resultIndex++;\n            }\n            number = '';\n          }\n        }\n        if (number !== '') {\n          result[resultIndex] = parsingFunction(number, base);\n          resultIndex++;\n        }\n        return result;\n      }\n      var _bytes = scan('uchar', data.byteLength);\n      var _length = _bytes.length;\n      var _header = null;\n      var _data_start = 0;\n      var i;\n      for (i = 1; i < _length; i++) {\n        if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n          // we found two line breaks in a row\n          // now we know what the header is\n          _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n          _data_start = i + 1;\n          break;\n        }\n      } // parse the header\n\n      parseHeader(_header);\n      _data = _bytes.subarray(_data_start); // the data without header\n\n      if (headerObject.encoding.substring(0, 2) === 'gz') {\n        // we need to decompress the datastream\n        // here we start the unzipping and get a typed Uint8Array back\n        _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n      } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n        _data = parseDataAsText(_data);\n      } else if (headerObject.encoding === 'raw') {\n        //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n        var _copy = new Uint8Array(_data.length);\n        for (var _i4 = 0; _i4 < _data.length; _i4++) {\n          _copy[_i4] = _data[_i4];\n        }\n        _data = _copy;\n      } // .. let's use the underlying array buffer\n\n      _data = _data.buffer;\n      var volume = new Volume();\n      volume.header = headerObject; //\n      // parse the (unzipped) data to a datastream of the correct type\n      //\n\n      volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n      var min_max = volume.computeMinMax();\n      var min = min_max[0];\n      var max = min_max[1]; // attach the scalar range to the volume\n\n      volume.windowLow = min;\n      volume.windowHigh = max; // get the image dimensions\n\n      volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n      volume.xLength = volume.dimensions[0];\n      volume.yLength = volume.dimensions[1];\n      volume.zLength = volume.dimensions[2]; // spacing\n\n      var spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n      var spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n      var spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n      volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n      volume.matrix = new Matrix4();\n      var _spaceX = 1;\n      var _spaceY = 1;\n      var _spaceZ = 1;\n      if (headerObject.space == 'left-posterior-superior') {\n        _spaceX = -1;\n        _spaceY = -1;\n      } else if (headerObject.space === 'left-anterior-superior') {\n        _spaceX = -1;\n      }\n      if (!headerObject.vectors) {\n        volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n      } else {\n        var v = headerObject.vectors;\n        volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n      }\n      volume.inverseMatrix = new Matrix4();\n      volume.inverseMatrix.copy(volume.matrix).invert();\n      volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n      // only if the threshold was not already set\n\n      if (volume.lowerThreshold === -Infinity) {\n        volume.lowerThreshold = min;\n      }\n      if (volume.upperThreshold === Infinity) {\n        volume.upperThreshold = max;\n      }\n      return volume;\n    }\n  }, {\n    key: \"parseChars\",\n    value: function parseChars(array, start, end) {\n      // without borders, use the whole array\n      if (start === undefined) {\n        start = 0;\n      }\n      if (end === undefined) {\n        end = array.length;\n      }\n      var output = ''; // create and append the chars\n\n      var i = 0;\n      for (i = start; i < end; ++i) {\n        output += String.fromCharCode(array[i]);\n      }\n      return output;\n    }\n  }]);\n  return NRRDLoader;\n}(Loader);\nvar _fieldFunctions = {\n  type: function type(data) {\n    switch (data) {\n      case 'uchar':\n      case 'unsigned char':\n      case 'uint8':\n      case 'uint8_t':\n        this.__array = Uint8Array;\n        break;\n      case 'signed char':\n      case 'int8':\n      case 'int8_t':\n        this.__array = Int8Array;\n        break;\n      case 'short':\n      case 'short int':\n      case 'signed short':\n      case 'signed short int':\n      case 'int16':\n      case 'int16_t':\n        this.__array = Int16Array;\n        break;\n      case 'ushort':\n      case 'unsigned short':\n      case 'unsigned short int':\n      case 'uint16':\n      case 'uint16_t':\n        this.__array = Uint16Array;\n        break;\n      case 'int':\n      case 'signed int':\n      case 'int32':\n      case 'int32_t':\n        this.__array = Int32Array;\n        break;\n      case 'uint':\n      case 'unsigned int':\n      case 'uint32':\n      case 'uint32_t':\n        this.__array = Uint32Array;\n        break;\n      case 'float':\n        this.__array = Float32Array;\n        break;\n      case 'double':\n        this.__array = Float64Array;\n        break;\n      default:\n        throw new Error('Unsupported NRRD data type: ' + data);\n    }\n    return this.type = data;\n  },\n  endian: function endian(data) {\n    return this.endian = data;\n  },\n  encoding: function encoding(data) {\n    return this.encoding = data;\n  },\n  dimension: function dimension(data) {\n    return this.dim = parseInt(data, 10);\n  },\n  sizes: function sizes(data) {\n    var i;\n    return this.sizes = function () {\n      var _ref = data.split(/\\s+/);\n      var _results = [];\n      for (var _i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n        _results.push(parseInt(i, 10));\n      }\n      return _results;\n    }();\n  },\n  space: function space(data) {\n    return this.space = data;\n  },\n  'space origin': function spaceOrigin(data) {\n    return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n  },\n  'space directions': function spaceDirections(data) {\n    var f, v;\n    var parts = data.match(/\\(.*?\\)/g);\n    return this.vectors = function () {\n      var _results = [];\n      for (var _i = 0, _len = parts.length; _i < _len; _i++) {\n        v = parts[_i];\n        _results.push(function () {\n          var _ref = v.slice(1, -1).split(/,/);\n          var _results2 = [];\n          for (var _j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n            f = _ref[_j];\n            _results2.push(parseFloat(f));\n          }\n          return _results2;\n        }());\n      }\n      return _results;\n    }();\n  },\n  spacings: function spacings(data) {\n    var f;\n    var parts = data.split(/\\s+/);\n    return this.spacings = function () {\n      var _results = [];\n      for (var _i = 0, _len = parts.length; _i < _len; _i++) {\n        f = parts[_i];\n        _results.push(parseFloat(f));\n      }\n      return _results;\n    }();\n  }\n};\nexport { NRRDLoader };","map":{"version":3,"names":["Loader","FileLoader","Vector3","Matrix4","gunzipSync","Volume","NRRDLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","data","parse","e","console","error","itemError","_data","_dataPointer","_nativeLittleEndian","Int8Array","Int16Array","buffer","_littleEndian","headerObject","scan","type","chunks","undefined","_chunkSize","_array_type","Uint8Array","Uint16Array","Uint32Array","Int32Array","Float32Array","Float64Array","_bytes","slice","flipEndianness","array","chunkSize","u8","byteOffset","byteLength","i","j","k","tmp","parseHeader","header","field","fn","l","m","_i","_len","lines","split","length","match","isNrrd","trim","_fieldFunctions","call","Error","encoding","vectors","spacings","isNaN","multiplyScalar","parseDataAsText","start","end","number","value","lengthOfTheResult","sizes","reduce","previous","current","base","result","__array","resultIndex","parsingFunction","parseInt","parseFloat","String","fromCharCode","_length","_header","_data_start","parseChars","subarray","substring","_copy","volume","min_max","computeMinMax","min","max","windowLow","windowHigh","dimensions","xLength","yLength","zLength","spacingX","spacingY","spacingZ","spacing","matrix","_spaceX","_spaceY","_spaceZ","space","set","v","inverseMatrix","copy","invert","RASDimensions","applyMatrix4","round","toArray","map","Math","abs","lowerThreshold","Infinity","upperThreshold","output","endian","dimension","dim","_ref","_results","push","space_origin","f","parts","_results2","_j","_len2"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/NRRDLoader.js"],"sourcesContent":["import { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\n\nclass NRRDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n    let _data = data;\n    let _dataPointer = 0;\n\n    const _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n\n    const _littleEndian = true;\n    const headerObject = {};\n\n    function scan(type, chunks) {\n      if (chunks === undefined || chunks === null) {\n        chunks = 1;\n      }\n\n      let _chunkSize = 1;\n      let _array_type = Uint8Array;\n\n      switch (type) {\n        // 1 byte data types\n        case 'uchar':\n          break;\n\n        case 'schar':\n          _array_type = Int8Array;\n          break;\n        // 2 byte data types\n\n        case 'ushort':\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n\n        case 'sshort':\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        // 4 byte data types\n\n        case 'uint':\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'sint':\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'float':\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'complex':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n\n        case 'double':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      } // increase the data pointer in-place\n\n\n      let _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n\n      if (_nativeLittleEndian != _littleEndian) {\n        // we need to flip here since the format doesn't match the native endianness\n        _bytes = flipEndianness(_bytes, _chunkSize);\n      }\n\n      if (chunks == 1) {\n        // if only one chunk was requested, just return one value\n        return _bytes[0];\n      } // return the byte array\n\n\n      return _bytes;\n    } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n\n    function flipEndianness(array, chunkSize) {\n      const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n\n      for (let i = 0; i < array.byteLength; i += chunkSize) {\n        for (let j = i + chunkSize - 1, k = i; j > k; j--, k++) {\n          const tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n\n      return array;\n    } //parse the header\n\n\n    function parseHeader(header) {\n      let data, field, fn, i, l, m, _i, _len;\n\n      const lines = header.split(/\\r?\\n/);\n\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) ; else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data = m[2].trim();\n          fn = _fieldFunctions[field];\n\n          if (fn) {\n            fn.call(headerObject, data);\n          } else {\n            headerObject[field] = data;\n          }\n        }\n      }\n\n      if (!headerObject.isNrrd) {\n        throw new Error('Not an NRRD file');\n      }\n\n      if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n        throw new Error('Bzip is not supported');\n      }\n\n      if (!headerObject.vectors) {\n        //if no space direction is set, let's use the identity\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n        if (headerObject.spacings) {\n          for (i = 0; i <= 2; i++) {\n            if (!isNaN(headerObject.spacings[i])) {\n              headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n            }\n          }\n        }\n      }\n    } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n\n    function parseDataAsText(data, start, end) {\n      let number = '';\n      start = start || 0;\n      end = end || data.length;\n      let value; //length of the result is the product of the sizes\n\n      const lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      let base = 10;\n\n      if (headerObject.encoding === 'hex') {\n        base = 16;\n      }\n\n      const result = new headerObject.__array(lengthOfTheResult);\n      let resultIndex = 0;\n      let parsingFunction = parseInt;\n\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n\n      for (let i = start; i < end; i++) {\n        value = data[i]; //if value is not a space\n\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== '') {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n\n          number = '';\n        }\n      }\n\n      if (number !== '') {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n\n      return result;\n    }\n\n    const _bytes = scan('uchar', data.byteLength);\n\n    const _length = _bytes.length;\n    let _header = null;\n    let _data_start = 0;\n    let i;\n\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        // we found two line breaks in a row\n        // now we know what the header is\n        _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n        _data_start = i + 1;\n        break;\n      }\n    } // parse the header\n\n\n    parseHeader(_header);\n    _data = _bytes.subarray(_data_start); // the data without header\n\n    if (headerObject.encoding.substring(0, 2) === 'gz') {\n      // we need to decompress the datastream\n      // here we start the unzipping and get a typed Uint8Array back\n      _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n    } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === 'raw') {\n      //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n      const _copy = new Uint8Array(_data.length);\n\n      for (let i = 0; i < _data.length; i++) {\n        _copy[i] = _data[i];\n      }\n\n      _data = _copy;\n    } // .. let's use the underlying array buffer\n\n\n    _data = _data.buffer;\n    const volume = new Volume();\n    volume.header = headerObject; //\n    // parse the (unzipped) data to a datastream of the correct type\n    //\n\n    volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n    const min_max = volume.computeMinMax();\n    const min = min_max[0];\n    const max = min_max[1]; // attach the scalar range to the volume\n\n    volume.windowLow = min;\n    volume.windowHigh = max; // get the image dimensions\n\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2]; // spacing\n\n    const spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    const spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    const spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n    volume.matrix = new Matrix4();\n    let _spaceX = 1;\n    let _spaceY = 1;\n    const _spaceZ = 1;\n\n    if (headerObject.space == 'left-posterior-superior') {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === 'left-anterior-superior') {\n      _spaceX = -1;\n    }\n\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      const v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n    // only if the threshold was not already set\n\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n\n    return volume;\n  }\n\n  parseChars(array, start, end) {\n    // without borders, use the whole array\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = array.length;\n    }\n\n    let output = ''; // create and append the chars\n\n    let i = 0;\n\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n\n    return output;\n  }\n\n}\n\nconst _fieldFunctions = {\n  type: function (data) {\n    switch (data) {\n      case 'uchar':\n      case 'unsigned char':\n      case 'uint8':\n      case 'uint8_t':\n        this.__array = Uint8Array;\n        break;\n\n      case 'signed char':\n      case 'int8':\n      case 'int8_t':\n        this.__array = Int8Array;\n        break;\n\n      case 'short':\n      case 'short int':\n      case 'signed short':\n      case 'signed short int':\n      case 'int16':\n      case 'int16_t':\n        this.__array = Int16Array;\n        break;\n\n      case 'ushort':\n      case 'unsigned short':\n      case 'unsigned short int':\n      case 'uint16':\n      case 'uint16_t':\n        this.__array = Uint16Array;\n        break;\n\n      case 'int':\n      case 'signed int':\n      case 'int32':\n      case 'int32_t':\n        this.__array = Int32Array;\n        break;\n\n      case 'uint':\n      case 'unsigned int':\n      case 'uint32':\n      case 'uint32_t':\n        this.__array = Uint32Array;\n        break;\n\n      case 'float':\n        this.__array = Float32Array;\n        break;\n\n      case 'double':\n        this.__array = Float64Array;\n        break;\n\n      default:\n        throw new Error('Unsupported NRRD data type: ' + data);\n    }\n\n    return this.type = data;\n  },\n  endian: function (data) {\n    return this.endian = data;\n  },\n  encoding: function (data) {\n    return this.encoding = data;\n  },\n  dimension: function (data) {\n    return this.dim = parseInt(data, 10);\n  },\n  sizes: function (data) {\n    let i;\n    return this.sizes = function () {\n      const _ref = data.split(/\\s+/);\n\n      const _results = [];\n\n      for (let _i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n\n        _results.push(parseInt(i, 10));\n      }\n\n      return _results;\n    }();\n  },\n  space: function (data) {\n    return this.space = data;\n  },\n  'space origin': function (data) {\n    return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n  },\n  'space directions': function (data) {\n    let f, v;\n    const parts = data.match(/\\(.*?\\)/g);\n    return this.vectors = function () {\n      const _results = [];\n\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        v = parts[_i];\n\n        _results.push(function () {\n          const _ref = v.slice(1, -1).split(/,/);\n\n          const _results2 = [];\n\n          for (let _j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n            f = _ref[_j];\n\n            _results2.push(parseFloat(f));\n          }\n\n          return _results2;\n        }());\n      }\n\n      return _results;\n    }();\n  },\n  spacings: function (data) {\n    let f;\n    const parts = data.split(/\\s+/);\n    return this.spacings = function () {\n      const _results = [];\n\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        f = parts[_i];\n\n        _results.push(parseFloat(f));\n      }\n\n      return _results;\n    }();\n  }\n};\n\nexport { NRRDLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}