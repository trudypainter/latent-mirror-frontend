{"ast":null,"code":"import { AmbientLight, AnimationClip, Bone, BufferGeometry, ClampToEdgeWrapping, Color, DirectionalLight, EquirectangularReflectionMapping, Euler, FileLoader, Float32BufferAttribute, Group, Line, LineBasicMaterial, Loader, LoaderUtils, MathUtils, Matrix3, Matrix4, Mesh, MeshLambertMaterial, MeshPhongMaterial, NumberKeyframeTrack, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, PropertyBinding, Quaternion, QuaternionKeyframeTrack, RepeatWrapping, Skeleton, SkinnedMesh, SpotLight, Texture, TextureLoader, Uint16BufferAttribute, Vector3, Vector4, VectorKeyframeTrack, sRGBEncoding } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    }\n\n    // console.log( fbxTree );\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  }\n\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = new Map();\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  }\n\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n\n        // raw image data is in videoNode.Content\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n    return images;\n  }\n\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n      case 'png':\n        type = 'image/png';\n        break;\n      case 'tif':\n        type = 'image/tiff';\n        break;\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n        type = 'image/tga';\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === 'string') {\n      // ASCII format\n\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  }\n\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = new Map();\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  }\n\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n    // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    if ('Translation' in textureNode) {\n      const values = textureNode.Translation.value;\n      texture.offset.x = values[0];\n      texture.offset.y = values[1];\n    }\n    return texture;\n  }\n\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  }\n\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  }\n\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel;\n\n    // Case where FBX wraps shading model in property object.\n    if (typeof type === 'object') {\n      type = type.value;\n    }\n\n    // Ignore unused materials which don't have any connections.\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  }\n\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          if (parameters.map !== undefined) {\n            parameters.map.encoding = sRGBEncoding;\n          }\n          break;\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.emissiveMap !== undefined) {\n            parameters.emissiveMap.encoding = sRGBEncoding;\n          }\n          break;\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n          }\n          break;\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.specularMap !== undefined) {\n            parameters.specularMap.encoding = sRGBEncoding;\n          }\n          break;\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n        case 'SpecularFactor': // AKA specularLevel\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  }\n\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  }\n\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  }\n\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  }\n\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  }\n\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse();\n\n    // if all the models where already combined in a single group, just return that\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  }\n\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink);\n\n            // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone;\n\n            // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  }\n\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n      let farClippingPlane = 1000;\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  }\n\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type;\n\n      // LightType can be undefined for Point lights\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 0xffffff;\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\n\n      // light disabled\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      }\n\n      // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n      const decay = 1;\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = [];\n\n    // get geometry and materials(s) from connections\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null);\n\n    // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  }\n\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value;\n\n            // DirectionalLight, SpotLight\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  }\n\n  // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n    return geometryMap;\n  }\n\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n        break;\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n        break;\n    }\n  }\n\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    });\n\n    // don't create geometry if it is not associated with any models\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    });\n\n    // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  }\n\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4));\n\n      // used later to bind the skeleton to the model\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString();\n\n      // the first uv buffer is just called 'uv'\n      if (i === 0) {\n        name = 'uv';\n      }\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      });\n\n      // the loop above doesn't add the last group, do that here.\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      }\n\n      // case where there are multiple materials but the whole geometry is only\n      // using one of them\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false;\n\n    // these will hold data for a single face\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false;\n\n      // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        }\n\n        // if the weight array is shorter than 4 pad with 0s\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        if (materialIndex < 0) {\n          console.warn('THREE.FBXLoader: Invalid material index:', materialIndex);\n          materialIndex = 0;\n        }\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0;\n\n        // reset arrays for the next face\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  }\n\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = [];\n    // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  }\n\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    }\n\n    // TODO: add morph normal support\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  }\n\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  }\n\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  }\n\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  }\n\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a;\n\n    // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  }\n\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve;\n\n    // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID);\n\n            // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4();\n\n                  // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID;\n\n                // assuming geometry is not used in more than one model\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack;\n\n    // connect the stacks (clips) up to the layers\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  }\n\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = [];\n\n    // first join together the times for each axis, if defined\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times);\n\n    // then sort them\n    times = times.sort(function (a, b) {\n      return a - b;\n    });\n\n    // and remove duplicates\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time);\n\n      // if there is an x value defined for this frame, use that\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  }\n\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode();\n\n    // a top node\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = '',\n      type = '';\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\n\n    // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    }\n\n    // Connections\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    }\n\n    // Node\n    if (propName === 'Node') currentNode.id = propValue;\n\n    // connections\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName);\n\n    // convert string to array, unless it ends in ',' in which case more will be added to it\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line;\n\n    // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  }\n\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4];\n\n    // cast values where needed, otherwise leave as strings\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    }\n\n    // CAUTION: these props must append to parent's parent\n    this.getPrevNode()[innerPropName] = {\n      'type': innerPropType1,\n      'type2': innerPropType2,\n      'flag': innerPropFlag,\n      'value': innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n    return allNodes;\n  }\n\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  }\n\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {};\n\n    // The first three data sizes depends on version.\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen);\n\n    // Regards this node as NULL-record if endOffset is zero\n    if (endOffset === 0) return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    }\n\n    // Regards the first three elements in propertyList as id, attrName, and attrType\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : '';\n\n    // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      }\n\n      // this will be copied to parent, see above\n      node[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n      case 'D':\n        return reader.getFloat64();\n      case 'F':\n        return reader.getFloat32();\n      case 'I':\n        return reader.getInt32();\n      case 'L':\n        return reader.getInt64();\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n      case 'Y':\n        return reader.getInt16();\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        if (typeof fflate === 'undefined') {\n          console.error('THREE.FBXLoader: External library fflate.min.js required.');\n        }\n        const data = fflate.unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n        break;\n      // cannot happen but is required by the DeepScan\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  }\n\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    // calculate negative value\n    if (high & 0x80000000) {\n      high = ~high & 0xFFFFFFFF;\n      low = ~low & 0xFFFFFFFF;\n      if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n      low = low + 1 & 0xFFFFFFFF;\n      return -(high * 0x100000000 + low);\n    }\n    return high * 0x100000000 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  }\n\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 0x100000000 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\nconst dataArray = [];\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = new Euler();\nconst tempVec = new Vector3();\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder || Euler.DefaultOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder || Euler.DefaultOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder || Euler.DefaultOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));\n\n  // Pivots and offsets\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n\n  // parent transform\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  // Global Rotation\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n\n  // Global Shear*Scaling\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  // Calculate the local transform matrix\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n\n  // from global to local\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX',\n  // -> XYZ extrinsic\n  'YZX',\n  // -> XZY extrinsic\n  'XZY',\n  // -> YZX extrinsic\n  'ZXY',\n  // -> YXZ extrinsic\n  'YXZ',\n  // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n  return enums[order];\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\n\n// inject array a2 into array a1 at index\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"names":["AmbientLight","AnimationClip","Bone","BufferGeometry","ClampToEdgeWrapping","Color","DirectionalLight","EquirectangularReflectionMapping","Euler","FileLoader","Float32BufferAttribute","Group","Line","LineBasicMaterial","Loader","LoaderUtils","MathUtils","Matrix3","Matrix4","Mesh","MeshLambertMaterial","MeshPhongMaterial","NumberKeyframeTrack","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","PropertyBinding","Quaternion","QuaternionKeyframeTrack","RepeatWrapping","Skeleton","SkinnedMesh","SpotLight","Texture","TextureLoader","Uint16BufferAttribute","Vector3","Vector4","VectorKeyframeTrack","sRGBEncoding","fflate","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","Translation","offset","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","unzlibSync","reader2","littleEndian","dv","DataView","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","DefaultOrder","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three/examples/jsm/loaders/FBXLoader.js"],"sourcesContent":["import {\n\tAmbientLight,\n\tAnimationClip,\n\tBone,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tDirectionalLight,\n\tEquirectangularReflectionMapping,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLine,\n\tLineBasicMaterial,\n\tLoader,\n\tLoaderUtils,\n\tMathUtils,\n\tMatrix3,\n\tMatrix4,\n\tMesh,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tPropertyBinding,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTexture,\n\tTextureLoader,\n\tUint16BufferAttribute,\n\tVector3,\n\tVector4,\n\tVectorKeyframeTrack,\n\tsRGBEncoding\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( FBXBuffer, path ) {\n\n\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t} else {\n\n\t\t\tconst FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t}\n\n\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t}\n\n\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t}\n\n\t\t// console.log( fbxTree );\n\n\t\tconst textureLoader = new TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\treturn new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );\n\n\t}\n\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n\n\tconstructor( textureLoader, manager ) {\n\n\t\tthis.textureLoader = textureLoader;\n\t\tthis.manager = manager;\n\n\t}\n\n\tparse() {\n\n\t\tconnections = this.parseConnections();\n\n\t\tconst images = this.parseImages();\n\t\tconst textures = this.parseTextures( images );\n\t\tconst materials = this.parseMaterials( textures );\n\t\tconst deformers = this.parseDeformers();\n\t\tconst geometryMap = new GeometryParser().parse( deformers );\n\n\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\treturn sceneGraph;\n\n\t}\n\n\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t// and details the connection type\n\tparseConnections() {\n\n\t\tconst connectionMap = new Map();\n\n\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\tconst rawConnections = fbxTree.Connections.connections;\n\n\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\tconst fromID = rawConnection[ 0 ];\n\t\t\t\tconst toID = rawConnection[ 1 ];\n\t\t\t\tconst relationship = rawConnection[ 2 ];\n\n\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn connectionMap;\n\n\t}\n\n\t// Parse FBXTree.Objects.Video for embedded image data\n\t// These images are connected to textures in FBXTree.Objects.Textures\n\t// via FBXTree.Connections.\n\tparseImages() {\n\n\t\tconst images = {};\n\t\tconst blobs = {};\n\n\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\tconst videoNodes = fbxTree.Objects.Video;\n\n\t\t\tfor ( const nodeID in videoNodes ) {\n\n\t\t\t\tconst videoNode = videoNodes[ nodeID ];\n\n\t\t\t\tconst id = parseInt( nodeID );\n\n\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\tconst arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\tconst base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\tconst image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const id in images ) {\n\n\t\t\tconst filename = images[ id ];\n\n\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\t// Parse embedded image data in FBXTree.Video.Content\n\tparseImage( videoNode ) {\n\n\t\tconst content = videoNode.Content;\n\t\tconst fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\tconst extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\tlet type;\n\n\t\tswitch ( extension ) {\n\n\t\t\tcase 'bmp':\n\n\t\t\t\ttype = 'image/bmp';\n\t\t\t\tbreak;\n\n\t\t\tcase 'jpg':\n\t\t\tcase 'jpeg':\n\n\t\t\t\ttype = 'image/jpeg';\n\t\t\t\tbreak;\n\n\t\t\tcase 'png':\n\n\t\t\t\ttype = 'image/png';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tif':\n\n\t\t\t\ttype = 'image/tiff';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tga':\n\n\t\t\t\tif ( this.manager.getHandler( '.tga' ) === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\n\n\t\t\t\t}\n\n\t\t\t\ttype = 'image/tga';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t} else { // Binary Format\n\n\t\t\tconst array = new Uint8Array( content );\n\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t}\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Texture\n\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t// to images in FBXTree.Objects.Video\n\tparseTextures( images ) {\n\n\t\tconst textureMap = new Map();\n\n\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\tconst textureNodes = fbxTree.Objects.Texture;\n\t\t\tfor ( const nodeID in textureNodes ) {\n\n\t\t\t\tconst texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textureMap;\n\n\t}\n\n\t// Parse individual node in FBXTree.Objects.Texture\n\tparseTexture( textureNode, images ) {\n\n\t\tconst texture = this.loadTexture( textureNode, images );\n\n\t\ttexture.ID = textureNode.id;\n\n\t\ttexture.name = textureNode.attrName;\n\n\t\tconst wrapModeU = textureNode.WrapModeU;\n\t\tconst wrapModeV = textureNode.WrapModeV;\n\n\t\tconst valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\tconst valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t// 0: repeat(default), 1: clamp\n\n\t\ttexture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\t\ttexture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\tconst values = textureNode.Scaling.value;\n\n\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t}\n\n\t\tif ( 'Translation' in textureNode ) {\n\n\t\t\tconst values = textureNode.Translation.value;\n\n\t\t\ttexture.offset.x = values[ 0 ];\n\t\t\ttexture.offset.y = values[ 1 ];\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\t// load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\tloadTexture( textureNode, images ) {\n\n\t\tlet fileName;\n\n\t\tconst currentPath = this.textureLoader.path;\n\n\t\tconst children = connections.get( textureNode.id ).children;\n\n\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet texture;\n\n\t\tconst extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\tif ( extension === 'tga' ) {\n\n\t\t\tconst loader = this.manager.getHandler( '.tga' );\n\n\t\t\tif ( loader === null ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\ttexture = new Texture();\n\n\t\t\t} else {\n\n\t\t\t\tloader.setPath( this.textureLoader.path );\n\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t}\n\n\t\t} else if ( extension === 'psd' ) {\n\n\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\ttexture = new Texture();\n\n\t\t} else {\n\n\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t}\n\n\t\tthis.textureLoader.setPath( currentPath );\n\n\t\treturn texture;\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Material\n\tparseMaterials( textureMap ) {\n\n\t\tconst materialMap = new Map();\n\n\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\tconst materialNodes = fbxTree.Objects.Material;\n\n\t\t\tfor ( const nodeID in materialNodes ) {\n\n\t\t\t\tconst material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materialMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Material\n\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t// FBX format currently only supports Lambert and Phong shading models\n\tparseMaterial( materialNode, textureMap ) {\n\n\t\tconst ID = materialNode.id;\n\t\tconst name = materialNode.attrName;\n\t\tlet type = materialNode.ShadingModel;\n\n\t\t// Case where FBX wraps shading model in property object.\n\t\tif ( typeof type === 'object' ) {\n\n\t\t\ttype = type.value;\n\n\t\t}\n\n\t\t// Ignore unused materials which don't have any connections.\n\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\tconst parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\tlet material;\n\n\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\tcase 'phong':\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\t\t\tcase 'lambert':\n\t\t\t\tmaterial = new MeshLambertMaterial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tmaterial.setValues( parameters );\n\t\tmaterial.name = name;\n\n\t\treturn material;\n\n\t}\n\n\t// Parse FBX material and return parameters suitable for a three.js material\n\t// Also parse the texture map and return any textures associated with the material\n\tparseParameters( materialNode, textureMap, ID ) {\n\n\t\tconst parameters = {};\n\n\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Diffuse ) {\n\n\t\t\tparameters.color = new Color().fromArray( materialNode.Diffuse.value );\n\n\t\t} else if ( materialNode.DiffuseColor && ( materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\tparameters.color = new Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t}\n\n\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Emissive ) {\n\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.Emissive.value );\n\n\t\t} else if ( materialNode.EmissiveColor && ( materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t}\n\n\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t}\n\n\t\tif ( materialNode.Opacity ) {\n\n\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t}\n\n\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\tparameters.transparent = true;\n\n\t\t}\n\n\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Shininess ) {\n\n\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t}\n\n\t\tif ( materialNode.Specular ) {\n\n\t\t\tparameters.specular = new Color().fromArray( materialNode.Specular.value );\n\n\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\tparameters.specular = new Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t}\n\n\t\tconst scope = this;\n\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\tconst type = child.relationship;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'Bump':\n\t\t\t\t\tparameters.bumpMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Maya|TEX_ao_map':\n\t\t\t\t\tparameters.aoMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DiffuseColor':\n\t\t\t\tcase 'Maya|TEX_color_map':\n\t\t\t\t\tparameters.map = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.map !== undefined ) {\n\n\t\t\t\t\t\tparameters.map.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\tparameters.displacementMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\tparameters.emissiveMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.emissiveMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.emissiveMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NormalMap':\n\t\t\t\tcase 'Maya|TEX_normal_map':\n\t\t\t\t\tparameters.normalMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\tparameters.envMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.envMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.envMap.mapping = EquirectangularReflectionMapping;\n\t\t\t\t\t\tparameters.envMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\tparameters.specularMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.specularMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.specularMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TransparentColor':\n\t\t\t\tcase 'TransparencyFactor':\n\t\t\t\t\tparameters.alphaMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientColor':\n\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn parameters;\n\n\t}\n\n\t// get a texture from the textureMap for use by a material.\n\tgetTexture( textureMap, id ) {\n\n\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t}\n\n\t\treturn textureMap.get( id );\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Deformer\n\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\tparseDeformers() {\n\n\t\tconst skeletons = {};\n\t\tconst morphTargets = {};\n\n\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\tconst DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\tfor ( const nodeID in DeformerNodes ) {\n\n\t\t\t\tconst deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\tconst skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\tconst morphTarget = {\n\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t};\n\n\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tskeletons: skeletons,\n\t\t\tmorphTargets: morphTargets,\n\n\t\t};\n\n\t}\n\n\t// Parse single nodes in FBXTree.Objects.Deformer\n\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t// Each skin node represents a skeleton and each cluster node represents a bone\n\tparseSkeleton( relationships, deformerNodes ) {\n\n\t\tconst rawBones = [];\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst boneNode = deformerNodes[ child.ID ];\n\n\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\tconst rawBone = {\n\n\t\t\t\tID: child.ID,\n\t\t\t\tindices: [],\n\t\t\t\tweights: [],\n\t\t\t\ttransformLink: new Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t// transform: new Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t// linkMode: boneNode.Mode,\n\n\t\t\t};\n\n\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t}\n\n\t\t\trawBones.push( rawBone );\n\n\t\t} );\n\n\t\treturn {\n\n\t\t\trawBones: rawBones,\n\t\t\tbones: []\n\n\t\t};\n\n\t}\n\n\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\tparseMorphTargets( relationships, deformerNodes ) {\n\n\t\tconst rawMorphTargets = [];\n\n\t\tfor ( let i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\tconst child = relationships.children[ i ];\n\n\t\t\tconst morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\tconst rawMorphTarget = {\n\n\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\tid: morphTargetNode.id,\n\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t};\n\n\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\n\n\t\t\t\treturn child.relationship === undefined;\n\n\t\t\t} )[ 0 ].ID;\n\n\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t}\n\n\t\treturn rawMorphTargets;\n\n\t}\n\n\t// create the main Group() to be returned by the loader\n\tparseScene( deformers, geometryMap, materialMap ) {\n\n\t\tsceneGraph = new Group();\n\n\t\tconst modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tconst scope = this;\n\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\tconst modelNode = modelNodes[ model.ID ];\n\t\t\tscope.setLookAtProperties( model, modelNode );\n\n\t\t\tconst parentConnections = connections.get( model.ID ).parents;\n\n\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\tconst parent = modelMap.get( connection.ID );\n\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t} );\n\n\t\t\tif ( model.parent === null ) {\n\n\t\t\t\tsceneGraph.add( model );\n\n\t\t\t}\n\n\n\t\t} );\n\n\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\tthis.createAmbientLight();\n\n\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\tif ( node.userData.transformData ) {\n\n\t\t\t\tif ( node.parent ) {\n\n\t\t\t\t\tnode.userData.transformData.parentMatrix = node.parent.matrix;\n\t\t\t\t\tnode.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n\n\t\t\t\t}\n\n\t\t\t\tconst transform = generateTransform( node.userData.transformData );\n\n\t\t\t\tnode.applyMatrix4( transform );\n\t\t\t\tnode.updateWorldMatrix();\n\n\t\t\t}\n\n\t\t} );\n\n\t\tconst animations = new AnimationParser().parse();\n\n\t\t// if all the models where already combined in a single group, just return that\n\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t}\n\n\t\tsceneGraph.animations = animations;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.Model\n\tparseModels( skeletons, geometryMap, materialMap ) {\n\n\t\tconst modelMap = new Map();\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tfor ( const nodeID in modelNodes ) {\n\n\t\t\tconst id = parseInt( nodeID );\n\t\t\tconst node = modelNodes[ nodeID ];\n\t\t\tconst relationships = connections.get( id );\n\n\t\t\tlet model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\tif ( ! model ) {\n\n\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LimbNode':\n\t\t\t\t\tcase 'Root':\n\t\t\t\t\t\tmodel = new Bone();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Null':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmodel = new Group();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmodel.name = node.attrName ? PropertyBinding.sanitizeNodeName( node.attrName ) : '';\n\n\t\t\t\tmodel.ID = id;\n\n\t\t\t}\n\n\t\t\tthis.getTransformData( model, node );\n\t\t\tmodelMap.set( id, model );\n\n\t\t}\n\n\t\treturn modelMap;\n\n\t}\n\n\tbuildSkeleton( relationships, skeletons, id, name ) {\n\n\t\tlet bone = null;\n\n\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\tfor ( const ID in skeletons ) {\n\n\t\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\tconst subBone = bone;\n\t\t\t\t\t\tbone = new Bone();\n\n\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n\t\t\t\t\t\tbone.name = name ? PropertyBinding.sanitizeNodeName( name ) : '';\n\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn bone;\n\n\t}\n\n\t// create a PerspectiveCamera or OrthographicCamera\n\tcreateCamera( relationships ) {\n\n\t\tlet model;\n\t\tlet cameraAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tcameraAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type = 0;\n\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\ttype = 1;\n\n\t\t\t}\n\n\t\t\tlet nearClippingPlane = 1;\n\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t}\n\n\t\t\tlet farClippingPlane = 1000;\n\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t}\n\n\n\t\t\tlet width = window.innerWidth;\n\t\t\tlet height = window.innerHeight;\n\n\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t}\n\n\t\t\tconst aspect = width / height;\n\n\t\t\tlet fov = 45;\n\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t}\n\n\t\t\tconst focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Perspective\n\t\t\t\t\tmodel = new PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\tmodel = new OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\tmodel = new Object3D();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\t// Create a DirectionalLight, PointLight or SpotLight\n\tcreateLight( relationships ) {\n\n\t\tlet model;\n\t\tlet lightAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tlightAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( lightAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type;\n\n\t\t\t// LightType can be undefined for Point lights\n\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\ttype = 0;\n\n\t\t\t} else {\n\n\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t}\n\n\t\t\tlet color = 0xffffff;\n\n\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\tcolor = new Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t}\n\n\t\t\tlet intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t// light disabled\n\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\tintensity = 0;\n\n\t\t\t}\n\n\t\t\tlet distance = 0;\n\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\tdistance = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\tconst decay = 1;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Point\n\t\t\t\t\tmodel = new PointLight( color, intensity, distance, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Directional\n\t\t\t\t\tmodel = new DirectionalLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // Spot\n\t\t\t\t\tlet angle = Math.PI / 3;\n\n\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\tangle = MathUtils.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet penumbra = 0;\n\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\tpenumbra = MathUtils.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel = new SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.' );\n\t\t\t\t\tmodel = new PointLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\tmodel.castShadow = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateMesh( relationships, geometryMap, materialMap ) {\n\n\t\tlet model;\n\t\tlet geometry = null;\n\t\tlet material = null;\n\t\tconst materials = [];\n\n\t\t// get geometry and materials(s) from connections\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t}\n\n\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( materials.length > 1 ) {\n\n\t\t\tmaterial = materials;\n\n\t\t} else if ( materials.length > 0 ) {\n\n\t\t\tmaterial = materials[ 0 ];\n\n\t\t} else {\n\n\t\t\tmaterial = new MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\tmaterials.push( material );\n\n\t\t}\n\n\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\tmodel = new SkinnedMesh( geometry, material );\n\t\t\tmodel.normalizeSkinWeights();\n\n\t\t} else {\n\n\t\t\tmodel = new Mesh( geometry, material );\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateCurve( relationships, geometryMap ) {\n\n\t\tconst geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\treturn geo;\n\n\t\t}, null );\n\n\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\tconst material = new LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\treturn new Line( geometry, material );\n\n\t}\n\n\t// parse the model node for transform data\n\tgetTransformData( model, modelNode ) {\n\n\t\tconst transformData = {};\n\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\telse transformData.eulerOrder = 'ZYX';\n\n\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\n\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\n\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\n\n\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\n\n\t\tmodel.userData.transformData = transformData;\n\n\t}\n\n\tsetLookAtProperties( model, modelNode ) {\n\n\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\tconst children = connections.get( model.ID ).children;\n\n\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\tconst lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\tconst pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\tmodel.lookAt( new Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tbindSkeleton( skeletons, geometryMap, modelMap ) {\n\n\t\tconst bindMatrices = this.parsePoseNodes();\n\n\t\tfor ( const ID in skeletons ) {\n\n\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\tconst parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\tconst geoID = parent.ID;\n\t\t\t\t\tconst geoRelationships = connections.get( geoID );\n\n\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\tconst model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\tmodel.bind( new Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tparsePoseNodes() {\n\n\t\tconst bindMatrices = {};\n\n\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\tconst BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\tfor ( const nodeID in BindPoseNode ) {\n\n\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' && BindPoseNode[ nodeID ].NbPoseNodes > 0 ) {\n\n\t\t\t\t\tconst poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindMatrices;\n\n\t}\n\n\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\tcreateAmbientLight() {\n\n\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\tconst ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\tconst r = ambientColor[ 0 ];\n\t\t\tconst g = ambientColor[ 1 ];\n\t\t\tconst b = ambientColor[ 2 ];\n\n\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\tconst color = new Color( r, g, b );\n\t\t\t\tsceneGraph.add( new AmbientLight( color, 1 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n\n\t// Parse nodes in FBXTree.Objects.Geometry\n\tparse( deformers ) {\n\n\t\tconst geometryMap = new Map();\n\n\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\tconst geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\tfor ( const nodeID in geoNodes ) {\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\tconst geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometryMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Geometry\n\tparseGeometry( relationships, geoNode, deformers ) {\n\n\t\tswitch ( geoNode.attrType ) {\n\n\t\t\tcase 'Mesh':\n\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\tbreak;\n\n\t\t\tcase 'NurbsCurve':\n\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\tparseMeshGeometry( relationships, geoNode, deformers ) {\n\n\t\tconst skeletons = deformers.skeletons;\n\t\tconst morphTargets = [];\n\n\t\tconst modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t} );\n\n\t\t// don't create geometry if it is not associated with any models\n\t\tif ( modelNodes.length === 0 ) return;\n\n\t\tconst skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\treturn skeleton;\n\n\t\t}, null );\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( deformers.morphTargets[ child.ID ] !== undefined ) {\n\n\t\t\t\tmorphTargets.push( deformers.morphTargets[ child.ID ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Assume one model and get the preRotation from that\n\t\t// if there is more than one model associated with the geometry this may cause problems\n\t\tconst modelNode = modelNodes[ 0 ];\n\n\t\tconst transformData = {};\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\tconst transform = generateTransform( transformData );\n\n\t\treturn this.genGeometry( geoNode, skeleton, morphTargets, transform );\n\n\t}\n\n\t// Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\tgenGeometry( geoNode, skeleton, morphTargets, preTransform ) {\n\n\t\tconst geo = new BufferGeometry();\n\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\tconst geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\tconst buffers = this.genBuffers( geoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tgeo.setAttribute( 'position', positionAttribute );\n\n\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\tgeo.setAttribute( 'color', new Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t}\n\n\t\tif ( skeleton ) {\n\n\t\t\tgeo.setAttribute( 'skinIndex', new Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\tgeo.setAttribute( 'skinWeight', new Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t// used later to bind the skeleton to the model\n\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t}\n\n\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( preTransform );\n\n\t\t\tconst normalAttribute = new Float32BufferAttribute( buffers.normal, 3 );\n\t\t\tnormalAttribute.applyNormalMatrix( normalMatrix );\n\n\t\t\tgeo.setAttribute( 'normal', normalAttribute );\n\n\t\t}\n\n\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\tlet name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t// the first uv buffer is just called 'uv'\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tname = 'uv';\n\n\t\t\t}\n\n\t\t\tgeo.setAttribute( name, new Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t} );\n\n\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\tlet prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\tlet startIndex = 0;\n\n\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\tconst lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\tconst lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t// using one of them\n\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addMorphTargets( geo, geoNode, morphTargets, preTransform );\n\n\t\treturn geo;\n\n\t}\n\n\tparseGeoNode( geoNode, skeleton ) {\n\n\t\tconst geoInfo = {};\n\n\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\tgeoInfo.uv = [];\n\n\t\t\tlet i = 0;\n\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\tif ( geoNode.LayerElementUV[ i ].UV ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeoInfo.weightTable = {};\n\n\t\tif ( skeleton !== null ) {\n\n\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\tid: i,\n\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn geoInfo;\n\n\t}\n\n\tgenBuffers( geoInfo ) {\n\n\t\tconst buffers = {\n\t\t\tvertex: [],\n\t\t\tnormal: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\t\t\tmaterialIndex: [],\n\t\t\tvertexWeights: [],\n\t\t\tweightsIndices: [],\n\t\t};\n\n\t\tlet polygonIndex = 0;\n\t\tlet faceLength = 0;\n\t\tlet displayedWeightsWarning = false;\n\n\t\t// these will hold data for a single face\n\t\tlet facePositionIndexes = [];\n\t\tlet faceNormals = [];\n\t\tlet faceColors = [];\n\t\tlet faceUVs = [];\n\t\tlet faceWeights = [];\n\t\tlet faceWeightIndices = [];\n\n\t\tconst scope = this;\n\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\tlet materialIndex;\n\t\t\tlet endOfFace = false;\n\n\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t// A cube with quad faces looks like this:\n\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t//  }\n\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\tendOfFace = true;\n\n\t\t\t}\n\n\t\t\tlet weightIndices = [];\n\t\t\tlet weights = [];\n\n\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t} );\n\n\n\t\t\t\t}\n\n\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\tconst Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\tlet currentWeight = weight;\n\t\t\t\t\t\tlet currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\tconst tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\tweights = Weight;\n\n\t\t\t\t}\n\n\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tmaterialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\tif ( materialIndex < 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Invalid material index:', materialIndex );\n\t\t\t\t\tmaterialIndex = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfaceLength ++;\n\n\t\t\tif ( endOfFace ) {\n\n\t\t\t\tscope.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\tpolygonIndex ++;\n\t\t\t\tfaceLength = 0;\n\n\t\t\t\t// reset arrays for the next face\n\t\t\t\tfacePositionIndexes = [];\n\t\t\t\tfaceNormals = [];\n\t\t\t\tfaceColors = [];\n\t\t\t\tfaceUVs = [];\n\t\t\t\tfaceWeights = [];\n\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn buffers;\n\n\t}\n\n\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\tgenFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\tfor ( let i = 2; i < faceLength; i ++ ) {\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\taddMorphTargets( parentGeo, parentGeoNode, morphTargets, preTransform ) {\n\n\t\tif ( morphTargets.length === 0 ) return;\n\n\t\tparentGeo.morphTargetsRelative = true;\n\n\t\tparentGeo.morphAttributes.position = [];\n\t\t// parentGeo.morphAttributes.normal = []; // not implemented\n\n\t\tconst scope = this;\n\t\tmorphTargets.forEach( function ( morphTarget ) {\n\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tconst morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tscope.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\tgenMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\n\n\t\tconst vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\tconst morphPositionsSparse = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\tconst indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\tconst length = parentGeo.attributes.position.count * 3;\n\t\tconst morphPositions = new Float32Array( length );\n\n\t\tfor ( let i = 0; i < indices.length; i ++ ) {\n\n\t\t\tconst morphIndex = indices[ i ] * 3;\n\n\t\t\tmorphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];\n\t\t\tmorphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];\n\t\t\tmorphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];\n\n\t\t}\n\n\t\t// TODO: add morph normal support\n\t\tconst morphGeoInfo = {\n\t\t\tvertexIndices: vertexIndices,\n\t\t\tvertexPositions: morphPositions,\n\n\t\t};\n\n\t\tconst morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\tpositionAttribute.name = name || morphGeoNode.attrName;\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t}\n\n\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\tparseNormals( NormalNode ) {\n\n\t\tconst mappingType = NormalNode.MappingInformationType;\n\t\tconst referenceType = NormalNode.ReferenceInformationType;\n\t\tconst buffer = NormalNode.Normals.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 3,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\tparseUVs( UVNode ) {\n\n\t\tconst mappingType = UVNode.MappingInformationType;\n\t\tconst referenceType = UVNode.ReferenceInformationType;\n\t\tconst buffer = UVNode.UV.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 2,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\tparseVertexColors( ColorNode ) {\n\n\t\tconst mappingType = ColorNode.MappingInformationType;\n\t\tconst referenceType = ColorNode.ReferenceInformationType;\n\t\tconst buffer = ColorNode.Colors.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 4,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\tparseMaterialIndices( MaterialNode ) {\n\n\t\tconst mappingType = MaterialNode.MappingInformationType;\n\t\tconst referenceType = MaterialNode.ReferenceInformationType;\n\n\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: [ 0 ],\n\t\t\t\tindices: [ 0 ],\n\t\t\t\tmappingType: 'AllSame',\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t}\n\n\t\tconst materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t// for conforming with the other functions we've written for other data.\n\t\tconst materialIndices = [];\n\n\t\tfor ( let i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\tmaterialIndices.push( i );\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 1,\n\t\t\tbuffer: materialIndexBuffer,\n\t\t\tindices: materialIndices,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\tparseNurbsGeometry( geoNode ) {\n\n\t\tif ( NURBSCurve === undefined ) {\n\n\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\treturn new BufferGeometry();\n\n\t\t}\n\n\t\tconst order = parseInt( geoNode.Order );\n\n\t\tif ( isNaN( order ) ) {\n\n\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\treturn new BufferGeometry();\n\n\t\t}\n\n\t\tconst degree = order - 1;\n\n\t\tconst knots = geoNode.KnotVector.a;\n\t\tconst controlPoints = [];\n\t\tconst pointsValues = geoNode.Points.a;\n\n\t\tfor ( let i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\tcontrolPoints.push( new Vector4().fromArray( pointsValues, i ) );\n\n\t\t}\n\n\t\tlet startKnot, endKnot;\n\n\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\tstartKnot = degree;\n\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\tfor ( let i = 0; i < degree; ++ i ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst curve = new NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\tconst points = curve.getPoints( controlPoints.length * 12 );\n\n\t\treturn new BufferGeometry().setFromPoints( points );\n\n\t}\n\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n\n\t// take raw animation clips and turn them into three.js animation clips\n\tparse() {\n\n\t\tconst animationClips = [];\n\n\t\tconst rawClips = this.parseClips();\n\n\t\tif ( rawClips !== undefined ) {\n\n\t\t\tfor ( const key in rawClips ) {\n\n\t\t\t\tconst rawClip = rawClips[ key ];\n\n\t\t\t\tconst clip = this.addClip( rawClip );\n\n\t\t\t\tanimationClips.push( clip );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animationClips;\n\n\t}\n\n\tparseClips() {\n\n\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t// if this is undefined we can safely assume there are no animations\n\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\tconst curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\tconst layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\tconst rawClips = this.parseAnimStacks( layersMap );\n\n\t\treturn rawClips;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t// and is referenced by an AnimationLayer\n\tparseAnimationCurveNodes() {\n\n\t\tconst rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\tconst curveNodesMap = new Map();\n\n\t\tfor ( const nodeID in rawCurveNodes ) {\n\n\t\t\tconst rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\tconst curveNode = {\n\n\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\tcurves: {},\n\n\t\t\t\t};\n\n\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn curveNodesMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t// axis ( e.g. times and values of x rotation)\n\tparseAnimationCurves( curveNodesMap ) {\n\n\t\tconst rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t// clearly, this should be optimised to\n\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\tfor ( const nodeID in rawCurves ) {\n\n\t\t\tconst animationCurve = {\n\n\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t};\n\n\t\t\tconst relationships = connections.get( animationCurve.id );\n\n\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\tconst animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\tconst animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\tparseAnimationLayers( curveNodesMap ) {\n\n\t\tconst rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\tconst layersMap = new Map();\n\n\t\tfor ( const nodeID in rawLayers ) {\n\n\t\t\tconst layerCurveNodes = [];\n\n\t\t\tconst connection = connections.get( parseInt( nodeID ) );\n\n\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\tconst children = connection.children;\n\n\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tconst curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\tif ( rawModel === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered a unused curve.', child );\n\t\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\n\n\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\n\n\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new Matrix4();\n\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\tconst geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\tconst modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn layersMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t// hierarchy. Each Stack node will be used to create a AnimationClip\n\tparseAnimStacks( layersMap ) {\n\n\t\tconst rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t// connect the stacks (clips) up to the layers\n\t\tconst rawClips = {};\n\n\t\tfor ( const nodeID in rawStacks ) {\n\n\t\t\tconst children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t}\n\n\t\t\tconst layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\tlayer: layer,\n\n\t\t\t};\n\n\t\t}\n\n\t\treturn rawClips;\n\n\t}\n\n\taddClip( rawClip ) {\n\n\t\tlet tracks = [];\n\n\t\tconst scope = this;\n\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\ttracks = tracks.concat( scope.generateTracks( rawTracks ) );\n\n\t\t} );\n\n\t\treturn new AnimationClip( rawClip.name, - 1, tracks );\n\n\t}\n\n\tgenerateTracks( rawTracks ) {\n\n\t\tconst tracks = [];\n\n\t\tlet initialPosition = new Vector3();\n\t\tlet initialRotation = new Quaternion();\n\t\tlet initialScale = new Vector3();\n\n\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\tinitialPosition = initialPosition.toArray();\n\t\tinitialRotation = new Euler().setFromQuaternion( initialRotation, rawTracks.eulerOrder ).toArray();\n\t\tinitialScale = initialScale.toArray();\n\n\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\tconst positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\tconst rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\n\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\tconst scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\tconst morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t}\n\n\t\treturn tracks;\n\n\t}\n\n\tgenerateVectorTrack( modelName, curves, initialValue, type ) {\n\n\t\tconst times = this.getTimesForAllAxes( curves );\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\treturn new VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t}\n\n\tgenerateRotationTrack( modelName, curves, initialValue, preRotation, postRotation, eulerOrder ) {\n\n\t\tif ( curves.x !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.x );\n\t\t\tcurves.x.values = curves.x.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tif ( curves.y !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.y );\n\t\t\tcurves.y.values = curves.y.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tif ( curves.z !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.z );\n\t\t\tcurves.z.values = curves.z.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tconst times = this.getTimesForAllAxes( curves );\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\tif ( preRotation !== undefined ) {\n\n\t\t\tpreRotation = preRotation.map( MathUtils.degToRad );\n\t\t\tpreRotation.push( eulerOrder );\n\n\t\t\tpreRotation = new Euler().fromArray( preRotation );\n\t\t\tpreRotation = new Quaternion().setFromEuler( preRotation );\n\n\t\t}\n\n\t\tif ( postRotation !== undefined ) {\n\n\t\t\tpostRotation = postRotation.map( MathUtils.degToRad );\n\t\t\tpostRotation.push( eulerOrder );\n\n\t\t\tpostRotation = new Euler().fromArray( postRotation );\n\t\t\tpostRotation = new Quaternion().setFromEuler( postRotation ).invert();\n\n\t\t}\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst euler = new Euler();\n\n\t\tconst quaternionValues = [];\n\n\t\tfor ( let i = 0; i < values.length; i += 3 ) {\n\n\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\n\n\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\n\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\n\n\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t}\n\n\t\treturn new QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t}\n\n\tgenerateMorphTrack( rawTracks ) {\n\n\t\tconst curves = rawTracks.DeformPercent.curves.morph;\n\t\tconst values = curves.values.map( function ( val ) {\n\n\t\t\treturn val / 100;\n\n\t\t} );\n\n\t\tconst morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\treturn new NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t}\n\n\t// For all animated objects, times are defined separately for each axis\n\t// Here we'll combine the times into one sorted array without duplicates\n\tgetTimesForAllAxes( curves ) {\n\n\t\tlet times = [];\n\n\t\t// first join together the times for each axis, if defined\n\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t// then sort them\n\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t} );\n\n\t\t// and remove duplicates\n\t\tif ( times.length > 1 ) {\n\n\t\t\tlet targetIndex = 1;\n\t\t\tlet lastValue = times[ 0 ];\n\t\t\tfor ( let i = 1; i < times.length; i ++ ) {\n\n\t\t\t\tconst currentValue = times[ i ];\n\t\t\t\tif ( currentValue !== lastValue ) {\n\n\t\t\t\t\ttimes[ targetIndex ] = currentValue;\n\t\t\t\t\tlastValue = currentValue;\n\t\t\t\t\ttargetIndex ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttimes = times.slice( 0, targetIndex );\n\n\t\t}\n\n\t\treturn times;\n\n\t}\n\n\tgetKeyframeTrackValues( times, curves, initialValue ) {\n\n\t\tconst prevValue = initialValue;\n\n\t\tconst values = [];\n\n\t\tlet xIndex = - 1;\n\t\tlet yIndex = - 1;\n\t\tlet zIndex = - 1;\n\n\t\ttimes.forEach( function ( time ) {\n\n\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t// if there is an x value defined for this frame, use that\n\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\tconst xValue = curves.x.values[ xIndex ];\n\t\t\t\tvalues.push( xValue );\n\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\tconst yValue = curves.y.values[ yIndex ];\n\t\t\t\tvalues.push( yValue );\n\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t}\n\n\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\tconst zValue = curves.z.values[ zIndex ];\n\t\t\t\tvalues.push( zValue );\n\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn values;\n\n\t}\n\n\t// Rotations are defined as Euler angles which can have values  of any size\n\t// These will be converted to quaternions which don't support values greater than\n\t// PI, so we'll interpolate large rotations\n\tinterpolateRotations( curve ) {\n\n\t\tfor ( let i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\tconst initialValue = curve.values[ i - 1 ];\n\t\t\tconst valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\tconst absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\tconst numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\tconst step = valuesSpan / numSubIntervals;\n\t\t\t\tlet nextValue = initialValue + step;\n\n\t\t\t\tconst initialTime = curve.times[ i - 1 ];\n\t\t\t\tconst timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\tconst interval = timeSpan / numSubIntervals;\n\t\t\t\tlet nextTime = initialTime + interval;\n\n\t\t\t\tconst interpolatedTimes = [];\n\t\t\t\tconst interpolatedValues = [];\n\n\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\tnextValue += step;\n\n\t\t\t\t}\n\n\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n\n\tgetPrevNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t}\n\n\tgetCurrentNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t}\n\n\tgetCurrentProp() {\n\n\t\treturn this.currentProp;\n\n\t}\n\n\tpushStack( node ) {\n\n\t\tthis.nodeStack.push( node );\n\t\tthis.currentIndent += 1;\n\n\t}\n\n\tpopStack() {\n\n\t\tthis.nodeStack.pop();\n\t\tthis.currentIndent -= 1;\n\n\t}\n\n\tsetCurrentProp( val, name ) {\n\n\t\tthis.currentProp = val;\n\t\tthis.currentPropName = name;\n\n\t}\n\n\tparse( text ) {\n\n\t\tthis.currentIndent = 0;\n\n\t\tthis.allNodes = new FBXTree();\n\t\tthis.nodeStack = [];\n\t\tthis.currentProp = [];\n\t\tthis.currentPropName = '';\n\n\t\tconst scope = this;\n\n\t\tconst split = text.split( /[\\r\\n]+/ );\n\n\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\tconst matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\tconst matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\tconst matchBeginning = line.match( '^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\tconst matchProperty = line.match( '^\\\\t{' + ( scope.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\tconst matchEnd = line.match( '^\\\\t{' + ( scope.currentIndent - 1 ) + '}}' );\n\n\t\t\tif ( matchBeginning ) {\n\n\t\t\t\tscope.parseNodeBegin( line, matchBeginning );\n\n\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\tscope.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\tscope.popStack();\n\n\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\tscope.parseNodePropertyContinued( line );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this.allNodes;\n\n\t}\n\n\tparseNodeBegin( line, property ) {\n\n\t\tconst nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\tconst nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t} );\n\n\t\tconst node = { name: nodeName };\n\t\tconst attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\t// a top node\n\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t} else { // a subnode\n\n\t\t\t// if the subnode already exists, append it\n\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\tthis.pushStack( node );\n\n\t}\n\n\tparseNodeAttr( attrs ) {\n\n\t\tlet id = attrs[ 0 ];\n\n\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet name = '', type = '';\n\n\t\tif ( attrs.length > 1 ) {\n\n\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\ttype = attrs[ 2 ];\n\n\t\t}\n\n\t\treturn { id: id, name: name, type: type };\n\n\t}\n\n\tparseNodeProperty( line, property, contentLine ) {\n\n\t\tlet propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\tlet propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t//\tContent: ,\n\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t}\n\n\t\tconst currentNode = this.getCurrentNode();\n\t\tconst parentName = currentNode.name;\n\n\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Connections\n\t\tif ( propName === 'C' ) {\n\n\t\t\tconst connProps = propValue.split( ',' ).slice( 1 );\n\t\t\tconst from = parseInt( connProps[ 0 ] );\n\t\t\tconst to = parseInt( connProps[ 1 ] );\n\n\t\t\tlet rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t} );\n\n\t\t\tpropName = 'connections';\n\t\t\tpropValue = [ from, to ];\n\t\t\tappend( propValue, rest );\n\n\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Node\n\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t// connections\n\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t} else {\n\n\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\telse currentNode.a = propValue;\n\n\t\t}\n\n\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t}\n\n\t}\n\n\tparseNodePropertyContinued( line ) {\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\tcurrentNode.a += line;\n\n\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t// so convert the string to an array\n\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t}\n\n\t}\n\n\t// parse \"Property70\"\n\tparseNodeSpecialProperty( line, propName, propValue ) {\n\n\t\t// split this\n\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t// into array like below\n\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\tconst props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t} );\n\n\t\tconst innerPropName = props[ 0 ];\n\t\tconst innerPropType1 = props[ 1 ];\n\t\tconst innerPropType2 = props[ 2 ];\n\t\tconst innerPropFlag = props[ 3 ];\n\t\tlet innerPropValue = props[ 4 ];\n\n\t\t// cast values where needed, otherwise leave as strings\n\t\tswitch ( innerPropType1 ) {\n\n\t\t\tcase 'int':\n\t\t\tcase 'enum':\n\t\t\tcase 'bool':\n\t\t\tcase 'ULongLong':\n\t\t\tcase 'double':\n\t\t\tcase 'Number':\n\t\t\tcase 'FieldOfView':\n\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t\tcase 'Color':\n\t\t\tcase 'ColorRGB':\n\t\t\tcase 'Vector3D':\n\t\t\tcase 'Lcl_Translation':\n\t\t\tcase 'Lcl_Rotation':\n\t\t\tcase 'Lcl_Scaling':\n\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// CAUTION: these props must append to parent's parent\n\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t'type': innerPropType1,\n\t\t\t'type2': innerPropType2,\n\t\t\t'flag': innerPropFlag,\n\t\t\t'value': innerPropValue\n\n\t\t};\n\n\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t}\n\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n\n\tparse( buffer ) {\n\n\t\tconst reader = new BinaryReader( buffer );\n\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\tconst version = reader.getUint32();\n\n\t\tif ( version < 6400 ) {\n\n\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + version );\n\n\t\t}\n\n\t\tconst allNodes = new FBXTree();\n\n\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\tconst node = this.parseNode( reader, version );\n\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t}\n\n\t\treturn allNodes;\n\n\t}\n\n\t// Check if reader has reached the end of content.\n\tendOfContent( reader ) {\n\n\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t// - 16bytes: magic\n\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t// - 4bytes: magic\n\t\t// - 4bytes: version\n\t\t// - 120bytes: zero\n\t\t// - 16bytes: magic\n\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t} else {\n\n\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t}\n\n\t}\n\n\t// recursively parse nodes until the end of the file is reached\n\tparseNode( reader, version ) {\n\n\t\tconst node = {};\n\n\t\t// The first three data sizes depends on version.\n\t\tconst endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\tconst numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t( version >= 7500 ) ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n\t\tconst nameLen = reader.getUint8();\n\t\tconst name = reader.getString( nameLen );\n\n\t\t// Regards this node as NULL-record if endOffset is zero\n\t\tif ( endOffset === 0 ) return null;\n\n\t\tconst propertyList = [];\n\n\t\tfor ( let i = 0; i < numProperties; i ++ ) {\n\n\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t}\n\n\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\tconst id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\tconst attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\tconst attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t// check if this node represents just a single property\n\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\tconst subNode = this.parseNode( reader, version );\n\n\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t}\n\n\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\tif ( typeof id === 'number' ) node.id = id;\n\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\tif ( name !== '' ) node.name = name;\n\n\t\treturn node;\n\n\t}\n\n\tparseSubNode( name, node, subNode ) {\n\n\t\t// special case: child node is single property\n\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\tconst value = subNode.propertyList[ 0 ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\tsubNode.a = value;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t}\n\n\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\tconst array = [];\n\n\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t} );\n\n\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\tnode.connections = [];\n\n\t\t\t}\n\n\t\t\tnode.connections.push( array );\n\n\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\tconst keys = Object.keys( subNode );\n\n\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t} );\n\n\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\tlet innerPropName = subNode.propertyList[ 0 ];\n\t\t\tlet innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\tconst innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\tconst innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\tlet innerPropValue;\n\n\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\tinnerPropValue = [\n\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t}\n\n\t\t\t// this will be copied to parent, see above\n\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t}\n\n\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tparseProperty( reader ) {\n\n\t\tconst type = reader.getString( 1 );\n\t\tlet length;\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 'C':\n\t\t\t\treturn reader.getBoolean();\n\n\t\t\tcase 'D':\n\t\t\t\treturn reader.getFloat64();\n\n\t\t\tcase 'F':\n\t\t\t\treturn reader.getFloat32();\n\n\t\t\tcase 'I':\n\t\t\t\treturn reader.getInt32();\n\n\t\t\tcase 'L':\n\t\t\t\treturn reader.getInt64();\n\n\t\t\tcase 'R':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\tcase 'S':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getString( length );\n\n\t\t\tcase 'Y':\n\t\t\t\treturn reader.getInt16();\n\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\tcase 'd':\n\t\t\tcase 'f':\n\t\t\tcase 'i':\n\t\t\tcase 'l':\n\n\t\t\t\tconst arrayLength = reader.getUint32();\n\t\t\t\tconst encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\tconst compressedLength = reader.getUint32();\n\n\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( typeof fflate === 'undefined' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library fflate.min.js required.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data = fflate.unzlibSync( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\tconst reader2 = new BinaryReader( data.buffer );\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\tcase 'i':\n\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t}\n\n\t\t\t\tbreak; // cannot happen but is required by the DeepScan\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t}\n\n\t}\n\n}\n\nclass BinaryReader {\n\n\tconstructor( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t}\n\n\tgetOffset() {\n\n\t\treturn this.offset;\n\n\t}\n\n\tsize() {\n\n\t\treturn this.dv.buffer.byteLength;\n\n\t}\n\n\tskip( length ) {\n\n\t\tthis.offset += length;\n\n\t}\n\n\t// seems like true/false representation depends on exporter.\n\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t// then sees LSB.\n\tgetBoolean() {\n\n\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t}\n\n\tgetBooleanArray( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getBoolean() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint8() {\n\n\t\tconst value = this.dv.getUint8( this.offset );\n\t\tthis.offset += 1;\n\t\treturn value;\n\n\t}\n\n\tgetInt16() {\n\n\t\tconst value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\tthis.offset += 2;\n\t\treturn value;\n\n\t}\n\n\tgetInt32() {\n\n\t\tconst value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetInt32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint32() {\n\n\t\tconst value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t// There's a possibility that this method returns wrong value if the value\n\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t// TODO: safely handle 64-bit integer\n\tgetInt64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\t// calculate negative value\n\t\tif ( high & 0x80000000 ) {\n\n\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetInt64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// Note: see getInt64() comment\n\tgetUint64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetFloat32() {\n\n\t\tconst value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetFloat32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetFloat64() {\n\n\t\tconst value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\tthis.offset += 8;\n\t\treturn value;\n\n\t}\n\n\tgetFloat64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetArrayBuffer( size ) {\n\n\t\tconst value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\tthis.offset += size;\n\t\treturn value;\n\n\t}\n\n\tgetString( size ) {\n\n\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\tlet a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta[ i ] = this.getUint8();\n\n\t\t}\n\n\t\tconst nullByte = a.indexOf( 0 );\n\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\treturn LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t}\n\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n\n\tadd( key, val ) {\n\n\t\tthis[ key ] = val;\n\n\t}\n\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary( buffer ) {\n\n\tconst CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n\n\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n}\n\nfunction isFbxFormatASCII( text ) {\n\n\tconst CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\tlet cursor = 0;\n\n\tfunction read( offset ) {\n\n\t\tconst result = text[ offset - 1 ];\n\t\ttext = text.slice( cursor + offset );\n\t\tcursor ++;\n\t\treturn result;\n\n\t}\n\n\tfor ( let i = 0; i < CORRECT.length; ++ i ) {\n\n\t\tconst num = read( 1 );\n\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nfunction getFbxVersion( text ) {\n\n\tconst versionRegExp = /FBXVersion: (\\d+)/;\n\tconst match = text.match( versionRegExp );\n\n\tif ( match ) {\n\n\t\tconst version = parseInt( match[ 1 ] );\n\t\treturn version;\n\n\t}\n\n\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds( time ) {\n\n\treturn time / 46186158000;\n\n}\n\nconst dataArray = [];\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\tlet index;\n\n\tswitch ( infoObject.mappingType ) {\n\n\t\tcase 'ByPolygonVertex' :\n\t\t\tindex = polygonVertexIndex;\n\t\t\tbreak;\n\t\tcase 'ByPolygon' :\n\t\t\tindex = polygonIndex;\n\t\t\tbreak;\n\t\tcase 'ByVertice' :\n\t\t\tindex = vertexIndex;\n\t\t\tbreak;\n\t\tcase 'AllSame' :\n\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t}\n\n\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\tconst from = index * infoObject.dataSize;\n\tconst to = from + infoObject.dataSize;\n\n\treturn slice( dataArray, infoObject.buffer, from, to );\n\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3();\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform( transformData ) {\n\n\tconst lTranslationM = new Matrix4();\n\tconst lPreRotationM = new Matrix4();\n\tconst lRotationM = new Matrix4();\n\tconst lPostRotationM = new Matrix4();\n\n\tconst lScalingM = new Matrix4();\n\tconst lScalingPivotM = new Matrix4();\n\tconst lScalingOffsetM = new Matrix4();\n\tconst lRotationOffsetM = new Matrix4();\n\tconst lRotationPivotM = new Matrix4();\n\n\tconst lParentGX = new Matrix4();\n\tconst lParentLX = new Matrix4();\n\tconst lGlobalT = new Matrix4();\n\n\tconst inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\n\n\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\n\n\tif ( transformData.preRotation ) {\n\n\t\tconst array = transformData.preRotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DefaultOrder );\n\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.rotation ) {\n\n\t\tconst array = transformData.rotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DefaultOrder );\n\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.postRotation ) {\n\n\t\tconst array = transformData.postRotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DefaultOrder );\n\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\t\tlPostRotationM.invert();\n\n\t}\n\n\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\n\n\t// Pivots and offsets\n\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\n\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\n\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\n\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\n\n\t// parent transform\n\tif ( transformData.parentMatrixWorld ) {\n\n\t\tlParentLX.copy( transformData.parentMatrix );\n\t\tlParentGX.copy( transformData.parentMatrixWorld );\n\n\t}\n\n\tconst lLRM = lPreRotationM.clone().multiply( lRotationM ).multiply( lPostRotationM );\n\t// Global Rotation\n\tconst lParentGRM = new Matrix4();\n\tlParentGRM.extractRotation( lParentGX );\n\n\t// Global Shear*Scaling\n\tconst lParentTM = new Matrix4();\n\tlParentTM.copyPosition( lParentGX );\n\n\tconst lParentGRSM = lParentTM.clone().invert().multiply( lParentGX );\n\tconst lParentGSM = lParentGRM.clone().invert().multiply( lParentGRSM );\n\tconst lLSM = lScalingM;\n\n\tconst lGlobalRS = new Matrix4();\n\n\tif ( inheritType === 0 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\n\n\t} else if ( inheritType === 1 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\n\n\t} else {\n\n\t\tconst lParentLSM = new Matrix4().scale( new Vector3().setFromMatrixScale( lParentLX ) );\n\t\tconst lParentLSM_inv = lParentLSM.clone().invert();\n\t\tconst lParentGSM_noLocal = lParentGSM.clone().multiply( lParentLSM_inv );\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\n\n\t}\n\n\tconst lRotationPivotM_inv = lRotationPivotM.clone().invert();\n\tconst lScalingPivotM_inv = lScalingPivotM.clone().invert();\n\t// Calculate the local transform matrix\n\tlet lTransform = lTranslationM.clone().multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM_inv ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM_inv );\n\n\tconst lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition( lTransform );\n\n\tconst lGlobalTranslation = lParentGX.clone().multiply( lLocalTWithAllPivotAndOffsetInfo );\n\tlGlobalT.copyPosition( lGlobalTranslation );\n\n\tlTransform = lGlobalT.clone().multiply( lGlobalRS );\n\n\t// from global to local\n\tlTransform.premultiply( lParentGX.invert() );\n\n\treturn lTransform;\n\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder( order ) {\n\n\torder = order || 0;\n\n\tconst enums = [\n\t\t'ZYX', // -> XYZ extrinsic\n\t\t'YZX', // -> XZY extrinsic\n\t\t'XZY', // -> YZX extrinsic\n\t\t'ZXY', // -> YXZ extrinsic\n\t\t'YXZ', // -> ZXY extrinsic\n\t\t'XYZ', // -> ZYX extrinsic\n\t\t//'SphericXYZ', // not possible to support\n\t];\n\n\tif ( order === 6 ) {\n\n\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\treturn enums[ 0 ];\n\n\t}\n\n\treturn enums[ order ];\n\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray( value ) {\n\n\tconst array = value.split( ',' ).map( function ( val ) {\n\n\t\treturn parseFloat( val );\n\n\t} );\n\n\treturn array;\n\n}\n\nfunction convertArrayBufferToString( buffer, from, to ) {\n\n\tif ( from === undefined ) from = 0;\n\tif ( to === undefined ) to = buffer.byteLength;\n\n\treturn LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n}\n\nfunction append( a, b ) {\n\n\tfor ( let i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n}\n\nfunction slice( a, b, from, to ) {\n\n\tfor ( let i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n\treturn a;\n\n}\n\n// inject array a2 into array a1 at index\nfunction inject( a1, index, a2 ) {\n\n\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n}\n\nexport { FBXLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}