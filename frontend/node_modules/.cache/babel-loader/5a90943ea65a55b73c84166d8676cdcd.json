{"ast":null,"code":"import { Box3, Vector3, Matrix4 } from 'three';\nimport { CONTAINED } from './Constants.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { intersectTris, intersectClosestTri } from '../utils/GeometryRayIntersectUtilities.js';\nimport { setTriangle } from '../utils/TriangleUtilities.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\nimport { COUNT, OFFSET, LEFT_NODE, RIGHT_NODE, IS_LEAF, BOUNDING_DATA_INDEX, SPLIT_AXIS } from './nodeBufferFunctions.js';\nconst boundingBox = new Box3();\nconst boxIntersection = new Vector3();\nconst xyzFields = ['x', 'y', 'z'];\nexport function raycast(nodeIndex32, geometry, side, ray, intersects) {\n  let nodeIndex16 = nodeIndex32 * 2,\n    float32Array = _float32Array,\n    uint16Array = _uint16Array,\n    uint32Array = _uint32Array;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    intersectTris(geometry, side, ray, offset, count, intersects);\n  } else {\n    const leftIndex = LEFT_NODE(nodeIndex32);\n    if (intersectRay(leftIndex, float32Array, ray, boxIntersection)) {\n      raycast(leftIndex, geometry, side, ray, intersects);\n    }\n    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);\n    if (intersectRay(rightIndex, float32Array, ray, boxIntersection)) {\n      raycast(rightIndex, geometry, side, ray, intersects);\n    }\n  }\n}\nexport function raycastFirst(nodeIndex32, geometry, side, ray) {\n  let nodeIndex16 = nodeIndex32 * 2,\n    float32Array = _float32Array,\n    uint16Array = _uint16Array,\n    uint32Array = _uint32Array;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    return intersectClosestTri(geometry, side, ray, offset, count);\n  } else {\n    // consider the position of the split plane with respect to the oncoming ray; whichever direction\n    // the ray is coming from, look for an intersection among that side of the tree first\n    const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);\n    const xyzAxis = xyzFields[splitAxis];\n    const rayDir = ray.direction[xyzAxis];\n    const leftToRight = rayDir >= 0;\n\n    // c1 is the child to check first\n    let c1, c2;\n    if (leftToRight) {\n      c1 = LEFT_NODE(nodeIndex32);\n      c2 = RIGHT_NODE(nodeIndex32, uint32Array);\n    } else {\n      c1 = RIGHT_NODE(nodeIndex32, uint32Array);\n      c2 = LEFT_NODE(nodeIndex32);\n    }\n    const c1Intersection = intersectRay(c1, float32Array, ray, boxIntersection);\n    const c1Result = c1Intersection ? raycastFirst(c1, geometry, side, ray) : null;\n\n    // if we got an intersection in the first node and it's closer than the second node's bounding\n    // box, we don't need to consider the second node because it couldn't possibly be a better result\n    if (c1Result) {\n      // check if the point is within the second bounds\n      // \"point\" is in the local frame of the bvh\n      const point = c1Result.point[xyzAxis];\n      const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] :\n      // min bounding data\n      point >= float32Array[c2 + splitAxis + 3]; // max bounding data\n\n      if (isOutside) {\n        return c1Result;\n      }\n    }\n\n    // either there was no intersection in the first node, or there could still be a closer\n    // intersection in the second, so check the second node and then take the better of the two\n    const c2Intersection = intersectRay(c2, float32Array, ray, boxIntersection);\n    const c2Result = c2Intersection ? raycastFirst(c2, geometry, side, ray) : null;\n    if (c1Result && c2Result) {\n      return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n    } else {\n      return c1Result || c2Result || null;\n    }\n  }\n}\nexport const shapecast = function () {\n  let _box1, _box2;\n  const boxStack = [];\n  const boxPool = new PrimitivePool(() => new Box3());\n  return function shapecast() {\n    _box1 = boxPool.getPrimitive();\n    _box2 = boxPool.getPrimitive();\n    boxStack.push(_box1, _box2);\n    const result = shapecastTraverse(...arguments);\n    boxPool.releasePrimitive(_box1);\n    boxPool.releasePrimitive(_box2);\n    boxStack.pop();\n    boxStack.pop();\n    const length = boxStack.length;\n    if (length > 0) {\n      _box2 = boxStack[length - 1];\n      _box1 = boxStack[length - 2];\n    }\n    return result;\n  };\n  function shapecastTraverse(nodeIndex32, geometry, intersectsBoundsFunc, intersectsRangeFunc) {\n    let nodeScoreFunc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let nodeIndexByteOffset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let depth = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    // Define these inside the function so it has access to the local variables needed\n    // when converting to the buffer equivalents\n    function getLeftOffset(nodeIndex32) {\n      let nodeIndex16 = nodeIndex32 * 2,\n        uint16Array = _uint16Array,\n        uint32Array = _uint32Array;\n\n      // traverse until we find a leaf\n      while (!IS_LEAF(nodeIndex16, uint16Array)) {\n        nodeIndex32 = LEFT_NODE(nodeIndex32);\n        nodeIndex16 = nodeIndex32 * 2;\n      }\n      return OFFSET(nodeIndex32, uint32Array);\n    }\n    function getRightEndOffset(nodeIndex32) {\n      let nodeIndex16 = nodeIndex32 * 2,\n        uint16Array = _uint16Array,\n        uint32Array = _uint32Array;\n\n      // traverse until we find a leaf\n      while (!IS_LEAF(nodeIndex16, uint16Array)) {\n        // adjust offset to point to the right node\n        nodeIndex32 = RIGHT_NODE(nodeIndex32, uint32Array);\n        nodeIndex16 = nodeIndex32 * 2;\n      }\n\n      // return the end offset of the triangle range\n      return OFFSET(nodeIndex32, uint32Array) + COUNT(nodeIndex16, uint16Array);\n    }\n    let nodeIndex16 = nodeIndex32 * 2,\n      float32Array = _float32Array,\n      uint16Array = _uint16Array,\n      uint32Array = _uint32Array;\n    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n    if (isLeaf) {\n      const offset = OFFSET(nodeIndex32, uint32Array);\n      const count = COUNT(nodeIndex16, uint16Array);\n      arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, _box1);\n      return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1);\n    } else {\n      const left = LEFT_NODE(nodeIndex32);\n      const right = RIGHT_NODE(nodeIndex32, uint32Array);\n      let c1 = left;\n      let c2 = right;\n      let score1, score2;\n      let box1, box2;\n      if (nodeScoreFunc) {\n        box1 = _box1;\n        box2 = _box2;\n\n        // bounding data is not offset\n        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);\n        arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);\n        score1 = nodeScoreFunc(box1);\n        score2 = nodeScoreFunc(box2);\n        if (score2 < score1) {\n          c1 = right;\n          c2 = left;\n          const temp = score1;\n          score1 = score2;\n          score2 = temp;\n          box1 = box2;\n          // box2 is always set before use below\n        }\n      }\n\n      // Check box 1 intersection\n      if (!box1) {\n        box1 = _box1;\n        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);\n      }\n      const isC1Leaf = IS_LEAF(c1 * 2, uint16Array);\n      const c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);\n      let c1StopTraversal;\n      if (c1Intersection === CONTAINED) {\n        const offset = getLeftOffset(c1);\n        const end = getRightEndOffset(c1);\n        const count = end - offset;\n        c1StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1);\n      } else {\n        c1StopTraversal = c1Intersection && shapecastTraverse(c1, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n      }\n      if (c1StopTraversal) return true;\n\n      // Check box 2 intersection\n      // cached box2 will have been overwritten by previous traversal\n      box2 = _box2;\n      arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);\n      const isC2Leaf = IS_LEAF(c2 * 2, uint16Array);\n      const c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2);\n      let c2StopTraversal;\n      if (c2Intersection === CONTAINED) {\n        const offset = getLeftOffset(c2);\n        const end = getRightEndOffset(c2);\n        const count = end - offset;\n        c2StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2);\n      } else {\n        c2StopTraversal = c2Intersection && shapecastTraverse(c2, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n      }\n      if (c2StopTraversal) return true;\n      return false;\n    }\n  }\n}();\nexport const intersectsGeometry = function () {\n  const triangle = new ExtendedTriangle();\n  const triangle2 = new ExtendedTriangle();\n  const invertedMat = new Matrix4();\n  const obb = new OrientedBox();\n  const obb2 = new OrientedBox();\n  return function intersectsGeometry(nodeIndex32, geometry, otherGeometry, geometryToBvh) {\n    let cachedObb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let nodeIndex16 = nodeIndex32 * 2,\n      float32Array = _float32Array,\n      uint16Array = _uint16Array,\n      uint32Array = _uint32Array;\n    if (cachedObb === null) {\n      if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n      }\n      obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n      cachedObb = obb;\n    }\n    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n    if (isLeaf) {\n      const thisGeometry = geometry;\n      const thisIndex = thisGeometry.index;\n      const thisPos = thisGeometry.attributes.position;\n      const index = otherGeometry.index;\n      const pos = otherGeometry.attributes.position;\n      const offset = OFFSET(nodeIndex32, uint32Array);\n      const count = COUNT(nodeIndex16, uint16Array);\n\n      // get the inverse of the geometry matrix so we can transform our triangles into the\n      // geometry space we're trying to test. We assume there are fewer triangles being checked\n      // here.\n      invertedMat.copy(geometryToBvh).invert();\n      if (otherGeometry.boundsTree) {\n        arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, obb2);\n        obb2.matrix.copy(invertedMat);\n        obb2.needsUpdate = true;\n        const res = otherGeometry.boundsTree.shapecast({\n          intersectsBounds: box => obb2.intersectsBox(box),\n          intersectsTriangle: tri => {\n            tri.a.applyMatrix4(geometryToBvh);\n            tri.b.applyMatrix4(geometryToBvh);\n            tri.c.applyMatrix4(geometryToBvh);\n            tri.needsUpdate = true;\n            for (let i = offset * 3, l = (count + offset) * 3; i < l; i += 3) {\n              // this triangle needs to be transformed into the current BVH coordinate frame\n              setTriangle(triangle2, i, thisIndex, thisPos);\n              triangle2.needsUpdate = true;\n              if (tri.intersectsTriangle(triangle2)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        });\n        return res;\n      } else {\n        for (let i = offset * 3, l = count + offset * 3; i < l; i += 3) {\n          // this triangle needs to be transformed into the current BVH coordinate frame\n          setTriangle(triangle, i, thisIndex, thisPos);\n          triangle.a.applyMatrix4(invertedMat);\n          triangle.b.applyMatrix4(invertedMat);\n          triangle.c.applyMatrix4(invertedMat);\n          triangle.needsUpdate = true;\n          for (let i2 = 0, l2 = index.count; i2 < l2; i2 += 3) {\n            setTriangle(triangle2, i2, index, pos);\n            triangle2.needsUpdate = true;\n            if (triangle.intersectsTriangle(triangle2)) {\n              return true;\n            }\n          }\n        }\n      }\n    } else {\n      const left = nodeIndex32 + 8;\n      const right = uint32Array[nodeIndex32 + 6];\n      arrayToBox(BOUNDING_DATA_INDEX(left), float32Array, boundingBox);\n      const leftIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry(left, geometry, otherGeometry, geometryToBvh, cachedObb);\n      if (leftIntersection) return true;\n      arrayToBox(BOUNDING_DATA_INDEX(right), float32Array, boundingBox);\n      const rightIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry(right, geometry, otherGeometry, geometryToBvh, cachedObb);\n      if (rightIntersection) return true;\n      return false;\n    }\n  };\n}();\nfunction intersectRay(nodeIndex32, array, ray, target) {\n  arrayToBox(nodeIndex32, array, boundingBox);\n  return ray.intersectBox(boundingBox, target);\n}\nconst bufferStack = [];\nlet _prevBuffer;\nlet _float32Array;\nlet _uint16Array;\nlet _uint32Array;\nexport function setBuffer(buffer) {\n  if (_prevBuffer) {\n    bufferStack.push(_prevBuffer);\n  }\n  _prevBuffer = buffer;\n  _float32Array = new Float32Array(buffer);\n  _uint16Array = new Uint16Array(buffer);\n  _uint32Array = new Uint32Array(buffer);\n}\nexport function clearBuffer() {\n  _prevBuffer = null;\n  _float32Array = null;\n  _uint16Array = null;\n  _uint32Array = null;\n  if (bufferStack.length) {\n    setBuffer(bufferStack.pop());\n  }\n}","map":{"version":3,"names":["Box3","Vector3","Matrix4","CONTAINED","OrientedBox","ExtendedTriangle","intersectTris","intersectClosestTri","setTriangle","arrayToBox","PrimitivePool","COUNT","OFFSET","LEFT_NODE","RIGHT_NODE","IS_LEAF","BOUNDING_DATA_INDEX","SPLIT_AXIS","boundingBox","boxIntersection","xyzFields","raycast","nodeIndex32","geometry","side","ray","intersects","nodeIndex16","float32Array","_float32Array","uint16Array","_uint16Array","uint32Array","_uint32Array","isLeaf","offset","count","leftIndex","intersectRay","rightIndex","raycastFirst","splitAxis","xyzAxis","rayDir","direction","leftToRight","c1","c2","c1Intersection","c1Result","point","isOutside","c2Intersection","c2Result","distance","shapecast","_box1","_box2","boxStack","boxPool","getPrimitive","push","result","shapecastTraverse","releasePrimitive","pop","length","intersectsBoundsFunc","intersectsRangeFunc","nodeScoreFunc","nodeIndexByteOffset","depth","getLeftOffset","getRightEndOffset","left","right","score1","score2","box1","box2","temp","isC1Leaf","c1StopTraversal","end","isC2Leaf","c2StopTraversal","intersectsGeometry","triangle","triangle2","invertedMat","obb","obb2","otherGeometry","geometryToBvh","cachedObb","computeBoundingBox","set","min","max","thisGeometry","thisIndex","index","thisPos","attributes","position","pos","copy","invert","boundsTree","matrix","needsUpdate","res","intersectsBounds","box","intersectsBox","intersectsTriangle","tri","a","applyMatrix4","b","c","i","l","i2","l2","leftIntersection","rightIntersection","array","target","intersectBox","bufferStack","_prevBuffer","setBuffer","buffer","Float32Array","Uint16Array","Uint32Array","clearBuffer"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-mesh-bvh/src/core/castFunctions.js"],"sourcesContent":["import { Box3, Vector3, Matrix4 } from 'three';\r\nimport { CONTAINED } from './Constants.js';\r\n\r\nimport { OrientedBox } from '../math/OrientedBox.js';\r\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\r\nimport { intersectTris, intersectClosestTri } from '../utils/GeometryRayIntersectUtilities.js';\r\nimport { setTriangle } from '../utils/TriangleUtilities.js';\r\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\r\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\r\nimport { COUNT, OFFSET, LEFT_NODE, RIGHT_NODE, IS_LEAF, BOUNDING_DATA_INDEX, SPLIT_AXIS } from './nodeBufferFunctions.js';\r\n\r\nconst boundingBox = new Box3();\r\nconst boxIntersection = new Vector3();\r\nconst xyzFields = [ 'x', 'y', 'z' ];\r\n\r\nexport function raycast( nodeIndex32, geometry, side, ray, intersects ) {\r\n\r\n\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\r\n\r\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\r\n\tif ( isLeaf ) {\r\n\r\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\r\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\r\n\r\n\t\tintersectTris( geometry, side, ray, offset, count, intersects );\r\n\r\n\t} else {\r\n\r\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\r\n\t\tif ( intersectRay( leftIndex, float32Array, ray, boxIntersection ) ) {\r\n\r\n\t\t\traycast( leftIndex, geometry, side, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\r\n\t\tif ( intersectRay( rightIndex, float32Array, ray, boxIntersection ) ) {\r\n\r\n\t\t\traycast( rightIndex, geometry, side, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function raycastFirst( nodeIndex32, geometry, side, ray ) {\r\n\r\n\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\r\n\r\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\r\n\tif ( isLeaf ) {\r\n\r\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\r\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\r\n\t\treturn intersectClosestTri( geometry, side, ray, offset, count );\r\n\r\n\t} else {\r\n\r\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\r\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\r\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\r\n\t\tconst xyzAxis = xyzFields[ splitAxis ];\r\n\t\tconst rayDir = ray.direction[ xyzAxis ];\r\n\t\tconst leftToRight = rayDir >= 0;\r\n\r\n\t\t// c1 is the child to check first\r\n\t\tlet c1, c2;\r\n\t\tif ( leftToRight ) {\r\n\r\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\r\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\r\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\r\n\r\n\t\t}\r\n\r\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, boxIntersection );\r\n\t\tconst c1Result = c1Intersection ? raycastFirst( c1, geometry, side, ray ) : null;\r\n\r\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\r\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\r\n\t\tif ( c1Result ) {\r\n\r\n\t\t\t// check if the point is within the second bounds\r\n\t\t\t// \"point\" is in the local frame of the bvh\r\n\t\t\tconst point = c1Result.point[ xyzAxis ];\r\n\t\t\tconst isOutside = leftToRight ?\r\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\r\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\r\n\r\n\t\t\tif ( isOutside ) {\r\n\r\n\t\t\t\treturn c1Result;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// either there was no intersection in the first node, or there could still be a closer\r\n\t\t// intersection in the second, so check the second node and then take the better of the two\r\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, boxIntersection );\r\n\t\tconst c2Result = c2Intersection ? raycastFirst( c2, geometry, side, ray ) : null;\r\n\r\n\t\tif ( c1Result && c2Result ) {\r\n\r\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn c1Result || c2Result || null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const shapecast = ( function () {\r\n\r\n\tlet _box1, _box2;\r\n\tconst boxStack = [];\r\n\tconst boxPool = new PrimitivePool( () => new Box3() );\r\n\r\n\treturn function shapecast( ...args ) {\r\n\r\n\t\t_box1 = boxPool.getPrimitive();\r\n\t\t_box2 = boxPool.getPrimitive();\r\n\t\tboxStack.push( _box1, _box2 );\r\n\r\n\t\tconst result = shapecastTraverse( ...args );\r\n\r\n\t\tboxPool.releasePrimitive( _box1 );\r\n\t\tboxPool.releasePrimitive( _box2 );\r\n\t\tboxStack.pop();\r\n\t\tboxStack.pop();\r\n\r\n\t\tconst length = boxStack.length;\r\n\t\tif ( length > 0 ) {\r\n\r\n\t\t\t_box2 = boxStack[ length - 1 ];\r\n\t\t\t_box1 = boxStack[ length - 2 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n\tfunction shapecastTraverse(\r\n\t\tnodeIndex32,\r\n\t\tgeometry,\r\n\t\tintersectsBoundsFunc,\r\n\t\tintersectsRangeFunc,\r\n\t\tnodeScoreFunc = null,\r\n\t\tnodeIndexByteOffset = 0, // offset for unique node identifier\r\n\t\tdepth = 0\r\n\t) {\r\n\r\n\t\t// Define these inside the function so it has access to the local variables needed\r\n\t\t// when converting to the buffer equivalents\r\n\t\tfunction getLeftOffset( nodeIndex32 ) {\r\n\r\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2, uint16Array = _uint16Array, uint32Array = _uint32Array;\r\n\r\n\t\t\t// traverse until we find a leaf\r\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\r\n\r\n\t\t\t\tnodeIndex32 = LEFT_NODE( nodeIndex32 );\r\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn OFFSET( nodeIndex32, uint32Array );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getRightEndOffset( nodeIndex32 ) {\r\n\r\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2, uint16Array = _uint16Array, uint32Array = _uint32Array;\r\n\r\n\t\t\t// traverse until we find a leaf\r\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\r\n\r\n\t\t\t\t// adjust offset to point to the right node\r\n\t\t\t\tnodeIndex32 = RIGHT_NODE( nodeIndex32, uint32Array );\r\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// return the end offset of the triangle range\r\n\t\t\treturn OFFSET( nodeIndex32, uint32Array ) + COUNT( nodeIndex16, uint16Array );\r\n\r\n\t\t}\r\n\r\n\t\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\r\n\r\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\r\n\t\tif ( isLeaf ) {\r\n\r\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\r\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\r\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, _box1 );\r\n\t\t\treturn intersectsRangeFunc( offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst left = LEFT_NODE( nodeIndex32 );\r\n\t\t\tconst right = RIGHT_NODE( nodeIndex32, uint32Array );\r\n\t\t\tlet c1 = left;\r\n\t\t\tlet c2 = right;\r\n\r\n\t\t\tlet score1, score2;\r\n\t\t\tlet box1, box2;\r\n\t\t\tif ( nodeScoreFunc ) {\r\n\r\n\t\t\t\tbox1 = _box1;\r\n\t\t\t\tbox2 = _box2;\r\n\r\n\t\t\t\t// bounding data is not offset\r\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\r\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\r\n\r\n\t\t\t\tscore1 = nodeScoreFunc( box1 );\r\n\t\t\t\tscore2 = nodeScoreFunc( box2 );\r\n\r\n\t\t\t\tif ( score2 < score1 ) {\r\n\r\n\t\t\t\t\tc1 = right;\r\n\t\t\t\t\tc2 = left;\r\n\r\n\t\t\t\t\tconst temp = score1;\r\n\t\t\t\t\tscore1 = score2;\r\n\t\t\t\t\tscore2 = temp;\r\n\r\n\t\t\t\t\tbox1 = box2;\r\n\t\t\t\t\t// box2 is always set before use below\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check box 1 intersection\r\n\t\t\tif ( ! box1 ) {\r\n\r\n\t\t\t\tbox1 = _box1;\r\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst isC1Leaf = IS_LEAF( c1 * 2, uint16Array );\r\n\t\t\tconst c1Intersection = intersectsBoundsFunc( box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1 );\r\n\r\n\t\t\tlet c1StopTraversal;\r\n\t\t\tif ( c1Intersection === CONTAINED ) {\r\n\r\n\t\t\t\tconst offset = getLeftOffset( c1 );\r\n\t\t\t\tconst end = getRightEndOffset( c1 );\r\n\t\t\t\tconst count = end - offset;\r\n\r\n\t\t\t\tc1StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tc1StopTraversal =\r\n\t\t\t\t\tc1Intersection &&\r\n\t\t\t\t\tshapecastTraverse(\r\n\t\t\t\t\t\tc1,\r\n\t\t\t\t\t\tgeometry,\r\n\t\t\t\t\t\tintersectsBoundsFunc,\r\n\t\t\t\t\t\tintersectsRangeFunc,\r\n\t\t\t\t\t\tnodeScoreFunc,\r\n\t\t\t\t\t\tnodeIndexByteOffset,\r\n\t\t\t\t\t\tdepth + 1\r\n\t\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( c1StopTraversal ) return true;\r\n\r\n\t\t\t// Check box 2 intersection\r\n\t\t\t// cached box2 will have been overwritten by previous traversal\r\n\t\t\tbox2 = _box2;\r\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\r\n\r\n\t\t\tconst isC2Leaf = IS_LEAF( c2 * 2, uint16Array );\r\n\t\t\tconst c2Intersection = intersectsBoundsFunc( box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2 );\r\n\r\n\t\t\tlet c2StopTraversal;\r\n\t\t\tif ( c2Intersection === CONTAINED ) {\r\n\r\n\t\t\t\tconst offset = getLeftOffset( c2 );\r\n\t\t\t\tconst end = getRightEndOffset( c2 );\r\n\t\t\t\tconst count = end - offset;\r\n\r\n\t\t\t\tc2StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tc2StopTraversal =\r\n\t\t\t\t\tc2Intersection &&\r\n\t\t\t\t\tshapecastTraverse(\r\n\t\t\t\t\t\tc2,\r\n\t\t\t\t\t\tgeometry,\r\n\t\t\t\t\t\tintersectsBoundsFunc,\r\n\t\t\t\t\t\tintersectsRangeFunc,\r\n\t\t\t\t\t\tnodeScoreFunc,\r\n\t\t\t\t\t\tnodeIndexByteOffset,\r\n\t\t\t\t\t\tdepth + 1\r\n\t\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( c2StopTraversal ) return true;\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} )();\r\n\r\nexport const intersectsGeometry = ( function () {\r\n\r\n\tconst triangle = new ExtendedTriangle();\r\n\tconst triangle2 = new ExtendedTriangle();\r\n\tconst invertedMat = new Matrix4();\r\n\r\n\tconst obb = new OrientedBox();\r\n\tconst obb2 = new OrientedBox();\r\n\r\n\treturn function intersectsGeometry( nodeIndex32, geometry, otherGeometry, geometryToBvh, cachedObb = null ) {\r\n\r\n\t\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\r\n\r\n\t\tif ( cachedObb === null ) {\r\n\r\n\t\t\tif ( ! otherGeometry.boundingBox ) {\r\n\r\n\t\t\t\totherGeometry.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\r\n\t\t\tcachedObb = obb;\r\n\r\n\t\t}\r\n\r\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\r\n\t\tif ( isLeaf ) {\r\n\r\n\t\t\tconst thisGeometry = geometry;\r\n\t\t\tconst thisIndex = thisGeometry.index;\r\n\t\t\tconst thisPos = thisGeometry.attributes.position;\r\n\r\n\t\t\tconst index = otherGeometry.index;\r\n\t\t\tconst pos = otherGeometry.attributes.position;\r\n\r\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\r\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\r\n\r\n\t\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\r\n\t\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\r\n\t\t\t// here.\r\n\t\t\tinvertedMat.copy( geometryToBvh ).invert();\r\n\r\n\t\t\tif ( otherGeometry.boundsTree ) {\r\n\r\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\r\n\t\t\t\tobb2.matrix.copy( invertedMat );\r\n\t\t\t\tobb2.needsUpdate = true;\r\n\r\n\t\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\r\n\r\n\t\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\r\n\r\n\t\t\t\t\tintersectsTriangle: tri => {\r\n\r\n\t\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\ttri.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\r\n\t\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\r\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\r\n\t\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\r\n\r\n\t\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\treturn res;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( let i = offset * 3, l = ( count + offset * 3 ); i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\r\n\t\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\r\n\t\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\r\n\t\t\t\t\ttriangle.needsUpdate = true;\r\n\r\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\r\n\r\n\t\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\r\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst left = nodeIndex32 + 8;\r\n\t\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\r\n\r\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\r\n\t\t\tconst leftIntersection =\r\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\r\n\t\t\t\tintersectsGeometry( left, geometry, otherGeometry, geometryToBvh, cachedObb );\r\n\r\n\t\t\tif ( leftIntersection ) return true;\r\n\r\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\r\n\t\t\tconst rightIntersection =\r\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\r\n\t\t\t\tintersectsGeometry( right, geometry, otherGeometry, geometryToBvh, cachedObb );\r\n\r\n\t\t\tif ( rightIntersection ) return true;\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nfunction intersectRay( nodeIndex32, array, ray, target ) {\r\n\r\n\tarrayToBox( nodeIndex32, array, boundingBox );\r\n\treturn ray.intersectBox( boundingBox, target );\r\n\r\n}\r\n\r\nconst bufferStack = [];\r\nlet _prevBuffer;\r\nlet _float32Array;\r\nlet _uint16Array;\r\nlet _uint32Array;\r\nexport function setBuffer( buffer ) {\r\n\r\n\tif ( _prevBuffer ) {\r\n\r\n\t\tbufferStack.push( _prevBuffer );\r\n\r\n\t}\r\n\r\n\t_prevBuffer = buffer;\r\n\t_float32Array = new Float32Array( buffer );\r\n\t_uint16Array = new Uint16Array( buffer );\r\n\t_uint32Array = new Uint32Array( buffer );\r\n\r\n}\r\n\r\nexport function clearBuffer() {\r\n\r\n\t_prevBuffer = null;\r\n\t_float32Array = null;\r\n\t_uint16Array = null;\r\n\t_uint32Array = null;\r\n\r\n\tif ( bufferStack.length ) {\r\n\r\n\t\tsetBuffer( bufferStack.pop() );\r\n\r\n\t}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}