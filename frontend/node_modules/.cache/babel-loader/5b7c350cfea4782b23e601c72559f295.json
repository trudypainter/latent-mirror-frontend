{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { Geometry, BufferGeometry } from 'three';\nimport { EdgeSplitModifier } from 'three/examples/jsm/modifiers/EdgeSplitModifier';\nfunction useEdgeSplit(cutOffAngle) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current && ref.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new EdgeSplitModifier();\n    }\n  }, []);\n  useEffect(() => {\n    if (original.current && ref.current && modifier.current) {\n      let geometry = new Geometry();\n      if (original.current instanceof BufferGeometry) {\n        geometry.fromBufferGeometry(original.current);\n      } else {\n        geometry = original.current.clone();\n      }\n      const modifiedGeometry = modifier.current.modify(geometry, cutOffAngle);\n      modifiedGeometry.computeVertexNormals();\n      ref.current.geometry = modifiedGeometry;\n    }\n  }, [cutOffAngle]);\n  return ref;\n}\nexport { useEdgeSplit };","map":{"version":3,"names":["useRef","useEffect","Geometry","BufferGeometry","EdgeSplitModifier","useEdgeSplit","cutOffAngle","ref","original","modifier","current","geometry","clone","fromBufferGeometry","modifiedGeometry","modify","computeVertexNormals"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/drei/useEdgeSplit.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { Geometry, BufferGeometry } from 'three';\nimport { EdgeSplitModifier } from 'three/examples/jsm/modifiers/EdgeSplitModifier';\n\nfunction useEdgeSplit(cutOffAngle) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current && ref.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new EdgeSplitModifier();\n    }\n  }, []);\n  useEffect(() => {\n    if (original.current && ref.current && modifier.current) {\n      let geometry = new Geometry();\n\n      if (original.current instanceof BufferGeometry) {\n        geometry.fromBufferGeometry(original.current);\n      } else {\n        geometry = original.current.clone();\n      }\n\n      const modifiedGeometry = modifier.current.modify(geometry, cutOffAngle);\n      modifiedGeometry.computeVertexNormals();\n      ref.current.geometry = modifiedGeometry;\n    }\n  }, [cutOffAngle]);\n  return ref;\n}\n\nexport { useEdgeSplit };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,cAAc,QAAQ,OAAO;AAChD,SAASC,iBAAiB,QAAQ,gDAAgD;AAElF,SAASC,YAAY,CAACC,WAAW,EAAE;EACjC,MAAMC,GAAG,GAAGP,MAAM,EAAE;EACpB,MAAMQ,QAAQ,GAAGR,MAAM,EAAE;EACzB,MAAMS,QAAQ,GAAGT,MAAM,EAAE;EACzBC,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,QAAQ,CAACE,OAAO,IAAIH,GAAG,CAACG,OAAO,EAAE;MACpCF,QAAQ,CAACE,OAAO,GAAGH,GAAG,CAACG,OAAO,CAACC,QAAQ,CAACC,KAAK,EAAE;MAC/CH,QAAQ,CAACC,OAAO,GAAG,IAAIN,iBAAiB,EAAE;IAC5C;EACF,CAAC,EAAE,EAAE,CAAC;EACNH,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,CAACE,OAAO,IAAIH,GAAG,CAACG,OAAO,IAAID,QAAQ,CAACC,OAAO,EAAE;MACvD,IAAIC,QAAQ,GAAG,IAAIT,QAAQ,EAAE;MAE7B,IAAIM,QAAQ,CAACE,OAAO,YAAYP,cAAc,EAAE;QAC9CQ,QAAQ,CAACE,kBAAkB,CAACL,QAAQ,CAACE,OAAO,CAAC;MAC/C,CAAC,MAAM;QACLC,QAAQ,GAAGH,QAAQ,CAACE,OAAO,CAACE,KAAK,EAAE;MACrC;MAEA,MAAME,gBAAgB,GAAGL,QAAQ,CAACC,OAAO,CAACK,MAAM,CAACJ,QAAQ,EAAEL,WAAW,CAAC;MACvEQ,gBAAgB,CAACE,oBAAoB,EAAE;MACvCT,GAAG,CAACG,OAAO,CAACC,QAAQ,GAAGG,gBAAgB;IACzC;EACF,CAAC,EAAE,CAACR,WAAW,CAAC,CAAC;EACjB,OAAOC,GAAG;AACZ;AAEA,SAASF,YAAY"},"metadata":{},"sourceType":"module"}