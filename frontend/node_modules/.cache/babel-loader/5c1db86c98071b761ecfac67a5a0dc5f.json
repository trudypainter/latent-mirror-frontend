{"ast":null,"code":"import _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BufferGeometry, Vector3, Float32BufferAttribute } from 'three';\n\n/**\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n */\nvar ParametricGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(ParametricGeometry, _BufferGeometry);\n  var _super = _createSuper(ParametricGeometry);\n  function ParametricGeometry() {\n    var _this;\n    var func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (u, v, target) {\n      return target.set(u, v, Math.cos(u) * Math.sin(v));\n    };\n    var slices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    var stacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    _classCallCheck(this, ParametricGeometry);\n    _this = _super.call(this);\n    _this.type = 'ParametricGeometry';\n    _this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks\n    }; // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    var EPS = 0.00001;\n    var normal = new Vector3();\n    var p0 = new Vector3(),\n      p1 = new Vector3();\n    var pu = new Vector3(),\n      pv = new Vector3(); // generate vertices, normals and uvs\n\n    var sliceCount = slices + 1;\n    for (var i = 0; i <= stacks; i++) {\n      var v = i / stacks;\n      for (var j = 0; j <= slices; j++) {\n        var u = j / slices; // vertex\n\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z); // normal\n        // approximate tangent vectors via finite differences\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        } // cross product of tangent vectors returns surface normal\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z); // uv\n\n        uvs.push(u, v);\n      }\n    } // generate indices\n\n    for (var _i = 0; _i < stacks; _i++) {\n      for (var _j = 0; _j < slices; _j++) {\n        var a = _i * sliceCount + _j;\n        var b = _i * sliceCount + _j + 1;\n        var c = (_i + 1) * sliceCount + _j + 1;\n        var d = (_i + 1) * sliceCount + _j; // faces one and two\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    } // build geometry\n\n    _this.setIndex(indices);\n    _this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    _this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    return _this;\n  }\n  return _createClass(ParametricGeometry);\n}(BufferGeometry);\nexport { ParametricGeometry };","map":{"version":3,"names":["BufferGeometry","Vector3","Float32BufferAttribute","ParametricGeometry","func","u","v","target","set","Math","cos","sin","slices","stacks","type","parameters","indices","vertices","normals","uvs","EPS","normal","p0","p1","pu","pv","sliceCount","i","j","push","x","y","z","subVectors","crossVectors","normalize","a","b","c","d","setIndex","setAttribute"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/geometries/ParametricGeometry.js"],"sourcesContent":["import { BufferGeometry, Vector3, Float32BufferAttribute } from 'three';\n\n/**\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\nclass ParametricGeometry extends BufferGeometry {\n  constructor(func = (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v)), slices = 8, stacks = 8) {\n    super();\n    this.type = 'ParametricGeometry';\n    this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks\n    }; // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 0.00001;\n    const normal = new Vector3();\n    const p0 = new Vector3(),\n          p1 = new Vector3();\n    const pu = new Vector3(),\n          pv = new Vector3(); // generate vertices, normals and uvs\n\n    const sliceCount = slices + 1;\n\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices; // vertex\n\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z); // normal\n        // approximate tangent vectors via finite differences\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        } // cross product of tangent vectors returns surface normal\n\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z); // uv\n\n        uvs.push(u, v);\n      }\n    } // generate indices\n\n\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j; // faces one and two\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n}\n\nexport { ParametricGeometry };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}