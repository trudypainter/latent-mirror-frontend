{"ast":null,"code":"import _toConsumableArray from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, AdditiveBlending, ShaderMaterial, Vector3, Spherical } from 'three';\nvar StarfieldMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(StarfieldMaterial, _ShaderMaterial);\n  var _super = _createSuper(StarfieldMaterial);\n  function StarfieldMaterial() {\n    _classCallCheck(this, StarfieldMaterial);\n    return _super.call(this, {\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: /* glsl */\"\\n      uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader: /* glsl */\"\\n      uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n\\n        #include <tonemapping_fragment>\\n\\t      #include <encodings_fragment>\\n      }\"\n    });\n  }\n  return _createClass(StarfieldMaterial);\n}(ShaderMaterial);\nvar genStar = function genStar(r) {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nvar Stars = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$radius = _ref.radius,\n    radius = _ref$radius === void 0 ? 100 : _ref$radius,\n    _ref$depth = _ref.depth,\n    depth = _ref$depth === void 0 ? 50 : _ref$depth,\n    _ref$count = _ref.count,\n    count = _ref$count === void 0 ? 5000 : _ref$count,\n    _ref$saturation = _ref.saturation,\n    saturation = _ref$saturation === void 0 ? 0 : _ref$saturation,\n    _ref$factor = _ref.factor,\n    factor = _ref$factor === void 0 ? 4 : _ref$factor,\n    _ref$fade = _ref.fade,\n    fade = _ref$fade === void 0 ? false : _ref$fade,\n    _ref$speed = _ref.speed,\n    speed = _ref$speed === void 0 ? 1 : _ref$speed;\n  var material = React.useRef();\n  var _React$useMemo = React.useMemo(function () {\n      var positions = [];\n      var colors = [];\n      var sizes = Array.from({\n        length: count\n      }, function () {\n        return (0.5 + 0.5 * Math.random()) * factor;\n      });\n      var color = new Color();\n      var r = radius + depth;\n      var increment = depth / count;\n      for (var i = 0; i < count; i++) {\n        r -= increment * Math.random();\n        positions.push.apply(positions, _toConsumableArray(genStar(r).toArray()));\n        color.setHSL(i / count, saturation, 0.9);\n        colors.push(color.r, color.g, color.b);\n      }\n      return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n    }, [count, depth, factor, radius, saturation]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n    position = _React$useMemo2[0],\n    color = _React$useMemo2[1],\n    size = _React$useMemo2[2];\n  useFrame(function (state) {\n    return material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed);\n  });\n  var _React$useState = React.useState(function () {\n      return new StarfieldMaterial();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    starfieldMaterial = _React$useState2[0];\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"names":["React","useFrame","Color","AdditiveBlending","ShaderMaterial","Vector3","Spherical","StarfieldMaterial","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","forwardRef","ref","radius","depth","count","saturation","factor","speed","material","useRef","useMemo","positions","colors","sizes","Array","from","length","color","increment","i","push","toArray","setHSL","g","b","Float32Array","position","size","state","current","clock","getElapsedTime","useState","starfieldMaterial","createElement","attach","args","object","blending","transparent","vertexColors"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@react-three/drei/core/Stars.js"],"sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, AdditiveBlending, ShaderMaterial, Vector3, Spherical } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <encodings_fragment>\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}