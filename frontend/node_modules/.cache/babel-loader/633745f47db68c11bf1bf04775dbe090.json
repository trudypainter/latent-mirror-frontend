{"ast":null,"code":"import _slicedToArray from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nvar CameraShake = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$intensity = _ref.intensity,\n    intensity = _ref$intensity === void 0 ? 1 : _ref$intensity,\n    decay = _ref.decay,\n    _ref$decayRate = _ref.decayRate,\n    decayRate = _ref$decayRate === void 0 ? 0.65 : _ref$decayRate,\n    _ref$maxYaw = _ref.maxYaw,\n    maxYaw = _ref$maxYaw === void 0 ? 0.1 : _ref$maxYaw,\n    _ref$maxPitch = _ref.maxPitch,\n    maxPitch = _ref$maxPitch === void 0 ? 0.1 : _ref$maxPitch,\n    _ref$maxRoll = _ref.maxRoll,\n    maxRoll = _ref$maxRoll === void 0 ? 0.1 : _ref$maxRoll,\n    _ref$yawFrequency = _ref.yawFrequency,\n    yawFrequency = _ref$yawFrequency === void 0 ? 0.1 : _ref$yawFrequency,\n    _ref$pitchFrequency = _ref.pitchFrequency,\n    pitchFrequency = _ref$pitchFrequency === void 0 ? 0.1 : _ref$pitchFrequency,\n    _ref$rollFrequency = _ref.rollFrequency,\n    rollFrequency = _ref$rollFrequency === void 0 ? 0.1 : _ref$rollFrequency;\n  var camera = useThree(function (state) {\n    return state.camera;\n  });\n  var defaultControls = useThree(function (state) {\n    return state.controls;\n  });\n  var intensityRef = React.useRef(intensity);\n  var initialRotation = React.useRef(camera.rotation.clone());\n  var _React$useState = React.useState(function () {\n      return new SimplexNoise();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    yawNoise = _React$useState2[0];\n  var _React$useState3 = React.useState(function () {\n      return new SimplexNoise();\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    pitchNoise = _React$useState4[0];\n  var _React$useState5 = React.useState(function () {\n      return new SimplexNoise();\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 1),\n    rollNoise = _React$useState6[0];\n  var constrainIntensity = function constrainIntensity() {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n  React.useImperativeHandle(ref, function () {\n    return {\n      getIntensity: function getIntensity() {\n        return intensityRef.current;\n      },\n      setIntensity: function setIntensity(val) {\n        intensityRef.current = val;\n        constrainIntensity();\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    if (defaultControls) {\n      var callback = function callback() {\n        return void (initialRotation.current = camera.rotation.clone());\n      };\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return function () {\n        return void defaultControls.removeEventListener('change', callback);\n      };\n    }\n  }, [camera, defaultControls]);\n  useFrame(function (state, delta) {\n    var shake = Math.pow(intensityRef.current, 2);\n    var yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    var pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    var roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"names":["React","useThree","useFrame","SimplexNoise","CameraShake","forwardRef","ref","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","camera","state","defaultControls","controls","intensityRef","useRef","initialRotation","rotation","clone","useState","yawNoise","pitchNoise","rollNoise","constrainIntensity","current","useImperativeHandle","getIntensity","setIntensity","val","useEffect","callback","addEventListener","removeEventListener","delta","shake","Math","pow","yaw","noise","clock","elapsedTime","pitch","roll","set","x","y","z"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@react-three/drei/core/CameraShake.js"],"sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 0.1,\n  pitchFrequency = 0.1,\n  rollFrequency = 0.1\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    if (defaultControls) {\n      const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return () => void defaultControls.removeEventListener('change', callback);\n    }\n  }, [camera, defaultControls]);\n  useFrame((state, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}