{"ast":null,"code":"import _slicedToArray from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"speed\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshPhysicalMaterial } from 'three';\nimport { useFrame } from '@react-three/fiber';\nimport distort from '../helpers/glsl/distort.vert.glsl.js';\nvar DistortMaterialImpl = /*#__PURE__*/function (_MeshPhysicalMaterial) {\n  _inherits(DistortMaterialImpl, _MeshPhysicalMaterial);\n  var _super = _createSuper(DistortMaterialImpl);\n  function DistortMaterialImpl() {\n    var _this;\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, DistortMaterialImpl);\n    _this = _super.call(this, parameters);\n    _this.setValues(parameters);\n    _this._time = {\n      value: 0\n    };\n    _this._distort = {\n      value: 0.4\n    };\n    _this._radius = {\n      value: 1\n    };\n    return _this;\n  }\n  _createClass(DistortMaterialImpl, [{\n    key: \"onBeforeCompile\",\n    value: function onBeforeCompile(shader) {\n      shader.uniforms.time = this._time;\n      shader.uniforms.radius = this._radius;\n      shader.uniforms.distort = this._distort;\n      shader.vertexShader = \"\\n      uniform float time;\\n      uniform float radius;\\n      uniform float distort;\\n      \".concat(distort, \"\\n      \").concat(shader.vertexShader, \"\\n    \");\n      shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', \"\\n        float updateTime = time / 50.0;\\n        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));\\n        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));\\n        \");\n    }\n  }, {\n    key: \"time\",\n    get: function get() {\n      return this._time.value;\n    },\n    set: function set(v) {\n      this._time.value = v;\n    }\n  }, {\n    key: \"distort\",\n    get: function get() {\n      return this._distort.value;\n    },\n    set: function set(v) {\n      this._distort.value = v;\n    }\n  }, {\n    key: \"radius\",\n    get: function get() {\n      return this._radius.value;\n    },\n    set: function set(v) {\n      this._radius.value = v;\n    }\n  }]);\n  return DistortMaterialImpl;\n}(MeshPhysicalMaterial);\nvar MeshDistortMaterial = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$speed = _ref.speed,\n    speed = _ref$speed === void 0 ? 1 : _ref$speed,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(function () {\n      return new DistortMaterialImpl();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    material = _React$useState2[0];\n  useFrame(function (state) {\n    return material && (material.time = state.clock.getElapsedTime() * speed);\n  });\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    ref: ref,\n    attach: \"material\"\n  }, props));\n});\nexport { MeshDistortMaterial };","map":{"version":3,"names":["_extends","React","MeshPhysicalMaterial","useFrame","distort","DistortMaterialImpl","parameters","setValues","_time","value","_distort","_radius","shader","uniforms","time","radius","vertexShader","replace","v","MeshDistortMaterial","forwardRef","ref","speed","props","useState","material","state","clock","getElapsedTime","createElement","object","attach"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@react-three/drei/core/MeshDistortMaterial.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshPhysicalMaterial } from 'three';\nimport { useFrame } from '@react-three/fiber';\nimport distort from '../helpers/glsl/distort.vert.glsl.js';\n\nclass DistortMaterialImpl extends MeshPhysicalMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this.setValues(parameters);\n    this._time = {\n      value: 0\n    };\n    this._distort = {\n      value: 0.4\n    };\n    this._radius = {\n      value: 1\n    };\n  }\n\n  onBeforeCompile(shader) {\n    shader.uniforms.time = this._time;\n    shader.uniforms.radius = this._radius;\n    shader.uniforms.distort = this._distort;\n    shader.vertexShader = `\n      uniform float time;\n      uniform float radius;\n      uniform float distort;\n      ${distort}\n      ${shader.vertexShader}\n    `;\n    shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        float updateTime = time / 50.0;\n        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));\n        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));\n        `);\n  }\n\n  get time() {\n    return this._time.value;\n  }\n\n  set time(v) {\n    this._time.value = v;\n  }\n\n  get distort() {\n    return this._distort.value;\n  }\n\n  set distort(v) {\n    this._distort.value = v;\n  }\n\n  get radius() {\n    return this._radius.value;\n  }\n\n  set radius(v) {\n    this._radius.value = v;\n  }\n\n}\n\nconst MeshDistortMaterial = /*#__PURE__*/React.forwardRef(({\n  speed = 1,\n  ...props\n}, ref) => {\n  const [material] = React.useState(() => new DistortMaterialImpl());\n  useFrame(state => material && (material.time = state.clock.getElapsedTime() * speed));\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    ref: ref,\n    attach: \"material\"\n  }, props));\n});\n\nexport { MeshDistortMaterial };\n"],"mappings":";;;;;;;AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,oBAAoB,QAAQ,OAAO;AAC5C,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAOC,OAAO,MAAM,sCAAsC;AAAC,IAErDC,mBAAmB;EAAA;EAAA;EACvB,+BAA6B;IAAA;IAAA,IAAjBC,UAAU,uEAAG,CAAC,CAAC;IAAA;IACzB,0BAAMA,UAAU;IAChB,MAAKC,SAAS,CAACD,UAAU,CAAC;IAC1B,MAAKE,KAAK,GAAG;MACXC,KAAK,EAAE;IACT,CAAC;IACD,MAAKC,QAAQ,GAAG;MACdD,KAAK,EAAE;IACT,CAAC;IACD,MAAKE,OAAO,GAAG;MACbF,KAAK,EAAE;IACT,CAAC;IAAC;EACJ;EAAC;IAAA;IAAA,OAED,yBAAgBG,MAAM,EAAE;MACtBA,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,IAAI,CAACN,KAAK;MACjCI,MAAM,CAACC,QAAQ,CAACE,MAAM,GAAG,IAAI,CAACJ,OAAO;MACrCC,MAAM,CAACC,QAAQ,CAACT,OAAO,GAAG,IAAI,CAACM,QAAQ;MACvCE,MAAM,CAACI,YAAY,2GAIfZ,OAAO,qBACPQ,MAAM,CAACI,YAAY,WACtB;MACDJ,MAAM,CAACI,YAAY,GAAGJ,MAAM,CAACI,YAAY,CAACC,OAAO,CAAC,yBAAyB,mNAIrE;IACR;EAAC;IAAA;IAAA,KAED,eAAW;MACT,OAAO,IAAI,CAACT,KAAK,CAACC,KAAK;IACzB,CAAC;IAAA,KAED,aAASS,CAAC,EAAE;MACV,IAAI,CAACV,KAAK,CAACC,KAAK,GAAGS,CAAC;IACtB;EAAC;IAAA;IAAA,KAED,eAAc;MACZ,OAAO,IAAI,CAACR,QAAQ,CAACD,KAAK;IAC5B,CAAC;IAAA,KAED,aAAYS,CAAC,EAAE;MACb,IAAI,CAACR,QAAQ,CAACD,KAAK,GAAGS,CAAC;IACzB;EAAC;IAAA;IAAA,KAED,eAAa;MACX,OAAO,IAAI,CAACP,OAAO,CAACF,KAAK;IAC3B,CAAC;IAAA,KAED,aAAWS,CAAC,EAAE;MACZ,IAAI,CAACP,OAAO,CAACF,KAAK,GAAGS,CAAC;IACxB;EAAC;EAAA;AAAA,EAvD+BhB,oBAAoB;AA2DtD,IAAMiB,mBAAmB,GAAG,aAAalB,KAAK,CAACmB,UAAU,CAAC,gBAGvDC,GAAG,EAAK;EAAA,sBAFTC,KAAK;IAALA,KAAK,2BAAG,CAAC;IACNC,KAAK;EAER,sBAAmBtB,KAAK,CAACuB,QAAQ,CAAC;MAAA,OAAM,IAAInB,mBAAmB,EAAE;IAAA,EAAC;IAAA;IAA3DoB,QAAQ;EACftB,QAAQ,CAAC,UAAAuB,KAAK;IAAA,OAAID,QAAQ,KAAKA,QAAQ,CAACX,IAAI,GAAGY,KAAK,CAACC,KAAK,CAACC,cAAc,EAAE,GAAGN,KAAK,CAAC;EAAA,EAAC;EACrF,OAAO,aAAarB,KAAK,CAAC4B,aAAa,CAAC,WAAW,EAAE7B,QAAQ,CAAC;IAC5D8B,MAAM,EAAEL,QAAQ;IAChBJ,GAAG,EAAEA,GAAG;IACRU,MAAM,EAAE;EACV,CAAC,EAAER,KAAK,CAAC,CAAC;AACZ,CAAC,CAAC;AAEF,SAASJ,mBAAmB"},"metadata":{},"sourceType":"module"}