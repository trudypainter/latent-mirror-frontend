{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Matrix3, Vector2, Vector3, ShapeUtils, Box2, Shape, Path, BufferGeometry, Float32BufferAttribute, ShapePath } from 'three';\nvar SVGLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(SVGLoader, _Loader);\n  var _super = _createSuper(SVGLoader);\n  function SVGLoader(manager) {\n    var _this;\n    _classCallCheck(this, SVGLoader);\n    _this = _super.call(this, manager); // Default dots per inch\n\n    _this.defaultDPI = 90; // Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\n    _this.defaultUnit = 'px';\n    return _this;\n  }\n  _createClass(SVGLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      var scope = this;\n      function parseNode(node, style) {\n        if (node.nodeType !== 1) return;\n        var transform = getNodeTransform(node);\n        var traverseChildNodes = true;\n        var path = null;\n        switch (node.nodeName) {\n          case 'svg':\n            break;\n          case 'style':\n            parseCSSStylesheet(node);\n            break;\n          case 'g':\n            style = parseStyle(node, style);\n            break;\n          case 'path':\n            style = parseStyle(node, style);\n            if (node.hasAttribute('d')) path = parsePathNode(node);\n            break;\n          case 'rect':\n            style = parseStyle(node, style);\n            path = parseRectNode(node);\n            break;\n          case 'polygon':\n            style = parseStyle(node, style);\n            path = parsePolygonNode(node);\n            break;\n          case 'polyline':\n            style = parseStyle(node, style);\n            path = parsePolylineNode(node);\n            break;\n          case 'circle':\n            style = parseStyle(node, style);\n            path = parseCircleNode(node);\n            break;\n          case 'ellipse':\n            style = parseStyle(node, style);\n            path = parseEllipseNode(node);\n            break;\n          case 'line':\n            style = parseStyle(node, style);\n            path = parseLineNode(node);\n            break;\n          case 'defs':\n            traverseChildNodes = false;\n            break;\n          case 'use':\n            style = parseStyle(node, style);\n            var usedNodeId = node.href.baseVal.substring(1);\n            var usedNode = node.viewportElement.getElementById(usedNodeId);\n            if (usedNode) {\n              parseNode(usedNode, style);\n            } else {\n              console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n            }\n            break;\n        }\n        if (path) {\n          if (style.fill !== undefined && style.fill !== 'none') {\n            path.color.setStyle(style.fill);\n          }\n          transformPath(path, currentTransform);\n          paths.push(path);\n          path.userData = {\n            node: node,\n            style: style\n          };\n        }\n        if (traverseChildNodes) {\n          var nodes = node.childNodes;\n          for (var i = 0; i < nodes.length; i++) {\n            parseNode(nodes[i], style);\n          }\n        }\n        if (transform) {\n          transformStack.pop();\n          if (transformStack.length > 0) {\n            currentTransform.copy(transformStack[transformStack.length - 1]);\n          } else {\n            currentTransform.identity();\n          }\n        }\n      }\n      function parsePathNode(node) {\n        var path = new ShapePath();\n        var point = new Vector2();\n        var control = new Vector2();\n        var firstPoint = new Vector2();\n        var isFirstPoint = true;\n        var doSetFirstPoint = false;\n        var d = node.getAttribute('d'); // console.log( d );\n\n        var commands = d.match(/[a-df-z][^a-df-z]*/gi);\n        for (var i = 0, l = commands.length; i < l; i++) {\n          var command = commands[i];\n          var type = command.charAt(0);\n          var _data = command.substr(1).trim();\n          if (isFirstPoint === true) {\n            doSetFirstPoint = true;\n            isFirstPoint = false;\n          }\n          var numbers = void 0;\n          switch (type) {\n            case 'M':\n              numbers = parseFloats(_data);\n              for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                point.x = numbers[j + 0];\n                point.y = numbers[j + 1];\n                control.x = point.x;\n                control.y = point.y;\n                if (j === 0) {\n                  path.moveTo(point.x, point.y);\n                } else {\n                  path.lineTo(point.x, point.y);\n                }\n                if (j === 0) firstPoint.copy(point);\n              }\n              break;\n            case 'H':\n              numbers = parseFloats(_data);\n              for (var _j = 0, _jl = numbers.length; _j < _jl; _j++) {\n                point.x = numbers[_j];\n                control.x = point.x;\n                control.y = point.y;\n                path.lineTo(point.x, point.y);\n                if (_j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'V':\n              numbers = parseFloats(_data);\n              for (var _j2 = 0, _jl2 = numbers.length; _j2 < _jl2; _j2++) {\n                point.y = numbers[_j2];\n                control.x = point.x;\n                control.y = point.y;\n                path.lineTo(point.x, point.y);\n                if (_j2 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'L':\n              numbers = parseFloats(_data);\n              for (var _j3 = 0, _jl3 = numbers.length; _j3 < _jl3; _j3 += 2) {\n                point.x = numbers[_j3 + 0];\n                point.y = numbers[_j3 + 1];\n                control.x = point.x;\n                control.y = point.y;\n                path.lineTo(point.x, point.y);\n                if (_j3 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'C':\n              numbers = parseFloats(_data);\n              for (var _j4 = 0, _jl4 = numbers.length; _j4 < _jl4; _j4 += 6) {\n                path.bezierCurveTo(numbers[_j4 + 0], numbers[_j4 + 1], numbers[_j4 + 2], numbers[_j4 + 3], numbers[_j4 + 4], numbers[_j4 + 5]);\n                control.x = numbers[_j4 + 2];\n                control.y = numbers[_j4 + 3];\n                point.x = numbers[_j4 + 4];\n                point.y = numbers[_j4 + 5];\n                if (_j4 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'S':\n              numbers = parseFloats(_data);\n              for (var _j5 = 0, _jl5 = numbers.length; _j5 < _jl5; _j5 += 4) {\n                path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[_j5 + 0], numbers[_j5 + 1], numbers[_j5 + 2], numbers[_j5 + 3]);\n                control.x = numbers[_j5 + 0];\n                control.y = numbers[_j5 + 1];\n                point.x = numbers[_j5 + 2];\n                point.y = numbers[_j5 + 3];\n                if (_j5 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'Q':\n              numbers = parseFloats(_data);\n              for (var _j6 = 0, _jl6 = numbers.length; _j6 < _jl6; _j6 += 4) {\n                path.quadraticCurveTo(numbers[_j6 + 0], numbers[_j6 + 1], numbers[_j6 + 2], numbers[_j6 + 3]);\n                control.x = numbers[_j6 + 0];\n                control.y = numbers[_j6 + 1];\n                point.x = numbers[_j6 + 2];\n                point.y = numbers[_j6 + 3];\n                if (_j6 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'T':\n              numbers = parseFloats(_data);\n              for (var _j7 = 0, _jl7 = numbers.length; _j7 < _jl7; _j7 += 2) {\n                var rx = getReflection(point.x, control.x);\n                var ry = getReflection(point.y, control.y);\n                path.quadraticCurveTo(rx, ry, numbers[_j7 + 0], numbers[_j7 + 1]);\n                control.x = rx;\n                control.y = ry;\n                point.x = numbers[_j7 + 0];\n                point.y = numbers[_j7 + 1];\n                if (_j7 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'A':\n              numbers = parseFloats(_data, [3, 4], 7);\n              for (var _j8 = 0, _jl8 = numbers.length; _j8 < _jl8; _j8 += 7) {\n                // skip command if start point == end point\n                if (numbers[_j8 + 5] == point.x && numbers[_j8 + 6] == point.y) continue;\n                var start = point.clone();\n                point.x = numbers[_j8 + 5];\n                point.y = numbers[_j8 + 6];\n                control.x = point.x;\n                control.y = point.y;\n                parseArcCommand(path, numbers[_j8], numbers[_j8 + 1], numbers[_j8 + 2], numbers[_j8 + 3], numbers[_j8 + 4], start, point);\n                if (_j8 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'm':\n              numbers = parseFloats(_data);\n              for (var _j9 = 0, _jl9 = numbers.length; _j9 < _jl9; _j9 += 2) {\n                point.x += numbers[_j9 + 0];\n                point.y += numbers[_j9 + 1];\n                control.x = point.x;\n                control.y = point.y;\n                if (_j9 === 0) {\n                  path.moveTo(point.x, point.y);\n                } else {\n                  path.lineTo(point.x, point.y);\n                }\n                if (_j9 === 0) firstPoint.copy(point);\n              }\n              break;\n            case 'h':\n              numbers = parseFloats(_data);\n              for (var _j10 = 0, _jl10 = numbers.length; _j10 < _jl10; _j10++) {\n                point.x += numbers[_j10];\n                control.x = point.x;\n                control.y = point.y;\n                path.lineTo(point.x, point.y);\n                if (_j10 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'v':\n              numbers = parseFloats(_data);\n              for (var _j11 = 0, _jl11 = numbers.length; _j11 < _jl11; _j11++) {\n                point.y += numbers[_j11];\n                control.x = point.x;\n                control.y = point.y;\n                path.lineTo(point.x, point.y);\n                if (_j11 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'l':\n              numbers = parseFloats(_data);\n              for (var _j12 = 0, _jl12 = numbers.length; _j12 < _jl12; _j12 += 2) {\n                point.x += numbers[_j12 + 0];\n                point.y += numbers[_j12 + 1];\n                control.x = point.x;\n                control.y = point.y;\n                path.lineTo(point.x, point.y);\n                if (_j12 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'c':\n              numbers = parseFloats(_data);\n              for (var _j13 = 0, _jl13 = numbers.length; _j13 < _jl13; _j13 += 6) {\n                path.bezierCurveTo(point.x + numbers[_j13 + 0], point.y + numbers[_j13 + 1], point.x + numbers[_j13 + 2], point.y + numbers[_j13 + 3], point.x + numbers[_j13 + 4], point.y + numbers[_j13 + 5]);\n                control.x = point.x + numbers[_j13 + 2];\n                control.y = point.y + numbers[_j13 + 3];\n                point.x += numbers[_j13 + 4];\n                point.y += numbers[_j13 + 5];\n                if (_j13 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 's':\n              numbers = parseFloats(_data);\n              for (var _j14 = 0, _jl14 = numbers.length; _j14 < _jl14; _j14 += 4) {\n                path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[_j14 + 0], point.y + numbers[_j14 + 1], point.x + numbers[_j14 + 2], point.y + numbers[_j14 + 3]);\n                control.x = point.x + numbers[_j14 + 0];\n                control.y = point.y + numbers[_j14 + 1];\n                point.x += numbers[_j14 + 2];\n                point.y += numbers[_j14 + 3];\n                if (_j14 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'q':\n              numbers = parseFloats(_data);\n              for (var _j15 = 0, _jl15 = numbers.length; _j15 < _jl15; _j15 += 4) {\n                path.quadraticCurveTo(point.x + numbers[_j15 + 0], point.y + numbers[_j15 + 1], point.x + numbers[_j15 + 2], point.y + numbers[_j15 + 3]);\n                control.x = point.x + numbers[_j15 + 0];\n                control.y = point.y + numbers[_j15 + 1];\n                point.x += numbers[_j15 + 2];\n                point.y += numbers[_j15 + 3];\n                if (_j15 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 't':\n              numbers = parseFloats(_data);\n              for (var _j16 = 0, _jl16 = numbers.length; _j16 < _jl16; _j16 += 2) {\n                var _rx = getReflection(point.x, control.x);\n                var _ry = getReflection(point.y, control.y);\n                path.quadraticCurveTo(_rx, _ry, point.x + numbers[_j16 + 0], point.y + numbers[_j16 + 1]);\n                control.x = _rx;\n                control.y = _ry;\n                point.x = point.x + numbers[_j16 + 0];\n                point.y = point.y + numbers[_j16 + 1];\n                if (_j16 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'a':\n              numbers = parseFloats(_data, [3, 4], 7);\n              for (var _j17 = 0, _jl17 = numbers.length; _j17 < _jl17; _j17 += 7) {\n                // skip command if no displacement\n                if (numbers[_j17 + 5] == 0 && numbers[_j17 + 6] == 0) continue;\n                var _start = point.clone();\n                point.x += numbers[_j17 + 5];\n                point.y += numbers[_j17 + 6];\n                control.x = point.x;\n                control.y = point.y;\n                parseArcCommand(path, numbers[_j17], numbers[_j17 + 1], numbers[_j17 + 2], numbers[_j17 + 3], numbers[_j17 + 4], _start, point);\n                if (_j17 === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n              }\n              break;\n            case 'Z':\n            case 'z':\n              path.currentPath.autoClose = true;\n              if (path.currentPath.curves.length > 0) {\n                // Reset point to beginning of Path\n                point.copy(firstPoint);\n                path.currentPath.currentPoint.copy(point);\n                isFirstPoint = true;\n              }\n              break;\n            default:\n              console.warn(command);\n          } // console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n          doSetFirstPoint = false;\n        }\n        return path;\n      }\n      function parseCSSStylesheet(node) {\n        if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n        for (var i = 0; i < node.sheet.cssRules.length; i++) {\n          var stylesheet = node.sheet.cssRules[i];\n          if (stylesheet.type !== 1) continue;\n          var selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(function (i) {\n            return i.trim();\n          });\n          for (var j = 0; j < selectorList.length; j++) {\n            stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n          }\n        }\n      }\n      /**\n       * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n       * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n       * From\n       * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n       * To\n       * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n       */\n\n      function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n        if (rx == 0 || ry == 0) {\n          // draw a line if either of the radii == 0\n          path.lineTo(end.x, end.y);\n          return;\n        }\n        x_axis_rotation = x_axis_rotation * Math.PI / 180; // Ensure radii are positive\n\n        rx = Math.abs(rx);\n        ry = Math.abs(ry); // Compute (x1', y1')\n\n        var dx2 = (start.x - end.x) / 2.0;\n        var dy2 = (start.y - end.y) / 2.0;\n        var x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n        var y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2; // Compute (cx', cy')\n\n        var rxs = rx * rx;\n        var rys = ry * ry;\n        var x1ps = x1p * x1p;\n        var y1ps = y1p * y1p; // Ensure radii are large enough\n\n        var cr = x1ps / rxs + y1ps / rys;\n        if (cr > 1) {\n          // scale up rx,ry equally so cr == 1\n          var s = Math.sqrt(cr);\n          rx = s * rx;\n          ry = s * ry;\n          rxs = rx * rx;\n          rys = ry * ry;\n        }\n        var dq = rxs * y1ps + rys * x1ps;\n        var pq = (rxs * rys - dq) / dq;\n        var q = Math.sqrt(Math.max(0, pq));\n        if (large_arc_flag === sweep_flag) q = -q;\n        var cxp = q * rx * y1p / ry;\n        var cyp = -q * ry * x1p / rx; // Step 3: Compute (cx, cy) from (cx', cy')\n\n        var cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n        var cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2; // Step 4: Compute θ1 and Δθ\n\n        var theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n        var delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n        path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n      }\n      function svgAngle(ux, uy, vx, vy) {\n        var dot = ux * vx + uy * vy;\n        var len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n        var ang = Math.acos(Math.max(-1, Math.min(1, dot / len))); // floating point precision, slightly over values appear\n\n        if (ux * vy - uy * vx < 0) ang = -ang;\n        return ang;\n      }\n      /*\n       * According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n       * rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n       */\n\n      function parseRectNode(node) {\n        var x = parseFloatWithUnits(node.getAttribute('x') || 0);\n        var y = parseFloatWithUnits(node.getAttribute('y') || 0);\n        var rx = parseFloatWithUnits(node.getAttribute('rx') || node.getAttribute('ry') || 0);\n        var ry = parseFloatWithUnits(node.getAttribute('ry') || node.getAttribute('rx') || 0);\n        var w = parseFloatWithUnits(node.getAttribute('width'));\n        var h = parseFloatWithUnits(node.getAttribute('height')); // Ellipse arc to Bezier approximation Coefficient (Inversed). See:\n        // https://spencermortensen.com/articles/bezier-circle/\n\n        var bci = 1 - 0.551915024494;\n        var path = new ShapePath(); // top left\n\n        path.moveTo(x + rx, y); // top right\n\n        path.lineTo(x + w - rx, y);\n        if (rx !== 0 || ry !== 0) {\n          path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n        } // bottom right\n\n        path.lineTo(x + w, y + h - ry);\n        if (rx !== 0 || ry !== 0) {\n          path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n        } // bottom left\n\n        path.lineTo(x + rx, y + h);\n        if (rx !== 0 || ry !== 0) {\n          path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n        } // back to top left\n\n        path.lineTo(x, y + ry);\n        if (rx !== 0 || ry !== 0) {\n          path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n        }\n        return path;\n      }\n      function parsePolygonNode(node) {\n        function iterator(match, a, b) {\n          var x = parseFloatWithUnits(a);\n          var y = parseFloatWithUnits(b);\n          if (index === 0) {\n            path.moveTo(x, y);\n          } else {\n            path.lineTo(x, y);\n          }\n          index++;\n        }\n        var regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n        var path = new ShapePath();\n        var index = 0;\n        node.getAttribute('points').replace(regex, iterator);\n        path.currentPath.autoClose = true;\n        return path;\n      }\n      function parsePolylineNode(node) {\n        function iterator(match, a, b) {\n          var x = parseFloatWithUnits(a);\n          var y = parseFloatWithUnits(b);\n          if (index === 0) {\n            path.moveTo(x, y);\n          } else {\n            path.lineTo(x, y);\n          }\n          index++;\n        }\n        var regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n        var path = new ShapePath();\n        var index = 0;\n        node.getAttribute('points').replace(regex, iterator);\n        path.currentPath.autoClose = false;\n        return path;\n      }\n      function parseCircleNode(node) {\n        var x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n        var y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n        var r = parseFloatWithUnits(node.getAttribute('r') || 0);\n        var subpath = new Path();\n        subpath.absarc(x, y, r, 0, Math.PI * 2);\n        var path = new ShapePath();\n        path.subPaths.push(subpath);\n        return path;\n      }\n      function parseEllipseNode(node) {\n        var x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n        var y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n        var rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n        var ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n        var subpath = new Path();\n        subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n        var path = new ShapePath();\n        path.subPaths.push(subpath);\n        return path;\n      }\n      function parseLineNode(node) {\n        var x1 = parseFloatWithUnits(node.getAttribute('x1') || 0);\n        var y1 = parseFloatWithUnits(node.getAttribute('y1') || 0);\n        var x2 = parseFloatWithUnits(node.getAttribute('x2') || 0);\n        var y2 = parseFloatWithUnits(node.getAttribute('y2') || 0);\n        var path = new ShapePath();\n        path.moveTo(x1, y1);\n        path.lineTo(x2, y2);\n        path.currentPath.autoClose = false;\n        return path;\n      } //\n\n      function parseStyle(node, style) {\n        style = Object.assign({}, style); // clone style\n\n        var stylesheetStyles = {};\n        if (node.hasAttribute('class')) {\n          var classSelectors = node.getAttribute('class').split(/\\s/).filter(Boolean).map(function (i) {\n            return i.trim();\n          });\n          for (var i = 0; i < classSelectors.length; i++) {\n            stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['.' + classSelectors[i]]);\n          }\n        }\n        if (node.hasAttribute('id')) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['#' + node.getAttribute('id')]);\n        }\n        function addStyle(svgName, jsName, adjustFunction) {\n          if (adjustFunction === undefined) {\n            adjustFunction = function copy(v) {\n              if (v.startsWith('url')) console.warn('SVGLoader: url access in attributes is not implemented.');\n              return v;\n            };\n          }\n          if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n          if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n          if (node.style && node.style[svgName] !== '') style[jsName] = adjustFunction(node.style[svgName]);\n        }\n        function clamp(v) {\n          return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n        }\n        function positive(v) {\n          return Math.max(0, parseFloatWithUnits(v));\n        }\n        addStyle('fill', 'fill');\n        addStyle('fill-opacity', 'fillOpacity', clamp);\n        addStyle('fill-rule', 'fillRule');\n        addStyle('opacity', 'opacity', clamp);\n        addStyle('stroke', 'stroke');\n        addStyle('stroke-opacity', 'strokeOpacity', clamp);\n        addStyle('stroke-width', 'strokeWidth', positive);\n        addStyle('stroke-linejoin', 'strokeLineJoin');\n        addStyle('stroke-linecap', 'strokeLineCap');\n        addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n        addStyle('visibility', 'visibility');\n        return style;\n      } // http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n      function getReflection(a, b) {\n        return a - (b - a);\n      } // from https://github.com/ppvg/svg-numbers (MIT License)\n\n      function parseFloats(input, flags, stride) {\n        if (typeof input !== 'string') {\n          throw new TypeError('Invalid input: ' + typeof input);\n        } // Character groups\n\n        var RE = {\n          SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n          WHITESPACE: /[ \\t\\r\\n]/,\n          DIGIT: /[\\d]/,\n          SIGN: /[-+]/,\n          POINT: /\\./,\n          COMMA: /,/,\n          EXP: /e/i,\n          FLAGS: /[01]/\n        }; // States\n\n        var SEP = 0;\n        var INT = 1;\n        var FLOAT = 2;\n        var EXP = 3;\n        var state = SEP;\n        var seenComma = true;\n        var number = '',\n          exponent = '';\n        var result = [];\n        function throwSyntaxError(current, i, partial) {\n          var error = new SyntaxError('Unexpected character \"' + current + '\" at index ' + i + '.');\n          error.partial = partial;\n          throw error;\n        }\n        function newNumber() {\n          if (number !== '') {\n            if (exponent === '') result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n          }\n          number = '';\n          exponent = '';\n        }\n        var current;\n        var length = input.length;\n        for (var i = 0; i < length; i++) {\n          current = input[i]; // check for flags\n\n          if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n            state = INT;\n            number = current;\n            newNumber();\n            continue;\n          } // parse until next number\n\n          if (state === SEP) {\n            // eat whitespace\n            if (RE.WHITESPACE.test(current)) {\n              continue;\n            } // start new number\n\n            if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n              state = INT;\n              number = current;\n              continue;\n            }\n            if (RE.POINT.test(current)) {\n              state = FLOAT;\n              number = current;\n              continue;\n            } // throw on double commas (e.g. \"1, , 2\")\n\n            if (RE.COMMA.test(current)) {\n              if (seenComma) {\n                throwSyntaxError(current, i, result);\n              }\n              seenComma = true;\n            }\n          } // parse integer part\n\n          if (state === INT) {\n            if (RE.DIGIT.test(current)) {\n              number += current;\n              continue;\n            }\n            if (RE.POINT.test(current)) {\n              number += current;\n              state = FLOAT;\n              continue;\n            }\n            if (RE.EXP.test(current)) {\n              state = EXP;\n              continue;\n            } // throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n\n            if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n              throwSyntaxError(current, i, result);\n            }\n          } // parse decimal part\n\n          if (state === FLOAT) {\n            if (RE.DIGIT.test(current)) {\n              number += current;\n              continue;\n            }\n            if (RE.EXP.test(current)) {\n              state = EXP;\n              continue;\n            } // throw on double decimal points (e.g. \"1..2\")\n\n            if (RE.POINT.test(current) && number[number.length - 1] === '.') {\n              throwSyntaxError(current, i, result);\n            }\n          } // parse exponent part\n\n          if (state === EXP) {\n            if (RE.DIGIT.test(current)) {\n              exponent += current;\n              continue;\n            }\n            if (RE.SIGN.test(current)) {\n              if (exponent === '') {\n                exponent += current;\n                continue;\n              }\n              if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n                throwSyntaxError(current, i, result);\n              }\n            }\n          } // end of number\n\n          if (RE.WHITESPACE.test(current)) {\n            newNumber();\n            state = SEP;\n            seenComma = false;\n          } else if (RE.COMMA.test(current)) {\n            newNumber();\n            state = SEP;\n            seenComma = true;\n          } else if (RE.SIGN.test(current)) {\n            newNumber();\n            state = INT;\n            number = current;\n          } else if (RE.POINT.test(current)) {\n            newNumber();\n            state = FLOAT;\n            number = current;\n          } else {\n            throwSyntaxError(current, i, result);\n          }\n        } // add the last number found (if any)\n\n        newNumber();\n        return result;\n      } // Units\n\n      var units = ['mm', 'cm', 'in', 'pt', 'pc', 'px']; // Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\n      var unitConversion = {\n        mm: {\n          mm: 1,\n          cm: 0.1,\n          in: 1 / 25.4,\n          pt: 72 / 25.4,\n          pc: 6 / 25.4,\n          px: -1\n        },\n        cm: {\n          mm: 10,\n          cm: 1,\n          in: 1 / 2.54,\n          pt: 72 / 2.54,\n          pc: 6 / 2.54,\n          px: -1\n        },\n        in: {\n          mm: 25.4,\n          cm: 2.54,\n          in: 1,\n          pt: 72,\n          pc: 6,\n          px: -1\n        },\n        pt: {\n          mm: 25.4 / 72,\n          cm: 2.54 / 72,\n          in: 1 / 72,\n          pt: 1,\n          pc: 6 / 72,\n          px: -1\n        },\n        pc: {\n          mm: 25.4 / 6,\n          cm: 2.54 / 6,\n          in: 1 / 6,\n          pt: 72 / 6,\n          pc: 1,\n          px: -1\n        },\n        px: {\n          px: 1\n        }\n      };\n      function parseFloatWithUnits(string) {\n        var theUnit = 'px';\n        if (typeof string === 'string' || string instanceof String) {\n          for (var i = 0, n = units.length; i < n; i++) {\n            var u = units[i];\n            if (string.endsWith(u)) {\n              theUnit = u;\n              string = string.substring(0, string.length - u.length);\n              break;\n            }\n          }\n        }\n        var scale = undefined;\n        if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n          // Conversion scale from  pixels to inches, then to default units\n          scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n        } else {\n          scale = unitConversion[theUnit][scope.defaultUnit];\n          if (scale < 0) {\n            // Conversion scale to pixels\n            scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n          }\n        }\n        return scale * parseFloat(string);\n      } // Transforms\n\n      function getNodeTransform(node) {\n        if (!(node.hasAttribute('transform') || node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y')))) {\n          return null;\n        }\n        var transform = parseNodeTransform(node);\n        if (transformStack.length > 0) {\n          transform.premultiply(transformStack[transformStack.length - 1]);\n        }\n        currentTransform.copy(transform);\n        transformStack.push(transform);\n        return transform;\n      }\n      function parseNodeTransform(node) {\n        var transform = new Matrix3();\n        var currentTransform = tempTransform0;\n        if (node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y'))) {\n          var tx = parseFloatWithUnits(node.getAttribute('x'));\n          var ty = parseFloatWithUnits(node.getAttribute('y'));\n          transform.translate(tx, ty);\n        }\n        if (node.hasAttribute('transform')) {\n          var transformsTexts = node.getAttribute('transform').split(')');\n          for (var tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n            var transformText = transformsTexts[tIndex].trim();\n            if (transformText === '') continue;\n            var openParPos = transformText.indexOf('(');\n            var closeParPos = transformText.length;\n            if (openParPos > 0 && openParPos < closeParPos) {\n              var transformType = transformText.substr(0, openParPos);\n              var array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n              currentTransform.identity();\n              switch (transformType) {\n                case 'translate':\n                  if (array.length >= 1) {\n                    var _tx = array[0];\n                    var _ty = _tx;\n                    if (array.length >= 2) {\n                      _ty = array[1];\n                    }\n                    currentTransform.translate(_tx, _ty);\n                  }\n                  break;\n                case 'rotate':\n                  if (array.length >= 1) {\n                    var angle = 0;\n                    var cx = 0;\n                    var cy = 0; // Angle\n\n                    angle = -array[0] * Math.PI / 180;\n                    if (array.length >= 3) {\n                      // Center x, y\n                      cx = array[1];\n                      cy = array[2];\n                    } // Rotate around center (cx, cy)\n\n                    tempTransform1.identity().translate(-cx, -cy);\n                    tempTransform2.identity().rotate(angle);\n                    tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                    tempTransform1.identity().translate(cx, cy);\n                    currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                  }\n                  break;\n                case 'scale':\n                  if (array.length >= 1) {\n                    var scaleX = array[0];\n                    var scaleY = scaleX;\n                    if (array.length >= 2) {\n                      scaleY = array[1];\n                    }\n                    currentTransform.scale(scaleX, scaleY);\n                  }\n                  break;\n                case 'skewX':\n                  if (array.length === 1) {\n                    currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                  }\n                  break;\n                case 'skewY':\n                  if (array.length === 1) {\n                    currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                  }\n                  break;\n                case 'matrix':\n                  if (array.length === 6) {\n                    currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                  }\n                  break;\n              }\n            }\n            transform.premultiply(currentTransform);\n          }\n        }\n        return transform;\n      }\n      function transformPath(path, m) {\n        function transfVec2(v2) {\n          tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n          v2.set(tempV3.x, tempV3.y);\n        }\n        var isRotated = isTransformRotated(m);\n        var subPaths = path.subPaths;\n        for (var i = 0, n = subPaths.length; i < n; i++) {\n          var subPath = subPaths[i];\n          var curves = subPath.curves;\n          for (var j = 0; j < curves.length; j++) {\n            var curve = curves[j];\n            if (curve.isLineCurve) {\n              transfVec2(curve.v1);\n              transfVec2(curve.v2);\n            } else if (curve.isCubicBezierCurve) {\n              transfVec2(curve.v0);\n              transfVec2(curve.v1);\n              transfVec2(curve.v2);\n              transfVec2(curve.v3);\n            } else if (curve.isQuadraticBezierCurve) {\n              transfVec2(curve.v0);\n              transfVec2(curve.v1);\n              transfVec2(curve.v2);\n            } else if (curve.isEllipseCurve) {\n              if (isRotated) {\n                console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n              }\n              tempV2.set(curve.aX, curve.aY);\n              transfVec2(tempV2);\n              curve.aX = tempV2.x;\n              curve.aY = tempV2.y;\n              curve.xRadius *= getTransformScaleX(m);\n              curve.yRadius *= getTransformScaleY(m);\n            }\n          }\n        }\n      }\n      function isTransformRotated(m) {\n        return m.elements[1] !== 0 || m.elements[3] !== 0;\n      }\n      function getTransformScaleX(m) {\n        var te = m.elements;\n        return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n      }\n      function getTransformScaleY(m) {\n        var te = m.elements;\n        return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n      } //\n\n      var paths = [];\n      var stylesheets = {};\n      var transformStack = [];\n      var tempTransform0 = new Matrix3();\n      var tempTransform1 = new Matrix3();\n      var tempTransform2 = new Matrix3();\n      var tempTransform3 = new Matrix3();\n      var tempV2 = new Vector2();\n      var tempV3 = new Vector3();\n      var currentTransform = new Matrix3();\n      var xml = new DOMParser().parseFromString(text, 'image/svg+xml'); // application/xml\n\n      parseNode(xml.documentElement, {\n        fill: '#000',\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        strokeWidth: 1,\n        strokeLineJoin: 'miter',\n        strokeLineCap: 'butt',\n        strokeMiterLimit: 4\n      });\n      var data = {\n        paths: paths,\n        xml: xml.documentElement\n      }; // console.log( paths );\n\n      return data;\n    }\n  }], [{\n    key: \"createShapes\",\n    value: function createShapes(shapePath) {\n      // Param shapePath: a shapepath as returned by the parse function of this class\n      // Returns Shape object\n      var BIGNUMBER = 999999999;\n      var IntersectionLocationType = {\n        ORIGIN: 0,\n        DESTINATION: 1,\n        BETWEEN: 2,\n        LEFT: 3,\n        RIGHT: 4,\n        BEHIND: 5,\n        BEYOND: 6\n      };\n      var classifyResult = {\n        loc: IntersectionLocationType.ORIGIN,\n        t: 0\n      };\n      function findEdgeIntersection(a0, a1, b0, b1) {\n        var x1 = a0.x;\n        var x2 = a1.x;\n        var x3 = b0.x;\n        var x4 = b1.x;\n        var y1 = a0.y;\n        var y2 = a1.y;\n        var y3 = b0.y;\n        var y4 = b1.y;\n        var nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n        var nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n        var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n        var t1 = nom1 / denom;\n        var t2 = nom2 / denom;\n        if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n          //1. lines are parallel or edges don't intersect\n          return null;\n        } else if (nom1 === 0 && denom === 0) {\n          //2. lines are colinear\n          //check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n          for (var i = 0; i < 2; i++) {\n            classifyPoint(i === 0 ? b0 : b1, a0, a1); //find position of this endpoints relatively to edge1\n\n            if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n              var point = i === 0 ? b0 : b1;\n              return {\n                x: point.x,\n                y: point.y,\n                t: classifyResult.t\n              };\n            } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n              var x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n              var y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n              return {\n                x: x,\n                y: y,\n                t: classifyResult.t\n              };\n            }\n          }\n          return null;\n        } else {\n          //3. edges intersect\n          for (var _i = 0; _i < 2; _i++) {\n            classifyPoint(_i === 0 ? b0 : b1, a0, a1);\n            if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n              var _point = _i === 0 ? b0 : b1;\n              return {\n                x: _point.x,\n                y: _point.y,\n                t: classifyResult.t\n              };\n            }\n          }\n          var _x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n          var _y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n          return {\n            x: _x,\n            y: _y,\n            t: t1\n          };\n        }\n      }\n      function classifyPoint(p, edgeStart, edgeEnd) {\n        var ax = edgeEnd.x - edgeStart.x;\n        var ay = edgeEnd.y - edgeStart.y;\n        var bx = p.x - edgeStart.x;\n        var by = p.y - edgeStart.y;\n        var sa = ax * by - bx * ay;\n        if (p.x === edgeStart.x && p.y === edgeStart.y) {\n          classifyResult.loc = IntersectionLocationType.ORIGIN;\n          classifyResult.t = 0;\n          return;\n        }\n        if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n          classifyResult.loc = IntersectionLocationType.DESTINATION;\n          classifyResult.t = 1;\n          return;\n        }\n        if (sa < -Number.EPSILON) {\n          classifyResult.loc = IntersectionLocationType.LEFT;\n          return;\n        }\n        if (sa > Number.EPSILON) {\n          classifyResult.loc = IntersectionLocationType.RIGHT;\n          return;\n        }\n        if (ax * bx < 0 || ay * by < 0) {\n          classifyResult.loc = IntersectionLocationType.BEHIND;\n          return;\n        }\n        if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n          classifyResult.loc = IntersectionLocationType.BEYOND;\n          return;\n        }\n        var t;\n        if (ax !== 0) {\n          t = bx / ax;\n        } else {\n          t = by / ay;\n        }\n        classifyResult.loc = IntersectionLocationType.BETWEEN;\n        classifyResult.t = t;\n      }\n      function getIntersections(path1, path2) {\n        var intersectionsRaw = [];\n        var intersections = [];\n        for (var index = 1; index < path1.length; index++) {\n          var path1EdgeStart = path1[index - 1];\n          var path1EdgeEnd = path1[index];\n          var _loop = function _loop(index2) {\n            var path2EdgeStart = path2[index2 - 1];\n            var path2EdgeEnd = path2[index2];\n            var intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n            if (intersection !== null && intersectionsRaw.find(function (i) {\n              return i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON;\n            }) === undefined) {\n              intersectionsRaw.push(intersection);\n              intersections.push(new Vector2(intersection.x, intersection.y));\n            }\n          };\n          for (var index2 = 1; index2 < path2.length; index2++) {\n            _loop(index2);\n          }\n        }\n        return intersections;\n      }\n      function getScanlineIntersections(scanline, boundingBox, paths) {\n        var center = new Vector2();\n        boundingBox.getCenter(center);\n        var allIntersections = [];\n        paths.forEach(function (path) {\n          // check if the center of the bounding box is in the bounding box of the paths.\n          // this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n          // if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n          if (path.boundingBox.containsPoint(center)) {\n            var intersections = getIntersections(scanline, path.points);\n            intersections.forEach(function (p) {\n              allIntersections.push({\n                identifier: path.identifier,\n                isCW: path.isCW,\n                point: p\n              });\n            });\n          }\n        });\n        allIntersections.sort(function (i1, i2) {\n          return i1.point.x - i2.point.x;\n        });\n        return allIntersections;\n      }\n      function isHoleTo(simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule) {\n        if (_fillRule === null || _fillRule === undefined || _fillRule === '') {\n          _fillRule = 'nonzero';\n        }\n        var centerBoundingBox = new Vector2();\n        simplePath.boundingBox.getCenter(centerBoundingBox);\n        var scanline = [new Vector2(scanlineMinX, centerBoundingBox.y), new Vector2(scanlineMaxX, centerBoundingBox.y)];\n        var scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n        scanlineIntersections.sort(function (i1, i2) {\n          return i1.point.x - i2.point.x;\n        });\n        var baseIntersections = [];\n        var otherIntersections = [];\n        scanlineIntersections.forEach(function (i) {\n          if (i.identifier === simplePath.identifier) {\n            baseIntersections.push(i);\n          } else {\n            otherIntersections.push(i);\n          }\n        });\n        var firstXOfPath = baseIntersections[0].point.x; // build up the path hierarchy\n\n        var stack = [];\n        var i = 0;\n        while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n          if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n            stack.pop();\n          } else {\n            stack.push(otherIntersections[i].identifier);\n          }\n          i++;\n        }\n        stack.push(simplePath.identifier);\n        if (_fillRule === 'evenodd') {\n          var isHole = stack.length % 2 === 0 ? true : false;\n          var isHoleFor = stack[stack.length - 2];\n          return {\n            identifier: simplePath.identifier,\n            isHole: isHole,\n            for: isHoleFor\n          };\n        } else if (_fillRule === 'nonzero') {\n          // check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n          var _isHole = true;\n          var _isHoleFor = null;\n          var lastCWValue = null;\n          for (var _i2 = 0; _i2 < stack.length; _i2++) {\n            var _identifier = stack[_i2];\n            if (_isHole) {\n              lastCWValue = allPaths[_identifier].isCW;\n              _isHole = false;\n              _isHoleFor = _identifier;\n            } else if (lastCWValue !== allPaths[_identifier].isCW) {\n              lastCWValue = allPaths[_identifier].isCW;\n              _isHole = true;\n            }\n          }\n          return {\n            identifier: simplePath.identifier,\n            isHole: _isHole,\n            for: _isHoleFor\n          };\n        } else {\n          console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n        }\n      } // check for self intersecting paths\n      // TODO\n      // check intersecting paths\n      // TODO\n      // prepare paths for hole detection\n\n      var identifier = 0;\n      var scanlineMinX = BIGNUMBER;\n      var scanlineMaxX = -BIGNUMBER;\n      var simplePaths = shapePath.subPaths.map(function (p) {\n        var points = p.getPoints();\n        var maxY = -BIGNUMBER;\n        var minY = BIGNUMBER;\n        var maxX = -BIGNUMBER;\n        var minX = BIGNUMBER; //points.forEach(p => p.y *= -1);\n\n        for (var i = 0; i < points.length; i++) {\n          var _p = points[i];\n          if (_p.y > maxY) {\n            maxY = _p.y;\n          }\n          if (_p.y < minY) {\n            minY = _p.y;\n          }\n          if (_p.x > maxX) {\n            maxX = _p.x;\n          }\n          if (_p.x < minX) {\n            minX = _p.x;\n          }\n        } //\n\n        if (scanlineMaxX <= maxX) {\n          scanlineMaxX = maxX + 1;\n        }\n        if (scanlineMinX >= minX) {\n          scanlineMinX = minX - 1;\n        }\n        return {\n          curves: p.curves,\n          points: points,\n          isCW: ShapeUtils.isClockWise(points),\n          identifier: identifier++,\n          boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n        };\n      });\n      simplePaths = simplePaths.filter(function (sp) {\n        return sp.points.length > 1;\n      }); // check if path is solid or a hole\n\n      var isAHole = simplePaths.map(function (p) {\n        return isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule);\n      });\n      var shapesToReturn = [];\n      simplePaths.forEach(function (p) {\n        var amIAHole = isAHole[p.identifier];\n        if (!amIAHole.isHole) {\n          var shape = new Shape();\n          shape.curves = p.curves;\n          var holes = isAHole.filter(function (h) {\n            return h.isHole && h.for === p.identifier;\n          });\n          holes.forEach(function (h) {\n            var hole = simplePaths[h.identifier];\n            var path = new Path();\n            path.curves = hole.curves;\n            shape.holes.push(path);\n          });\n          shapesToReturn.push(shape);\n        }\n      });\n      return shapesToReturn;\n    }\n  }, {\n    key: \"getStrokeStyle\",\n    value: function getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n      // Param width: Stroke width\n      // Param color: As returned by THREE.Color.getStyle()\n      // Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n      // Param lineCap: One of \"round\", \"square\" or \"butt\"\n      // Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n      // Returns style object\n      width = width !== undefined ? width : 1;\n      color = color !== undefined ? color : '#000';\n      lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n      lineCap = lineCap !== undefined ? lineCap : 'butt';\n      miterLimit = miterLimit !== undefined ? miterLimit : 4;\n      return {\n        strokeColor: color,\n        strokeWidth: width,\n        strokeLineJoin: lineJoin,\n        strokeLineCap: lineCap,\n        strokeMiterLimit: miterLimit\n      };\n    }\n  }, {\n    key: \"pointsToStroke\",\n    value: function pointsToStroke(points, style, arcDivisions, minDistance) {\n      // Generates a stroke with some witdh around the given path.\n      // The path can be open or closed (last point equals to first point)\n      // Param points: Array of Vector2D (the path). Minimum 2 points.\n      // Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n      // Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n      // Param minDistance: Points closer to this distance will be merged. (Optional)\n      // Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n      if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n        return null;\n      }\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      return geometry;\n    }\n  }, {\n    key: \"pointsToStrokeWithBuffers\",\n    value: function pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n      // This function can be called to update existing arrays or buffers.\n      // Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n      // Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n      // Returns number of written vertices / normals / uvs pairs\n      // if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n      // 'normals' and 'uvs' buffers are optional\n      var tempV2_1 = new Vector2();\n      var tempV2_2 = new Vector2();\n      var tempV2_3 = new Vector2();\n      var tempV2_4 = new Vector2();\n      var tempV2_5 = new Vector2();\n      var tempV2_6 = new Vector2();\n      var tempV2_7 = new Vector2();\n      var lastPointL = new Vector2();\n      var lastPointR = new Vector2();\n      var point0L = new Vector2();\n      var point0R = new Vector2();\n      var currentPointL = new Vector2();\n      var currentPointR = new Vector2();\n      var nextPointL = new Vector2();\n      var nextPointR = new Vector2();\n      var innerPoint = new Vector2();\n      var outerPoint = new Vector2();\n      arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n      minDistance = minDistance !== undefined ? minDistance : 0.001;\n      vertexOffset = vertexOffset !== undefined ? vertexOffset : 0; // First ensure there are no duplicated points\n\n      points = removeDuplicatedPoints(points);\n      var numPoints = points.length;\n      if (numPoints < 2) return 0;\n      var isClosed = points[0].equals(points[numPoints - 1]);\n      var currentPoint;\n      var previousPoint = points[0];\n      var nextPoint;\n      var strokeWidth2 = style.strokeWidth / 2;\n      var deltaU = 1 / (numPoints - 1);\n      var u0 = 0,\n        u1;\n      var innerSideModified;\n      var joinIsOnLeftSide;\n      var isMiter;\n      var initialJoinIsOnLeftSide = false;\n      var numVertices = 0;\n      var currentCoordinate = vertexOffset * 3;\n      var currentCoordinateUV = vertexOffset * 2; // Get initial left and right stroke points\n\n      getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n      lastPointL.copy(points[0]).sub(tempV2_1);\n      lastPointR.copy(points[0]).add(tempV2_1);\n      point0L.copy(lastPointL);\n      point0R.copy(lastPointR);\n      for (var iPoint = 1; iPoint < numPoints; iPoint++) {\n        currentPoint = points[iPoint]; // Get next point\n\n        if (iPoint === numPoints - 1) {\n          if (isClosed) {\n            // Skip duplicated initial point\n            nextPoint = points[1];\n          } else {\n            nextPoint = undefined;\n          }\n        } else {\n          nextPoint = points[iPoint + 1];\n        } // Normal of previous segment in tempV2_1\n\n        var normal1 = tempV2_1;\n        getNormal(previousPoint, currentPoint, normal1);\n        tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n        currentPointL.copy(currentPoint).sub(tempV2_3);\n        currentPointR.copy(currentPoint).add(tempV2_3);\n        u1 = u0 + deltaU;\n        innerSideModified = false;\n        if (nextPoint !== undefined) {\n          // Normal of next segment in tempV2_2\n          getNormal(currentPoint, nextPoint, tempV2_2);\n          tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n          nextPointL.copy(currentPoint).sub(tempV2_3);\n          nextPointR.copy(currentPoint).add(tempV2_3);\n          joinIsOnLeftSide = true;\n          tempV2_3.subVectors(nextPoint, previousPoint);\n          if (normal1.dot(tempV2_3) < 0) {\n            joinIsOnLeftSide = false;\n          }\n          if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n          tempV2_3.subVectors(nextPoint, currentPoint);\n          tempV2_3.normalize();\n          var dot = Math.abs(normal1.dot(tempV2_3)); // If path is straight, don't create join\n\n          if (dot !== 0) {\n            // Compute inner and outer segment intersections\n            var miterSide = strokeWidth2 / dot;\n            tempV2_3.multiplyScalar(-miterSide);\n            tempV2_4.subVectors(currentPoint, previousPoint);\n            tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n            innerPoint.copy(tempV2_5).negate();\n            var miterLength2 = tempV2_5.length();\n            var segmentLengthPrev = tempV2_4.length();\n            tempV2_4.divideScalar(segmentLengthPrev);\n            tempV2_6.subVectors(nextPoint, currentPoint);\n            var segmentLengthNext = tempV2_6.length();\n            tempV2_6.divideScalar(segmentLengthNext); // Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\n            if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n              innerSideModified = true;\n            }\n            outerPoint.copy(tempV2_5).add(currentPoint);\n            innerPoint.add(currentPoint);\n            isMiter = false;\n            if (innerSideModified) {\n              if (joinIsOnLeftSide) {\n                nextPointR.copy(innerPoint);\n                currentPointR.copy(innerPoint);\n              } else {\n                nextPointL.copy(innerPoint);\n                currentPointL.copy(innerPoint);\n              }\n            } else {\n              // The segment triangles are generated here if there was overlapping\n              makeSegmentTriangles();\n            }\n            switch (style.strokeLineJoin) {\n              case 'bevel':\n                makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                break;\n              case 'round':\n                // Segment triangles\n                createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Join triangles\n\n                if (joinIsOnLeftSide) {\n                  makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n                } else {\n                  makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n                }\n                break;\n              case 'miter':\n              case 'miter-clip':\n              default:\n                var miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n                if (miterFraction < 1) {\n                  // The join miter length exceeds the miter limit\n                  if (style.strokeLineJoin !== 'miter-clip') {\n                    makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                    break;\n                  } else {\n                    // Segment triangles\n                    createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Miter-clip join triangles\n\n                    if (joinIsOnLeftSide) {\n                      tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                      tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                      addVertex(currentPointL, u1, 0);\n                      addVertex(tempV2_6, u1, 0);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(tempV2_6, u1, 0);\n                      addVertex(tempV2_7, u1, 0);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(tempV2_7, u1, 0);\n                      addVertex(nextPointL, u1, 0);\n                    } else {\n                      tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                      tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                      addVertex(currentPointR, u1, 1);\n                      addVertex(tempV2_6, u1, 1);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(tempV2_6, u1, 1);\n                      addVertex(tempV2_7, u1, 1);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(tempV2_7, u1, 1);\n                      addVertex(nextPointR, u1, 1);\n                    }\n                  }\n                } else {\n                  // Miter join segment triangles\n                  if (innerSideModified) {\n                    // Optimized segment + join triangles\n                    if (joinIsOnLeftSide) {\n                      addVertex(lastPointR, u0, 1);\n                      addVertex(lastPointL, u0, 0);\n                      addVertex(outerPoint, u1, 0);\n                      addVertex(lastPointR, u0, 1);\n                      addVertex(outerPoint, u1, 0);\n                      addVertex(innerPoint, u1, 1);\n                    } else {\n                      addVertex(lastPointR, u0, 1);\n                      addVertex(lastPointL, u0, 0);\n                      addVertex(outerPoint, u1, 1);\n                      addVertex(lastPointL, u0, 0);\n                      addVertex(innerPoint, u1, 0);\n                      addVertex(outerPoint, u1, 1);\n                    }\n                    if (joinIsOnLeftSide) {\n                      nextPointL.copy(outerPoint);\n                    } else {\n                      nextPointR.copy(outerPoint);\n                    }\n                  } else {\n                    // Add extra miter join triangles\n                    if (joinIsOnLeftSide) {\n                      addVertex(currentPointL, u1, 0);\n                      addVertex(outerPoint, u1, 0);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(outerPoint, u1, 0);\n                      addVertex(nextPointL, u1, 0);\n                    } else {\n                      addVertex(currentPointR, u1, 1);\n                      addVertex(outerPoint, u1, 1);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(currentPoint, u1, 0.5);\n                      addVertex(outerPoint, u1, 1);\n                      addVertex(nextPointR, u1, 1);\n                    }\n                  }\n                  isMiter = true;\n                }\n                break;\n            }\n          } else {\n            // The segment triangles are generated here when two consecutive points are collinear\n            makeSegmentTriangles();\n          }\n        } else {\n          // The segment triangles are generated here if it is the ending segment\n          makeSegmentTriangles();\n        }\n        if (!isClosed && iPoint === numPoints - 1) {\n          // Start line endcap\n          addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n        } // Increment loop variables\n\n        u0 = u1;\n        previousPoint = currentPoint;\n        lastPointL.copy(nextPointL);\n        lastPointR.copy(nextPointR);\n      }\n      if (!isClosed) {\n        // Ending line endcap\n        addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n      } else if (innerSideModified && vertices) {\n        // Modify path first segment vertices to adjust to the segments inner and outer intersections\n        var lastOuter = outerPoint;\n        var lastInner = innerPoint;\n        if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n          lastOuter = innerPoint;\n          lastInner = outerPoint;\n        }\n        if (joinIsOnLeftSide) {\n          if (isMiter || initialJoinIsOnLeftSide) {\n            lastInner.toArray(vertices, 0 * 3);\n            lastInner.toArray(vertices, 3 * 3);\n            if (isMiter) {\n              lastOuter.toArray(vertices, 1 * 3);\n            }\n          }\n        } else {\n          if (isMiter || !initialJoinIsOnLeftSide) {\n            lastInner.toArray(vertices, 1 * 3);\n            lastInner.toArray(vertices, 3 * 3);\n            if (isMiter) {\n              lastOuter.toArray(vertices, 0 * 3);\n            }\n          }\n        }\n      }\n      return numVertices; // -- End of algorithm\n      // -- Functions\n\n      function getNormal(p1, p2, result) {\n        result.subVectors(p2, p1);\n        return result.set(-result.y, result.x).normalize();\n      }\n      function addVertex(position, u, v) {\n        if (vertices) {\n          vertices[currentCoordinate] = position.x;\n          vertices[currentCoordinate + 1] = position.y;\n          vertices[currentCoordinate + 2] = 0;\n          if (normals) {\n            normals[currentCoordinate] = 0;\n            normals[currentCoordinate + 1] = 0;\n            normals[currentCoordinate + 2] = 1;\n          }\n          currentCoordinate += 3;\n          if (uvs) {\n            uvs[currentCoordinateUV] = u;\n            uvs[currentCoordinateUV + 1] = v;\n            currentCoordinateUV += 2;\n          }\n        }\n        numVertices += 3;\n      }\n      function makeCircularSector(center, p1, p2, u, v) {\n        // param p1, p2: Points in the circle arc.\n        // p1 and p2 are in clockwise direction.\n        tempV2_1.copy(p1).sub(center).normalize();\n        tempV2_2.copy(p2).sub(center).normalize();\n        var angle = Math.PI;\n        var dot = tempV2_1.dot(tempV2_2);\n        if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n        angle /= arcDivisions;\n        tempV2_3.copy(p1);\n        for (var i = 0, il = arcDivisions - 1; i < il; i++) {\n          tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n          addVertex(tempV2_3, u, v);\n          addVertex(tempV2_4, u, v);\n          addVertex(center, u, 0.5);\n          tempV2_3.copy(tempV2_4);\n        }\n        addVertex(tempV2_4, u, v);\n        addVertex(p2, u, v);\n        addVertex(center, u, 0.5);\n      }\n      function makeSegmentTriangles() {\n        addVertex(lastPointR, u0, 1);\n        addVertex(lastPointL, u0, 0);\n        addVertex(currentPointL, u1, 0);\n        addVertex(lastPointR, u0, 1);\n        addVertex(currentPointL, u1, 1);\n        addVertex(currentPointR, u1, 0);\n      }\n      function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n        if (innerSideModified) {\n          // Optimized segment + bevel triangles\n          if (joinIsOnLeftSide) {\n            // Path segments triangles\n            addVertex(lastPointR, u0, 1);\n            addVertex(lastPointL, u0, 0);\n            addVertex(currentPointL, u1, 0);\n            addVertex(lastPointR, u0, 1);\n            addVertex(currentPointL, u1, 0);\n            addVertex(innerPoint, u1, 1); // Bevel join triangle\n\n            addVertex(currentPointL, u, 0);\n            addVertex(nextPointL, u, 0);\n            addVertex(innerPoint, u, 0.5);\n          } else {\n            // Path segments triangles\n            addVertex(lastPointR, u0, 1);\n            addVertex(lastPointL, u0, 0);\n            addVertex(currentPointR, u1, 1);\n            addVertex(lastPointL, u0, 0);\n            addVertex(innerPoint, u1, 0);\n            addVertex(currentPointR, u1, 1); // Bevel join triangle\n\n            addVertex(currentPointR, u, 1);\n            addVertex(nextPointR, u, 0);\n            addVertex(innerPoint, u, 0.5);\n          }\n        } else {\n          // Bevel join triangle. The segment triangles are done in the main loop\n          if (joinIsOnLeftSide) {\n            addVertex(currentPointL, u, 0);\n            addVertex(nextPointL, u, 0);\n            addVertex(currentPoint, u, 0.5);\n          } else {\n            addVertex(currentPointR, u, 1);\n            addVertex(nextPointR, u, 0);\n            addVertex(currentPoint, u, 0.5);\n          }\n        }\n      }\n      function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n        if (innerSideModified) {\n          if (joinIsOnLeftSide) {\n            addVertex(lastPointR, u0, 1);\n            addVertex(lastPointL, u0, 0);\n            addVertex(currentPointL, u1, 0);\n            addVertex(lastPointR, u0, 1);\n            addVertex(currentPointL, u1, 0);\n            addVertex(innerPoint, u1, 1);\n            addVertex(currentPointL, u0, 0);\n            addVertex(currentPoint, u1, 0.5);\n            addVertex(innerPoint, u1, 1);\n            addVertex(currentPoint, u1, 0.5);\n            addVertex(nextPointL, u0, 0);\n            addVertex(innerPoint, u1, 1);\n          } else {\n            addVertex(lastPointR, u0, 1);\n            addVertex(lastPointL, u0, 0);\n            addVertex(currentPointR, u1, 1);\n            addVertex(lastPointL, u0, 0);\n            addVertex(innerPoint, u1, 0);\n            addVertex(currentPointR, u1, 1);\n            addVertex(currentPointR, u0, 1);\n            addVertex(innerPoint, u1, 0);\n            addVertex(currentPoint, u1, 0.5);\n            addVertex(currentPoint, u1, 0.5);\n            addVertex(innerPoint, u1, 0);\n            addVertex(nextPointR, u0, 1);\n          }\n        }\n      }\n      function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n        // param center: End point of the path\n        // param p1, p2: Left and right cap points\n        switch (style.strokeLineCap) {\n          case 'round':\n            if (start) {\n              makeCircularSector(center, p2, p1, u, 0.5);\n            } else {\n              makeCircularSector(center, p1, p2, u, 0.5);\n            }\n            break;\n          case 'square':\n            if (start) {\n              tempV2_1.subVectors(p1, center);\n              tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n              tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n              tempV2_4.subVectors(tempV2_2, tempV2_1).add(center); // Modify already existing vertices\n\n              if (joinIsOnLeftSide) {\n                tempV2_3.toArray(vertices, 1 * 3);\n                tempV2_4.toArray(vertices, 0 * 3);\n                tempV2_4.toArray(vertices, 3 * 3);\n              } else {\n                tempV2_3.toArray(vertices, 1 * 3);\n                tempV2_3.toArray(vertices, 3 * 3);\n                tempV2_4.toArray(vertices, 0 * 3);\n              }\n            } else {\n              tempV2_1.subVectors(p2, center);\n              tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n              tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n              tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n              var vl = vertices.length; // Modify already existing vertices\n\n              if (joinIsOnLeftSide) {\n                tempV2_3.toArray(vertices, vl - 1 * 3);\n                tempV2_4.toArray(vertices, vl - 2 * 3);\n                tempV2_4.toArray(vertices, vl - 4 * 3);\n              } else {\n                tempV2_3.toArray(vertices, vl - 2 * 3);\n                tempV2_4.toArray(vertices, vl - 1 * 3);\n                tempV2_4.toArray(vertices, vl - 4 * 3);\n              }\n            }\n            break;\n        }\n      }\n      function removeDuplicatedPoints(points) {\n        // Creates a new array if necessary with duplicated points removed.\n        // This does not remove duplicated initial and ending points of a closed path.\n        var dupPoints = false;\n        for (var i = 1, n = points.length - 1; i < n; i++) {\n          if (points[i].distanceTo(points[i + 1]) < minDistance) {\n            dupPoints = true;\n            break;\n          }\n        }\n        if (!dupPoints) return points;\n        var newPoints = [];\n        newPoints.push(points[0]);\n        for (var _i3 = 1, _n = points.length - 1; _i3 < _n; _i3++) {\n          if (points[_i3].distanceTo(points[_i3 + 1]) >= minDistance) {\n            newPoints.push(points[_i3]);\n          }\n        }\n        newPoints.push(points[points.length - 1]);\n        return newPoints;\n      }\n    }\n  }]);\n  return SVGLoader;\n}(Loader);\nexport { SVGLoader };","map":{"version":3,"names":["Loader","FileLoader","Matrix3","Vector2","Vector3","ShapeUtils","Box2","Shape","Path","BufferGeometry","Float32BufferAttribute","ShapePath","SVGLoader","manager","defaultDPI","defaultUnit","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","parseNode","node","style","nodeType","transform","getNodeTransform","traverseChildNodes","nodeName","parseCSSStylesheet","parseStyle","hasAttribute","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","parseCircleNode","parseEllipseNode","parseLineNode","usedNodeId","href","baseVal","substring","usedNode","viewportElement","getElementById","warn","fill","undefined","color","setStyle","transformPath","currentTransform","paths","push","userData","nodes","childNodes","i","length","transformStack","pop","copy","identity","point","control","firstPoint","isFirstPoint","doSetFirstPoint","d","getAttribute","commands","match","l","command","type","charAt","data","substr","trim","numbers","parseFloats","j","jl","x","y","moveTo","lineTo","bezierCurveTo","getReflection","quadraticCurveTo","rx","ry","start","clone","parseArcCommand","currentPath","autoClose","curves","currentPoint","sheet","cssRules","stylesheet","selectorList","selectorText","split","filter","Boolean","map","stylesheets","Object","assign","x_axis_rotation","large_arc_flag","sweep_flag","end","Math","PI","abs","dx2","dy2","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","s","sqrt","dq","pq","q","max","cxp","cyp","cx","cy","theta","svgAngle","delta","absellipse","ux","uy","vx","vy","dot","len","ang","acos","min","parseFloatWithUnits","w","h","bci","iterator","a","b","index","regex","replace","r","subpath","absarc","subPaths","x1","y1","x2","y2","stylesheetStyles","classSelectors","addStyle","svgName","jsName","adjustFunction","v","startsWith","clamp","positive","input","flags","stride","TypeError","RE","SEPARATOR","WHITESPACE","DIGIT","SIGN","POINT","COMMA","EXP","FLAGS","SEP","INT","FLOAT","state","seenComma","number","exponent","result","throwSyntaxError","current","partial","SyntaxError","newNumber","Number","pow","Array","isArray","includes","test","units","unitConversion","mm","cm","in","pt","pc","px","string","theUnit","String","n","u","endsWith","scale","parseFloat","parseNodeTransform","premultiply","tempTransform0","tx","ty","translate","transformsTexts","tIndex","transformText","openParPos","indexOf","closeParPos","transformType","array","angle","tempTransform1","tempTransform2","rotate","tempTransform3","multiplyMatrices","scaleX","scaleY","set","tan","m","transfVec2","v2","tempV3","applyMatrix3","isRotated","isTransformRotated","subPath","curve","isLineCurve","v1","isCubicBezierCurve","v0","v3","isQuadraticBezierCurve","isEllipseCurve","tempV2","aX","aY","xRadius","getTransformScaleX","yRadius","getTransformScaleY","elements","te","xml","DOMParser","parseFromString","documentElement","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","shapePath","BIGNUMBER","IntersectionLocationType","ORIGIN","DESTINATION","BETWEEN","LEFT","RIGHT","BEHIND","BEYOND","classifyResult","loc","t","findEdgeIntersection","a0","a1","b0","b1","x3","x4","y3","y4","nom1","nom2","denom","t1","t2","classifyPoint","toPrecision","p","edgeStart","edgeEnd","ax","ay","bx","by","sa","EPSILON","getIntersections","path1","path2","intersectionsRaw","intersections","path1EdgeStart","path1EdgeEnd","index2","path2EdgeStart","path2EdgeEnd","intersection","find","getScanlineIntersections","scanline","boundingBox","center","getCenter","allIntersections","forEach","containsPoint","points","identifier","isCW","sort","i1","i2","isHoleTo","simplePath","allPaths","scanlineMinX","scanlineMaxX","_fillRule","centerBoundingBox","scanlineIntersections","baseIntersections","otherIntersections","firstXOfPath","stack","isHole","isHoleFor","for","lastCWValue","simplePaths","getPoints","maxY","minY","maxX","minX","isClockWise","sp","isAHole","fillRule","shapesToReturn","amIAHole","shape","holes","hole","width","lineJoin","lineCap","miterLimit","strokeColor","arcDivisions","minDistance","vertices","normals","uvs","pointsToStrokeWithBuffers","geometry","setAttribute","vertexOffset","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","removeDuplicatedPoints","numPoints","isClosed","equals","previousPoint","nextPoint","strokeWidth2","deltaU","u0","u1","innerSideModified","joinIsOnLeftSide","isMiter","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","multiplyScalar","sub","add","iPoint","normal1","subVectors","normalize","miterSide","setLength","negate","miterLength2","segmentLengthPrev","divideScalar","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addVertex","addCapGeometry","lastOuter","lastInner","toArray","p1","p2","position","il","rotateAround","addVectors","vl","dupPoints","distanceTo","newPoints"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/loaders/SVGLoader.js"],"sourcesContent":["import { Loader, FileLoader, Matrix3, Vector2, Vector3, ShapeUtils, Box2, Shape, Path, BufferGeometry, Float32BufferAttribute, ShapePath } from 'three';\n\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Default dots per inch\n\n    this.defaultDPI = 90; // Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\n    this.defaultUnit = 'px';\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text) {\n    const scope = this;\n\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n\n      switch (node.nodeName) {\n        case 'svg':\n          break;\n\n        case 'style':\n          parseCSSStylesheet(node);\n          break;\n\n        case 'g':\n          style = parseStyle(node, style);\n          break;\n\n        case 'path':\n          style = parseStyle(node, style);\n          if (node.hasAttribute('d')) path = parsePathNode(node);\n          break;\n\n        case 'rect':\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n\n        case 'polygon':\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n\n        case 'polyline':\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n\n        case 'circle':\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n\n        case 'ellipse':\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n\n        case 'line':\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n\n        case 'defs':\n          traverseChildNodes = false;\n          break;\n\n        case 'use':\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n\n          break;\n\n      }\n\n      if (path) {\n        if (style.fill !== undefined && style.fill !== 'none') {\n          path.color.setStyle(style.fill);\n        }\n\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = {\n          node: node,\n          style: style\n        };\n      }\n\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n\n      if (transform) {\n        transformStack.pop();\n\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute('d'); // console.log( d );\n\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data = command.substr(1).trim();\n\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n\n        let numbers;\n\n        switch (type) {\n          case 'M':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'H':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'V':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'L':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'C':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'S':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'Q':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'T':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'A':\n            numbers = parseFloats(data, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if start point == end point\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'm':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'h':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'v':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'l':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'c':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 's':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'q':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 't':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'a':\n            numbers = parseFloats(data, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if no displacement\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'Z':\n          case 'z':\n            path.currentPath.autoClose = true;\n\n            if (path.currentPath.curves.length > 0) {\n              // Reset point to beginning of Path\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n\n            break;\n\n          default:\n            console.warn(command);\n        } // console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n\n        doSetFirstPoint = false;\n      }\n\n      return path;\n    }\n\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1) continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(i => i.trim());\n\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n    /**\n     * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n     * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n     * From\n     * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n     * To\n     * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n     */\n\n\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        // draw a line if either of the radii == 0\n        path.lineTo(end.x, end.y);\n        return;\n      }\n\n      x_axis_rotation = x_axis_rotation * Math.PI / 180; // Ensure radii are positive\n\n      rx = Math.abs(rx);\n      ry = Math.abs(ry); // Compute (x1', y1')\n\n      const dx2 = (start.x - end.x) / 2.0;\n      const dy2 = (start.y - end.y) / 2.0;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2; // Compute (cx', cy')\n\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p; // Ensure radii are large enough\n\n      const cr = x1ps / rxs + y1ps / rys;\n\n      if (cr > 1) {\n        // scale up rx,ry equally so cr == 1\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag) q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx; // Step 3: Compute (cx, cy) from (cx', cy')\n\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2; // Step 4: Compute θ1 and Δθ\n\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len))); // floating point precision, slightly over values appear\n\n      if (ux * vy - uy * vx < 0) ang = -ang;\n      return ang;\n    }\n    /*\n     * According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n     * rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n     */\n\n\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('x') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('y') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || node.getAttribute('ry') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || node.getAttribute('rx') || 0);\n      const w = parseFloatWithUnits(node.getAttribute('width'));\n      const h = parseFloatWithUnits(node.getAttribute('height')); // Ellipse arc to Bezier approximation Coefficient (Inversed). See:\n      // https://spencermortensen.com/articles/bezier-circle/\n\n      const bci = 1 - 0.551915024494;\n      const path = new ShapePath(); // top left\n\n      path.moveTo(x + rx, y); // top right\n\n      path.lineTo(x + w - rx, y);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n      } // bottom right\n\n\n      path.lineTo(x + w, y + h - ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n      } // bottom left\n\n\n      path.lineTo(x + rx, y + h);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n      } // back to top left\n\n\n      path.lineTo(x, y + ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n      }\n\n      return path;\n    }\n\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const r = parseFloatWithUnits(node.getAttribute('r') || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute('x1') || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute('y1') || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute('x2') || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute('y2') || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    } //\n\n\n    function parseStyle(node, style) {\n      style = Object.assign({}, style); // clone style\n\n      let stylesheetStyles = {};\n\n      if (node.hasAttribute('class')) {\n        const classSelectors = node.getAttribute('class').split(/\\s/).filter(Boolean).map(i => i.trim());\n\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['.' + classSelectors[i]]);\n        }\n      }\n\n      if (node.hasAttribute('id')) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['#' + node.getAttribute('id')]);\n      }\n\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === undefined) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith('url')) console.warn('SVGLoader: url access in attributes is not implemented.');\n            return v;\n          };\n        }\n\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== '') style[jsName] = adjustFunction(node.style[svgName]);\n      }\n\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n\n      addStyle('fill', 'fill');\n      addStyle('fill-opacity', 'fillOpacity', clamp);\n      addStyle('fill-rule', 'fillRule');\n      addStyle('opacity', 'opacity', clamp);\n      addStyle('stroke', 'stroke');\n      addStyle('stroke-opacity', 'strokeOpacity', clamp);\n      addStyle('stroke-width', 'strokeWidth', positive);\n      addStyle('stroke-linejoin', 'strokeLineJoin');\n      addStyle('stroke-linecap', 'strokeLineCap');\n      addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n      addStyle('visibility', 'visibility');\n      return style;\n    } // http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n\n    function getReflection(a, b) {\n      return a - (b - a);\n    } // from https://github.com/ppvg/svg-numbers (MIT License)\n\n\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== 'string') {\n        throw new TypeError('Invalid input: ' + typeof input);\n      } // Character groups\n\n\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      }; // States\n\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = '',\n          exponent = '';\n      const result = [];\n\n      function throwSyntaxError(current, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current + '\" at index ' + i + '.');\n        error.partial = partial;\n        throw error;\n      }\n\n      function newNumber() {\n        if (number !== '') {\n          if (exponent === '') result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n\n        number = '';\n        exponent = '';\n      }\n\n      let current;\n      const length = input.length;\n\n      for (let i = 0; i < length; i++) {\n        current = input[i]; // check for flags\n\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        } // parse until next number\n\n\n        if (state === SEP) {\n          // eat whitespace\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          } // start new number\n\n\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          } // throw on double commas (e.g. \"1, , 2\")\n\n\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n\n            seenComma = true;\n          }\n        } // parse integer part\n\n\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n\n\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse decimal part\n\n\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double decimal points (e.g. \"1..2\")\n\n\n          if (RE.POINT.test(current) && number[number.length - 1] === '.') {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse exponent part\n\n\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n\n          if (RE.SIGN.test(current)) {\n            if (exponent === '') {\n              exponent += current;\n              continue;\n            }\n\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        } // end of number\n\n\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      } // add the last number found (if any)\n\n\n      newNumber();\n      return result;\n    } // Units\n\n\n    const units = ['mm', 'cm', 'in', 'pt', 'pc', 'px']; // Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n\n    function parseFloatWithUnits(string) {\n      let theUnit = 'px';\n\n      if (typeof string === 'string' || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n\n      let scale = undefined;\n\n      if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n        // Conversion scale from  pixels to inches, then to default units\n        scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n\n        if (scale < 0) {\n          // Conversion scale to pixels\n          scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n        }\n      }\n\n      return scale * parseFloat(string);\n    } // Transforms\n\n\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute('transform') || node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y')))) {\n        return null;\n      }\n\n      const transform = parseNodeTransform(node);\n\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform = tempTransform0;\n\n      if (node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y'))) {\n        const tx = parseFloatWithUnits(node.getAttribute('x'));\n        const ty = parseFloatWithUnits(node.getAttribute('y'));\n        transform.translate(tx, ty);\n      }\n\n      if (node.hasAttribute('transform')) {\n        const transformsTexts = node.getAttribute('transform').split(')');\n\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === '') continue;\n          const openParPos = transformText.indexOf('(');\n          const closeParPos = transformText.length;\n\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform.identity();\n\n            switch (transformType) {\n              case 'translate':\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n\n                  currentTransform.translate(tx, ty);\n                }\n\n                break;\n\n              case 'rotate':\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0; // Angle\n\n                  angle = -array[0] * Math.PI / 180;\n\n                  if (array.length >= 3) {\n                    // Center x, y\n                    cx = array[1];\n                    cy = array[2];\n                  } // Rotate around center (cx, cy)\n\n\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n\n                break;\n\n              case 'scale':\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n\n                  currentTransform.scale(scaleX, scaleY);\n                }\n\n                break;\n\n              case 'skewX':\n                if (array.length === 1) {\n                  currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case 'skewY':\n                if (array.length === 1) {\n                  currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case 'matrix':\n                if (array.length === 6) {\n                  currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n\n                break;\n            }\n          }\n\n          transform.premultiply(currentTransform);\n        }\n      }\n\n      return transform;\n    }\n\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n            }\n\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    } //\n\n\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, 'image/svg+xml'); // application/xml\n\n    parseNode(xml.documentElement, {\n      fill: '#000',\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: 'miter',\n      strokeLineCap: 'butt',\n      strokeMiterLimit: 4\n    });\n    const data = {\n      paths: paths,\n      xml: xml.documentElement\n    }; // console.log( paths );\n\n    return data;\n  }\n\n  static createShapes(shapePath) {\n    // Param shapePath: a shapepath as returned by the parse function of this class\n    // Returns Shape object\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        //1. lines are parallel or edges don't intersect\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        //2. lines are colinear\n        //check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1); //find position of this endpoints relatively to edge1\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return {\n              x: x,\n              y: y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        return null;\n      } else {\n        //3. edges intersect\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return {\n          x: x,\n          y: y,\n          t: t1\n        };\n      }\n    }\n\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n\n      let t;\n\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n\n          if (intersection !== null && intersectionsRaw.find(i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON) === undefined) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n\n      return intersections;\n    }\n\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach(path => {\n        // check if the center of the bounding box is in the bounding box of the paths.\n        // this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n        // if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach(p => {\n            allIntersections.push({\n              identifier: path.identifier,\n              isCW: path.isCW,\n              point: p\n            });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n\n    function isHoleTo(simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule) {\n      if (_fillRule === null || _fillRule === undefined || _fillRule === '') {\n        _fillRule = 'nonzero';\n      }\n\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX, centerBoundingBox.y), new Vector2(scanlineMaxX, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach(i => {\n        if (i.identifier === simplePath.identifier) {\n          baseIntersections.push(i);\n        } else {\n          otherIntersections.push(i);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x; // build up the path hierarchy\n\n      const stack = [];\n      let i = 0;\n\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n\n        i++;\n      }\n\n      stack.push(simplePath.identifier);\n\n      if (_fillRule === 'evenodd') {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else if (_fillRule === 'nonzero') {\n        // check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n\n        for (let i = 0; i < stack.length; i++) {\n          const identifier = stack[i];\n\n          if (isHole) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = false;\n            isHoleFor = identifier;\n          } else if (lastCWValue !== allPaths[identifier].isCW) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = true;\n          }\n        }\n\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    } // check for self intersecting paths\n    // TODO\n    // check intersecting paths\n    // TODO\n    // prepare paths for hole detection\n\n\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map(p => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER; //points.forEach(p => p.y *= -1);\n\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n\n        if (p.y > maxY) {\n          maxY = p.y;\n        }\n\n        if (p.y < minY) {\n          minY = p.y;\n        }\n\n        if (p.x > maxX) {\n          maxX = p.x;\n        }\n\n        if (p.x < minX) {\n          minX = p.x;\n        }\n      } //\n\n\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n\n      return {\n        curves: p.curves,\n        points: points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter(sp => sp.points.length > 1); // check if path is solid or a hole\n\n    const isAHole = simplePaths.map(p => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule));\n    const shapesToReturn = [];\n    simplePaths.forEach(p => {\n      const amIAHole = isAHole[p.identifier];\n\n      if (!amIAHole.isHole) {\n        const shape = new Shape();\n        shape.curves = p.curves;\n        const holes = isAHole.filter(h => h.isHole && h.for === p.identifier);\n        holes.forEach(h => {\n          const hole = simplePaths[h.identifier];\n          const path = new Path();\n          path.curves = hole.curves;\n          shape.holes.push(path);\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    // Param width: Stroke width\n    // Param color: As returned by THREE.Color.getStyle()\n    // Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n    // Param lineCap: One of \"round\", \"square\" or \"butt\"\n    // Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n    // Returns style object\n    width = width !== undefined ? width : 1;\n    color = color !== undefined ? color : '#000';\n    lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n    lineCap = lineCap !== undefined ? lineCap : 'butt';\n    miterLimit = miterLimit !== undefined ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    // Generates a stroke with some witdh around the given path.\n    // The path can be open or closed (last point equals to first point)\n    // Param points: Array of Vector2D (the path). Minimum 2 points.\n    // Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n    // Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n    // Param minDistance: Points closer to this distance will be merged. (Optional)\n    // Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    // This function can be called to update existing arrays or buffers.\n    // Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n    // Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n    // Returns number of written vertices / normals / uvs pairs\n    // if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n    // 'normals' and 'uvs' buffers are optional\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n    minDistance = minDistance !== undefined ? minDistance : 0.001;\n    vertexOffset = vertexOffset !== undefined ? vertexOffset : 0; // First ensure there are no duplicated points\n\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2) return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0,\n        u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2; // Get initial left and right stroke points\n\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint]; // Get next point\n\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          // Skip duplicated initial point\n          nextPoint = points[1];\n        } else {\n          nextPoint = undefined;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      } // Normal of previous segment in tempV2_1\n\n\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n\n      if (nextPoint !== undefined) {\n        // Normal of next segment in tempV2_2\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3)); // If path is straight, don't create join\n\n        if (dot !== 0) {\n          // Compute inner and outer segment intersections\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext); // Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            // The segment triangles are generated here if there was overlapping\n            makeSegmentTriangles();\n          }\n\n          switch (style.strokeLineJoin) {\n            case 'bevel':\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n\n            case 'round':\n              // Segment triangles\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Join triangles\n\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n\n              break;\n\n            case 'miter':\n            case 'miter-clip':\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n\n              if (miterFraction < 1) {\n                // The join miter length exceeds the miter limit\n                if (style.strokeLineJoin !== 'miter-clip') {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  // Segment triangles\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Miter-clip join triangles\n\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                // Miter join segment triangles\n                if (innerSideModified) {\n                  // Optimized segment + join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  // Add extra miter join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n\n                isMiter = true;\n              }\n\n              break;\n          }\n        } else {\n          // The segment triangles are generated here when two consecutive points are collinear\n          makeSegmentTriangles();\n        }\n      } else {\n        // The segment triangles are generated here if it is the ending segment\n        makeSegmentTriangles();\n      }\n\n      if (!isClosed && iPoint === numPoints - 1) {\n        // Start line endcap\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      } // Increment loop variables\n\n\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n\n    if (!isClosed) {\n      // Ending line endcap\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      // Modify path first segment vertices to adjust to the segments inner and outer intersections\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n\n    return numVertices; // -- End of algorithm\n    // -- Functions\n\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n\n        currentCoordinate += 3;\n\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n\n      numVertices += 3;\n    }\n\n    function makeCircularSector(center, p1, p2, u, v) {\n      // param p1, p2: Points in the circle arc.\n      // p1 and p2 are in clockwise direction.\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n      if (innerSideModified) {\n        // Optimized segment + bevel triangles\n        if (joinIsOnLeftSide) {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        // Bevel join triangle. The segment triangles are done in the main loop\n        if (joinIsOnLeftSide) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n      if (innerSideModified) {\n        if (joinIsOnLeftSide) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n      // param center: End point of the path\n      // param p1, p2: Left and right cap points\n      switch (style.strokeLineCap) {\n        case 'round':\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n\n          break;\n\n        case 'square':\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center); // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length; // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n\n          break;\n      }\n    }\n\n    function removeDuplicatedPoints(points) {\n      // Creates a new array if necessary with duplicated points removed.\n      // This does not remove duplicated initial and ending points of a closed path.\n      let dupPoints = false;\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n\n      if (!dupPoints) return points;\n      const newPoints = [];\n      newPoints.push(points[0]);\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n          newPoints.push(points[i]);\n        }\n      }\n\n      newPoints.push(points[points.length - 1]);\n      return newPoints;\n    }\n  }\n\n}\n\nexport { SVGLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}