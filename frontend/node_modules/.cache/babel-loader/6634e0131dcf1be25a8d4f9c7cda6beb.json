{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D, MeshBasicMaterial, MathUtils, Mesh } from 'three';\nimport { LightningStrike } from '../geometries/LightningStrike.js';\n\n/**\n * @fileoverview Lightning strike object generator\n *\n *\n * Usage\n *\n * const myStorm = new LightningStorm( paramsObject );\n * myStorm.position.set( ... );\n * scene.add( myStorm );\n * ...\n * myStorm.update( currentTime );\n *\n * The \"currentTime\" can only go forwards or be stopped.\n *\n *\n * LightningStorm parameters:\n *\n * @param {double} size Size of the storm. If no 'onRayPosition' parameter is defined, it means the side of the rectangle the storm covers.\n *\n * @param {double} minHeight Minimum height a ray can start at. If no 'onRayPosition' parameter is defined, it means the height above plane y = 0.\n *\n * @param {double} maxHeight Maximum height a ray can start at. If no 'onRayPosition' parameter is defined, it means the height above plane y = 0.\n *\n * @param {double} maxSlope The maximum inclination slope of a ray. If no 'onRayPosition' parameter is defined, it means the slope relative to plane y = 0.\n *\n * @param {integer} maxLightnings Greater than 0. The maximum number of simultaneous rays.\n *\n * @param {double} lightningMinPeriod minimum time between two consecutive rays.\n *\n * @param {double} lightningMaxPeriod maximum time between two consecutive rays.\n *\n * @param {double} lightningMinDuration The minimum time a ray can last.\n *\n * @param {double} lightningMaxDuration The maximum time a ray can last.\n *\n * @param {Object} lightningParameters The parameters for created rays. See LightningStrike (geometry)\n *\n * @param {Material} lightningMaterial The THREE.Material used for the created rays.\n *\n * @param {function} onRayPosition Optional callback with two Vector3 parameters (source, dest). You can set here the start and end points for each created ray, using the standard size, minHeight, etc parameters and other values in your algorithm.\n *\n * @param {function} onLightningDown This optional callback is called with one parameter (lightningStrike) when a ray ends propagating, so it has hit the ground.\n *\n *\n */\nvar LightningStorm = /*#__PURE__*/function (_Object3D) {\n  _inherits(LightningStorm, _Object3D);\n  var _super = _createSuper(LightningStorm);\n  function LightningStorm() {\n    var _this;\n    var stormParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, LightningStorm);\n    _this = _super.call(this); // Parameters\n\n    _this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== undefined ? stormParams.size : 1000.0;\n    stormParams.minHeight = stormParams.minHeight !== undefined ? stormParams.minHeight : 80.0;\n    stormParams.maxHeight = stormParams.maxHeight !== undefined ? stormParams.maxHeight : 100.0;\n    stormParams.maxSlope = stormParams.maxSlope !== undefined ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== undefined ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== undefined ? stormParams.lightningMinPeriod : 3.0;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== undefined ? stormParams.lightningMaxPeriod : 7.0;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== undefined ? stormParams.lightningMinDuration : 1.0;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== undefined ? stormParams.lightningMaxDuration : 2.5;\n    _this.lightningParameters = LightningStrike.copyParameters(stormParams.lightningParameters, stormParams.lightningParameters);\n    _this.lightningParameters.isEternal = false;\n    _this.lightningMaterial = stormParams.lightningMaterial !== undefined ? stormParams.lightningMaterial : new MeshBasicMaterial({\n      color: 0xb0ffff\n    });\n    if (stormParams.onRayPosition !== undefined) {\n      _this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      _this.onRayPosition = function (source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        var height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n    _this.onLightningDown = stormParams.onLightningDown; // Internal state\n\n    _this.inited = false;\n    _this.nextLightningTime = 0;\n    _this.lightningsMeshes = [];\n    _this.deadLightningsMeshes = [];\n    for (var i = 0; i < _this.stormParams.maxLightnings; i++) {\n      var lightning = new LightningStrike(LightningStrike.copyParameters({}, _this.lightningParameters));\n      var mesh = new Mesh(lightning, _this.lightningMaterial);\n      _this.deadLightningsMeshes.push(mesh);\n    }\n    return _this;\n  }\n  _createClass(LightningStorm, [{\n    key: \"update\",\n    value: function update(time) {\n      if (!this.inited) {\n        this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n        this.inited = true;\n      }\n      if (time >= this.nextLightningTime) {\n        // Lightning creation\n        var lightningMesh = this.deadLightningsMeshes.pop();\n        if (lightningMesh) {\n          var lightningParams1 = LightningStrike.copyParameters(lightningMesh.geometry.rayParameters, this.lightningParameters);\n          lightningParams1.birthTime = time;\n          lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n          this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n          lightningParams1.noiseSeed = Math.random();\n          this.add(lightningMesh);\n          this.lightningsMeshes.push(lightningMesh);\n        } // Schedule next lightning\n\n        this.nextLightningTime = this.getNextLightningTime(time);\n      }\n      var i = 0,\n        il = this.lightningsMeshes.length;\n      while (i < il) {\n        var mesh = this.lightningsMeshes[i];\n        var lightning = mesh.geometry;\n        var prevState = lightning.state;\n        lightning.update(time);\n        if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n          if (this.onLightningDown) {\n            this.onLightningDown(lightning);\n          }\n        }\n        if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n          // Lightning is to be destroyed\n          this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n          this.deadLightningsMeshes.push(mesh);\n          this.remove(mesh);\n          il--;\n        } else {\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"getNextLightningTime\",\n    value: function getNextLightningTime(currentTime) {\n      return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      _get(_getPrototypeOf(LightningStorm.prototype), \"copy\", this).call(this, source);\n      this.stormParams.size = source.stormParams.size;\n      this.stormParams.minHeight = source.stormParams.minHeight;\n      this.stormParams.maxHeight = source.stormParams.maxHeight;\n      this.stormParams.maxSlope = source.stormParams.maxSlope;\n      this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n      this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n      this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n      this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n      this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n      this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n      this.lightningMaterial = source.stormParams.lightningMaterial;\n      this.onLightningDown = source.onLightningDown;\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this.stormParams).copy(this);\n    }\n  }]);\n  return LightningStorm;\n}(Object3D);\nLightningStorm.prototype.isLightningStorm = true;\nexport { LightningStorm };","map":{"version":3,"names":["Object3D","MeshBasicMaterial","MathUtils","Mesh","LightningStrike","LightningStorm","stormParams","size","undefined","minHeight","maxHeight","maxSlope","maxLightnings","lightningMinPeriod","lightningMaxPeriod","lightningMinDuration","lightningMaxDuration","lightningParameters","copyParameters","isEternal","lightningMaterial","color","onRayPosition","source","dest","set","Math","random","height","lerp","multiplyScalar","add","onLightningDown","inited","nextLightningTime","lightningsMeshes","deadLightningsMeshes","i","lightning","mesh","push","time","getNextLightningTime","lightningMesh","pop","lightningParams1","geometry","rayParameters","birthTime","deathTime","sourceOffset","destOffset","noiseSeed","il","length","prevState","state","update","RAY_PROPAGATING","RAY_EXTINGUISHED","splice","indexOf","remove","currentTime","constructor","copy","prototype","isLightningStorm"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/objects/LightningStorm.js"],"sourcesContent":["import { Object3D, MeshBasicMaterial, MathUtils, Mesh } from 'three';\nimport { LightningStrike } from '../geometries/LightningStrike.js';\n\n/**\n * @fileoverview Lightning strike object generator\n *\n *\n * Usage\n *\n * const myStorm = new LightningStorm( paramsObject );\n * myStorm.position.set( ... );\n * scene.add( myStorm );\n * ...\n * myStorm.update( currentTime );\n *\n * The \"currentTime\" can only go forwards or be stopped.\n *\n *\n * LightningStorm parameters:\n *\n * @param {double} size Size of the storm. If no 'onRayPosition' parameter is defined, it means the side of the rectangle the storm covers.\n *\n * @param {double} minHeight Minimum height a ray can start at. If no 'onRayPosition' parameter is defined, it means the height above plane y = 0.\n *\n * @param {double} maxHeight Maximum height a ray can start at. If no 'onRayPosition' parameter is defined, it means the height above plane y = 0.\n *\n * @param {double} maxSlope The maximum inclination slope of a ray. If no 'onRayPosition' parameter is defined, it means the slope relative to plane y = 0.\n *\n * @param {integer} maxLightnings Greater than 0. The maximum number of simultaneous rays.\n *\n * @param {double} lightningMinPeriod minimum time between two consecutive rays.\n *\n * @param {double} lightningMaxPeriod maximum time between two consecutive rays.\n *\n * @param {double} lightningMinDuration The minimum time a ray can last.\n *\n * @param {double} lightningMaxDuration The maximum time a ray can last.\n *\n * @param {Object} lightningParameters The parameters for created rays. See LightningStrike (geometry)\n *\n * @param {Material} lightningMaterial The THREE.Material used for the created rays.\n *\n * @param {function} onRayPosition Optional callback with two Vector3 parameters (source, dest). You can set here the start and end points for each created ray, using the standard size, minHeight, etc parameters and other values in your algorithm.\n *\n * @param {function} onLightningDown This optional callback is called with one parameter (lightningStrike) when a ray ends propagating, so it has hit the ground.\n *\n *\n */\n\nclass LightningStorm extends Object3D {\n  constructor(stormParams = {}) {\n    super(); // Parameters\n\n    this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== undefined ? stormParams.size : 1000.0;\n    stormParams.minHeight = stormParams.minHeight !== undefined ? stormParams.minHeight : 80.0;\n    stormParams.maxHeight = stormParams.maxHeight !== undefined ? stormParams.maxHeight : 100.0;\n    stormParams.maxSlope = stormParams.maxSlope !== undefined ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== undefined ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== undefined ? stormParams.lightningMinPeriod : 3.0;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== undefined ? stormParams.lightningMaxPeriod : 7.0;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== undefined ? stormParams.lightningMinDuration : 1.0;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== undefined ? stormParams.lightningMaxDuration : 2.5;\n    this.lightningParameters = LightningStrike.copyParameters(stormParams.lightningParameters, stormParams.lightningParameters);\n    this.lightningParameters.isEternal = false;\n    this.lightningMaterial = stormParams.lightningMaterial !== undefined ? stormParams.lightningMaterial : new MeshBasicMaterial({\n      color: 0xb0ffff\n    });\n\n    if (stormParams.onRayPosition !== undefined) {\n      this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      this.onRayPosition = function (source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        const height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n\n    this.onLightningDown = stormParams.onLightningDown; // Internal state\n\n    this.inited = false;\n    this.nextLightningTime = 0;\n    this.lightningsMeshes = [];\n    this.deadLightningsMeshes = [];\n\n    for (let i = 0; i < this.stormParams.maxLightnings; i++) {\n      const lightning = new LightningStrike(LightningStrike.copyParameters({}, this.lightningParameters));\n      const mesh = new Mesh(lightning, this.lightningMaterial);\n      this.deadLightningsMeshes.push(mesh);\n    }\n  }\n\n  update(time) {\n    if (!this.inited) {\n      this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n      this.inited = true;\n    }\n\n    if (time >= this.nextLightningTime) {\n      // Lightning creation\n      const lightningMesh = this.deadLightningsMeshes.pop();\n\n      if (lightningMesh) {\n        const lightningParams1 = LightningStrike.copyParameters(lightningMesh.geometry.rayParameters, this.lightningParameters);\n        lightningParams1.birthTime = time;\n        lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n        this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n        lightningParams1.noiseSeed = Math.random();\n        this.add(lightningMesh);\n        this.lightningsMeshes.push(lightningMesh);\n      } // Schedule next lightning\n\n\n      this.nextLightningTime = this.getNextLightningTime(time);\n    }\n\n    let i = 0,\n        il = this.lightningsMeshes.length;\n\n    while (i < il) {\n      const mesh = this.lightningsMeshes[i];\n      const lightning = mesh.geometry;\n      const prevState = lightning.state;\n      lightning.update(time);\n\n      if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n        if (this.onLightningDown) {\n          this.onLightningDown(lightning);\n        }\n      }\n\n      if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n        // Lightning is to be destroyed\n        this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n        this.deadLightningsMeshes.push(mesh);\n        this.remove(mesh);\n        il--;\n      } else {\n        i++;\n      }\n    }\n  }\n\n  getNextLightningTime(currentTime) {\n    return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.stormParams.size = source.stormParams.size;\n    this.stormParams.minHeight = source.stormParams.minHeight;\n    this.stormParams.maxHeight = source.stormParams.maxHeight;\n    this.stormParams.maxSlope = source.stormParams.maxSlope;\n    this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n    this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n    this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n    this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n    this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n    this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n    this.lightningMaterial = source.stormParams.lightningMaterial;\n    this.onLightningDown = source.onLightningDown;\n    return this;\n  }\n\n  clone() {\n    return new this.constructor(this.stormParams).copy(this);\n  }\n\n}\n\nLightningStorm.prototype.isLightningStorm = true;\n\nexport { LightningStorm };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}