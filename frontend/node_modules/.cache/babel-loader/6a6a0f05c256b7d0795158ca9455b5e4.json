{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\nvar RGBELoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(RGBELoader, _DataTextureLoader);\n  var _super = _createSuper(RGBELoader);\n  function RGBELoader(manager) {\n    var _this;\n    _classCallCheck(this, RGBELoader);\n    _this = _super.call(this, manager);\n    _this.type = HalfFloatType;\n    return _this;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  _createClass(RGBELoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var /* return codes for rgbe routines */\n        //RGBE_RETURN_SUCCESS = 0,\n        RGBE_RETURN_FAILURE = -1,\n        /* default error routine.  change this to change error handling */\n        rgbe_read_error = 1,\n        rgbe_write_error = 2,\n        rgbe_format_error = 3,\n        rgbe_memory_error = 4,\n        rgbe_error = function rgbe_error(rgbe_error_code, msg) {\n          switch (rgbe_error_code) {\n            case rgbe_read_error:\n              console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n              break;\n            case rgbe_write_error:\n              console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n              break;\n            case rgbe_format_error:\n              console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n              break;\n            default:\n            case rgbe_memory_error:\n              console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n          }\n          return RGBE_RETURN_FAILURE;\n        },\n        /* offsets to red, green, and blue components in a data (float) pixel */\n        //RGBE_DATA_RED = 0,\n        //RGBE_DATA_GREEN = 1,\n        //RGBE_DATA_BLUE = 2,\n\n        /* number of floats per pixel, use 4 since stored in rgba image format */\n        //RGBE_DATA_SIZE = 4,\n\n        /* flags indicating which fields in an rgbe_header_info are valid */\n        RGBE_VALID_PROGRAMTYPE = 1,\n        RGBE_VALID_FORMAT = 2,\n        RGBE_VALID_DIMENSIONS = 4,\n        NEWLINE = '\\n',\n        fgets = function fgets(buffer, lineLimit, consume) {\n          var chunkSize = 128;\n          lineLimit = !lineLimit ? 1024 : lineLimit;\n          var p = buffer.pos,\n            i = -1,\n            len = 0,\n            s = '',\n            chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n          while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n            s += chunk;\n            len += chunk.length;\n            p += chunkSize;\n            chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n          }\n          if (-1 < i) {\n            /*for (i=l-1; i>=0; i--) {\n            byteCode = m.charCodeAt(i);\n            if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n            else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n            if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n            }*/\n            if (false !== consume) buffer.pos += len + i + 1;\n            return s + chunk.slice(0, i);\n          }\n          return false;\n        },\n        /* minimal header reading.  modify if you want to parse more information */\n        RGBE_ReadHeader = function RGBE_ReadHeader(buffer) {\n          // regexes to parse header info fields\n          var magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n            header = {\n              valid: 0\n              /* indicate which fields are valid */,\n\n              string: ''\n              /* the actual header string */,\n\n              comments: ''\n              /* comments found in header */,\n\n              programtype: 'RGBE'\n              /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */,\n\n              format: ''\n              /* RGBE format, default 32-bit_rle_rgbe */,\n\n              gamma: 1.0\n              /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */,\n\n              exposure: 1.0\n              /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */,\n\n              width: 0,\n              height: 0\n              /* image dimensions, width/height */\n            };\n\n          var line, match;\n          if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n            return rgbe_error(rgbe_read_error, 'no header found');\n          }\n          /* if you want to require the magic token then uncomment the next line */\n\n          if (!(match = line.match(magic_token_re))) {\n            return rgbe_error(rgbe_format_error, 'bad initial token');\n          }\n          header.valid |= RGBE_VALID_PROGRAMTYPE;\n          header.programtype = match[1];\n          header.string += line + '\\n';\n          while (true) {\n            line = fgets(buffer);\n            if (false === line) break;\n            header.string += line + '\\n';\n            if ('#' === line.charAt(0)) {\n              header.comments += line + '\\n';\n              continue; // comment line\n            }\n\n            if (match = line.match(gamma_re)) {\n              header.gamma = parseFloat(match[1]);\n            }\n            if (match = line.match(exposure_re)) {\n              header.exposure = parseFloat(match[1]);\n            }\n            if (match = line.match(format_re)) {\n              header.valid |= RGBE_VALID_FORMAT;\n              header.format = match[1]; //'32-bit_rle_rgbe';\n            }\n\n            if (match = line.match(dimensions_re)) {\n              header.valid |= RGBE_VALID_DIMENSIONS;\n              header.height = parseInt(match[1], 10);\n              header.width = parseInt(match[2], 10);\n            }\n            if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n          }\n          if (!(header.valid & RGBE_VALID_FORMAT)) {\n            return rgbe_error(rgbe_format_error, 'missing format specifier');\n          }\n          if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n            return rgbe_error(rgbe_format_error, 'missing image size specifier');\n          }\n          return header;\n        },\n        RGBE_ReadPixels_RLE = function RGBE_ReadPixels_RLE(buffer, w, h) {\n          var scanline_width = w;\n          if (\n          // run length encoding is not allowed so read flat\n          scanline_width < 8 || scanline_width > 0x7fff ||\n          // this file is not run length encoded\n          2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n            // return the flat buffer\n            return new Uint8Array(buffer);\n          }\n          if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n            return rgbe_error(rgbe_format_error, 'wrong scanline width');\n          }\n          var data_rgba = new Uint8Array(4 * w * h);\n          if (!data_rgba.length) {\n            return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n          }\n          var offset = 0,\n            pos = 0;\n          var ptr_end = 4 * scanline_width;\n          var rgbeStart = new Uint8Array(4);\n          var scanline_buffer = new Uint8Array(ptr_end);\n          var num_scanlines = h; // read in each successive scanline\n\n          while (num_scanlines > 0 && pos < buffer.byteLength) {\n            if (pos + 4 > buffer.byteLength) {\n              return rgbe_error(rgbe_read_error);\n            }\n            rgbeStart[0] = buffer[pos++];\n            rgbeStart[1] = buffer[pos++];\n            rgbeStart[2] = buffer[pos++];\n            rgbeStart[3] = buffer[pos++];\n            if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n              return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n            } // read each of the four channels for the scanline into the buffer\n            // first red, then green, then blue, then exponent\n\n            var ptr = 0,\n              count = void 0;\n            while (ptr < ptr_end && pos < buffer.byteLength) {\n              count = buffer[pos++];\n              var isEncodedRun = count > 128;\n              if (isEncodedRun) count -= 128;\n              if (0 === count || ptr + count > ptr_end) {\n                return rgbe_error(rgbe_format_error, 'bad scanline data');\n              }\n              if (isEncodedRun) {\n                // a (encoded) run of the same value\n                var byteValue = buffer[pos++];\n                for (var i = 0; i < count; i++) {\n                  scanline_buffer[ptr++] = byteValue;\n                } //ptr += count;\n              } else {\n                // a literal-run\n                scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n                ptr += count;\n                pos += count;\n              }\n            } // now convert data from buffer into rgba\n            // first red, then green, then blue, then exponent (alpha)\n\n            var l = scanline_width; //scanline_buffer.byteLength;\n\n            for (var _i = 0; _i < l; _i++) {\n              var off = 0;\n              data_rgba[offset] = scanline_buffer[_i + off];\n              off += scanline_width; //1;\n\n              data_rgba[offset + 1] = scanline_buffer[_i + off];\n              off += scanline_width; //1;\n\n              data_rgba[offset + 2] = scanline_buffer[_i + off];\n              off += scanline_width; //1;\n\n              data_rgba[offset + 3] = scanline_buffer[_i + off];\n              offset += 4;\n            }\n            num_scanlines--;\n          }\n          return data_rgba;\n        };\n      var RGBEByteToRGBFloat = function RGBEByteToRGBFloat(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2.0, e - 128.0) / 255.0;\n        destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n        destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n        destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n        destArray[destOffset + 3] = 1;\n      };\n      var RGBEByteToRGBHalf = function RGBEByteToRGBHalf(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n        destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n        destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n        destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n        destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n      };\n      var byteArray = new Uint8Array(buffer);\n      byteArray.pos = 0;\n      var rgbe_header_info = RGBE_ReadHeader(byteArray);\n      if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n        var w = rgbe_header_info.width,\n          h = rgbe_header_info.height,\n          image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n        if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n          var data, type;\n          var numElements;\n          switch (this.type) {\n            case FloatType:\n              numElements = image_rgba_data.length / 4;\n              var floatArray = new Float32Array(numElements * 4);\n              for (var j = 0; j < numElements; j++) {\n                RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n              }\n              data = floatArray;\n              type = FloatType;\n              break;\n            case HalfFloatType:\n              numElements = image_rgba_data.length / 4;\n              var halfArray = new Uint16Array(numElements * 4);\n              for (var _j = 0; _j < numElements; _j++) {\n                RGBEByteToRGBHalf(image_rgba_data, _j * 4, halfArray, _j * 4);\n              }\n              data = halfArray;\n              type = HalfFloatType;\n              break;\n            default:\n              console.error('THREE.RGBELoader: unsupported type: ', this.type);\n              break;\n          }\n          return {\n            width: w,\n            height: h,\n            data: data,\n            header: rgbe_header_info.string,\n            gamma: rgbe_header_info.gamma,\n            exposure: rgbe_header_info.exposure,\n            type: type\n          };\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      function onLoadCallback(texture, texData) {\n        switch (texture.type) {\n          case FloatType:\n          case HalfFloatType:\n            texture.encoding = LinearEncoding;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n        }\n        if (onLoad) onLoad(texture, texData);\n      }\n      return _get(_getPrototypeOf(RGBELoader.prototype), \"load\", this).call(this, url, onLoadCallback, onProgress, onError);\n    }\n  }]);\n  return RGBELoader;\n}(DataTextureLoader);\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","HalfFloatType","FloatType","DataUtils","LinearEncoding","LinearFilter","RGBELoader","manager","type","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","value","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","minFilter","magFilter","generateMipmaps","flipY"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/RGBELoader.js"],"sourcesContent":["import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  parse(buffer) {\n    const\n    /* return codes for rgbe routines */\n    //RGBE_RETURN_SUCCESS = 0,\n    RGBE_RETURN_FAILURE = -1,\n\n    /* default error routine.  change this to change error handling */\n    rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n          break;\n\n        case rgbe_write_error:\n          console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n          break;\n\n        case rgbe_format_error:\n          console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n\n    /* offsets to red, green, and blue components in a data (float) pixel */\n    //RGBE_DATA_RED = 0,\n    //RGBE_DATA_GREEN = 1,\n    //RGBE_DATA_BLUE = 2,\n\n    /* number of floats per pixel, use 4 since stored in rgba image format */\n    //RGBE_DATA_SIZE = 4,\n\n    /* flags indicating which fields in an rgbe_header_info are valid */\n    RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function (buffer, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        /*for (i=l-1; i>=0; i--) {\n        byteCode = m.charCodeAt(i);\n        if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n        if (false !== consume) buffer.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n\n    /* minimal header reading.  modify if you want to parse more information */\n    RGBE_ReadHeader = function (buffer) {\n      // regexes to parse header info fields\n      const magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n      header = {\n        valid: 0\n        /* indicate which fields are valid */\n        ,\n        string: ''\n        /* the actual header string */\n        ,\n        comments: ''\n        /* comments found in header */\n        ,\n        programtype: 'RGBE'\n        /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n        ,\n        format: ''\n        /* RGBE format, default 32-bit_rle_rgbe */\n        ,\n        gamma: 1.0\n        /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n        ,\n        exposure: 1.0\n        /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n        ,\n        width: 0,\n        height: 0\n        /* image dimensions, width/height */\n\n      };\n      let line, match;\n\n      if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n        return rgbe_error(rgbe_read_error, 'no header found');\n      }\n      /* if you want to require the magic token then uncomment the next line */\n\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, 'bad initial token');\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + '\\n';\n\n      while (true) {\n        line = fgets(buffer);\n        if (false === line) break;\n        header.string += line + '\\n';\n\n        if ('#' === line.charAt(0)) {\n          header.comments += line + '\\n';\n          continue; // comment line\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1]; //'32-bit_rle_rgbe';\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, 'missing format specifier');\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, 'missing image size specifier');\n      }\n\n      return header;\n    },\n          RGBE_ReadPixels_RLE = function (buffer, w, h) {\n      const scanline_width = w;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n        // return the flat buffer\n        return new Uint8Array(buffer);\n      }\n\n      if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n        return rgbe_error(rgbe_format_error, 'wrong scanline width');\n      }\n\n      const data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n      }\n\n      let offset = 0,\n          pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h; // read in each successive scanline\n\n      while (num_scanlines > 0 && pos < buffer.byteLength) {\n        if (pos + 4 > buffer.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer[pos++];\n        rgbeStart[1] = buffer[pos++];\n        rgbeStart[2] = buffer[pos++];\n        rgbeStart[3] = buffer[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n        } // read each of the four channels for the scanline into the buffer\n        // first red, then green, then blue, then exponent\n\n\n        let ptr = 0,\n            count;\n\n        while (ptr < ptr_end && pos < buffer.byteLength) {\n          count = buffer[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, 'bad scanline data');\n          }\n\n          if (isEncodedRun) {\n            // a (encoded) run of the same value\n            const byteValue = buffer[pos++];\n\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            } //ptr += count;\n\n          } else {\n            // a literal-run\n            scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        } // now convert data from buffer into rgba\n        // first red, then green, then blue, then exponent (alpha)\n\n\n        const l = scanline_width; //scanline_buffer.byteLength;\n\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n\n            data = floatArray;\n            type = FloatType;\n            break;\n\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type: type\n        };\n      }\n    }\n\n    return null;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { RGBELoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}