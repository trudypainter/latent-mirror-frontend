{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DataTexture, FloatType, IntType, UnsignedIntType, ByteType, UnsignedByteType, ShortType, UnsignedShortType, RedFormat, RGFormat, RGBAFormat, RedIntegerFormat, RGIntegerFormat, RGBAIntegerFormat, NearestFilter } from 'three';\nfunction countToStringFormat(count) {\n  switch (count) {\n    case 1:\n      return 'R';\n    case 2:\n      return 'RG';\n    case 3:\n      return 'RGBA';\n    case 4:\n      return 'RGBA';\n  }\n  throw new Error();\n}\nfunction countToFormat(count) {\n  switch (count) {\n    case 1:\n      return RedFormat;\n    case 2:\n      return RGFormat;\n    case 3:\n      return RGBAFormat;\n    case 4:\n      return RGBAFormat;\n  }\n}\nfunction countToIntFormat(count) {\n  switch (count) {\n    case 1:\n      return RedIntegerFormat;\n    case 2:\n      return RGIntegerFormat;\n    case 3:\n      return RGBAIntegerFormat;\n    case 4:\n      return RGBAIntegerFormat;\n  }\n}\nexport var VertexAttributeTexture = /*#__PURE__*/function (_DataTexture) {\n  _inherits(VertexAttributeTexture, _DataTexture);\n  var _super = _createSuper(VertexAttributeTexture);\n  function VertexAttributeTexture() {\n    var _this;\n    _classCallCheck(this, VertexAttributeTexture);\n    _this = _super.call(this);\n    _this.minFilter = NearestFilter;\n    _this.magFilter = NearestFilter;\n    _this.generateMipmaps = false;\n    _this.overrideItemSize = null;\n    _this._forcedType = null;\n    return _this;\n  }\n  _createClass(VertexAttributeTexture, [{\n    key: \"updateFrom\",\n    value: function updateFrom(attr) {\n      var overrideItemSize = this.overrideItemSize;\n      var originalItemSize = attr.itemSize;\n      var originalCount = attr.count;\n      if (overrideItemSize !== null) {\n        if (originalItemSize * originalCount % overrideItemSize !== 0.0) {\n          throw new Error('VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.');\n        }\n        attr.itemSize = overrideItemSize;\n        attr.count = originalCount * originalItemSize / overrideItemSize;\n      }\n      var itemSize = attr.itemSize;\n      var count = attr.count;\n      var normalized = attr.normalized;\n      var originalBufferCons = attr.array.constructor;\n      var byteCount = originalBufferCons.BYTES_PER_ELEMENT;\n      var targetType = this._forcedType;\n      var finalStride = itemSize;\n\n      // derive the type of texture this should be in the shader\n      if (targetType === null) {\n        switch (originalBufferCons) {\n          case Float32Array:\n            targetType = FloatType;\n            break;\n          case Uint8Array:\n          case Uint16Array:\n          case Uint32Array:\n            targetType = UnsignedIntType;\n            break;\n          case Int8Array:\n          case Int16Array:\n          case Int32Array:\n            targetType = IntType;\n            break;\n        }\n      }\n\n      // get the target format to store the texture as\n      var type, format, normalizeValue, targetBufferCons;\n      var internalFormat = countToStringFormat(itemSize);\n      switch (targetType) {\n        case FloatType:\n          normalizeValue = 1.0;\n          format = countToFormat(itemSize);\n          if (normalized && byteCount === 1) {\n            targetBufferCons = originalBufferCons;\n            internalFormat += '8';\n            if (originalBufferCons === Uint8Array) {\n              type = UnsignedByteType;\n            } else {\n              type = ByteType;\n              internalFormat += '_SNORM';\n            }\n          } else {\n            targetBufferCons = Float32Array;\n            internalFormat += '32F';\n            type = FloatType;\n          }\n          break;\n        case IntType:\n          internalFormat += byteCount * 8 + 'I';\n          normalizeValue = normalized ? Math.pow(2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1) : 1.0;\n          format = countToIntFormat(itemSize);\n          if (byteCount === 1) {\n            targetBufferCons = Int8Array;\n            type = ByteType;\n          } else if (byteCount === 2) {\n            targetBufferCons = Int16Array;\n            type = ShortType;\n          } else {\n            targetBufferCons = Int32Array;\n            type = IntType;\n          }\n          break;\n        case UnsignedIntType:\n          internalFormat += byteCount * 8 + 'UI';\n          normalizeValue = normalized ? Math.pow(2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1) : 1.0;\n          format = countToIntFormat(itemSize);\n          if (byteCount === 1) {\n            targetBufferCons = Uint8Array;\n            type = UnsignedByteType;\n          } else if (byteCount === 2) {\n            targetBufferCons = Uint16Array;\n            type = UnsignedShortType;\n          } else {\n            targetBufferCons = Uint32Array;\n            type = UnsignedIntType;\n          }\n          break;\n      }\n\n      // there will be a mismatch between format length and final length because\n      // RGBFormat and RGBIntegerFormat was removed\n      if (finalStride === 3 && (format === RGBAFormat || format === RGBAIntegerFormat)) {\n        finalStride = 4;\n      }\n\n      // copy the data over to the new texture array\n      var dimension = Math.ceil(Math.sqrt(count));\n      var length = finalStride * dimension * dimension;\n      var dataArray = new targetBufferCons(length);\n      for (var i = 0; i < count; i++) {\n        var ii = finalStride * i;\n        dataArray[ii] = attr.getX(i) / normalizeValue;\n        if (itemSize >= 2) {\n          dataArray[ii + 1] = attr.getY(i) / normalizeValue;\n        }\n        if (itemSize >= 3) {\n          dataArray[ii + 2] = attr.getZ(i) / normalizeValue;\n          if (finalStride === 4) {\n            dataArray[ii + 3] = 1.0;\n          }\n        }\n        if (itemSize >= 4) {\n          dataArray[ii + 3] = attr.getW(i) / normalizeValue;\n        }\n      }\n      this.internalFormat = internalFormat;\n      this.format = format;\n      this.type = type;\n      this.image.width = dimension;\n      this.image.height = dimension;\n      this.image.data = dataArray;\n      this.needsUpdate = true;\n      this.dispose();\n      attr.itemSize = originalItemSize;\n      attr.count = originalCount;\n    }\n  }]);\n  return VertexAttributeTexture;\n}(DataTexture);\nexport var UIntVertexAttributeTexture = /*#__PURE__*/function (_VertexAttributeTextu) {\n  _inherits(UIntVertexAttributeTexture, _VertexAttributeTextu);\n  var _super2 = _createSuper(UIntVertexAttributeTexture);\n  function UIntVertexAttributeTexture() {\n    var _this2;\n    _classCallCheck(this, UIntVertexAttributeTexture);\n    _this2 = _super2.call(this);\n    _this2._forcedType = UnsignedIntType;\n    return _this2;\n  }\n  return _createClass(UIntVertexAttributeTexture);\n}(VertexAttributeTexture);\nexport var IntVertexAttributeTexture = /*#__PURE__*/function (_VertexAttributeTextu2) {\n  _inherits(IntVertexAttributeTexture, _VertexAttributeTextu2);\n  var _super3 = _createSuper(IntVertexAttributeTexture);\n  function IntVertexAttributeTexture() {\n    var _this3;\n    _classCallCheck(this, IntVertexAttributeTexture);\n    _this3 = _super3.call(this);\n    _this3._forcedType = IntType;\n    return _this3;\n  }\n  return _createClass(IntVertexAttributeTexture);\n}(VertexAttributeTexture);\nexport var FloatVertexAttributeTexture = /*#__PURE__*/function (_VertexAttributeTextu3) {\n  _inherits(FloatVertexAttributeTexture, _VertexAttributeTextu3);\n  var _super4 = _createSuper(FloatVertexAttributeTexture);\n  function FloatVertexAttributeTexture() {\n    var _this4;\n    _classCallCheck(this, FloatVertexAttributeTexture);\n    _this4 = _super4.call(this);\n    _this4._forcedType = FloatType;\n    return _this4;\n  }\n  return _createClass(FloatVertexAttributeTexture);\n}(VertexAttributeTexture);","map":{"version":3,"names":["DataTexture","FloatType","IntType","UnsignedIntType","ByteType","UnsignedByteType","ShortType","UnsignedShortType","RedFormat","RGFormat","RGBAFormat","RedIntegerFormat","RGIntegerFormat","RGBAIntegerFormat","NearestFilter","countToStringFormat","count","Error","countToFormat","countToIntFormat","VertexAttributeTexture","minFilter","magFilter","generateMipmaps","overrideItemSize","_forcedType","attr","originalItemSize","itemSize","originalCount","normalized","originalBufferCons","array","constructor","byteCount","BYTES_PER_ELEMENT","targetType","finalStride","Float32Array","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","type","format","normalizeValue","targetBufferCons","internalFormat","Math","pow","dimension","ceil","sqrt","length","dataArray","i","ii","getX","getY","getZ","getW","image","width","height","data","needsUpdate","dispose","UIntVertexAttributeTexture","IntVertexAttributeTexture","FloatVertexAttributeTexture"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-mesh-bvh/src/gpu/VertexAttributeTexture.js"],"sourcesContent":["import {\r\n\tDataTexture,\r\n\tFloatType,\r\n\tIntType,\r\n\tUnsignedIntType,\r\n\tByteType,\r\n\tUnsignedByteType,\r\n\tShortType,\r\n\tUnsignedShortType,\r\n\r\n\tRedFormat,\r\n\tRGFormat,\r\n\tRGBAFormat,\r\n\r\n\tRedIntegerFormat,\r\n\tRGIntegerFormat,\r\n\tRGBAIntegerFormat,\r\n\r\n\tNearestFilter,\r\n} from 'three';\r\n\r\nfunction countToStringFormat( count ) {\r\n\r\n\tswitch ( count ) {\r\n\r\n\t\tcase 1: return 'R';\r\n\t\tcase 2: return 'RG';\r\n\t\tcase 3: return 'RGBA';\r\n\t\tcase 4: return 'RGBA';\r\n\r\n\t}\r\n\r\n\tthrow new Error();\r\n\r\n}\r\n\r\nfunction countToFormat( count ) {\r\n\r\n\tswitch ( count ) {\r\n\r\n\t\tcase 1: return RedFormat;\r\n\t\tcase 2: return RGFormat;\r\n\t\tcase 3: return RGBAFormat;\r\n\t\tcase 4: return RGBAFormat;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction countToIntFormat( count ) {\r\n\r\n\tswitch ( count ) {\r\n\r\n\t\tcase 1: return RedIntegerFormat;\r\n\t\tcase 2: return RGIntegerFormat;\r\n\t\tcase 3: return RGBAIntegerFormat;\r\n\t\tcase 4: return RGBAIntegerFormat;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class VertexAttributeTexture extends DataTexture {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\t\tthis.minFilter = NearestFilter;\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.overrideItemSize = null;\r\n\t\tthis._forcedType = null;\r\n\r\n\t}\r\n\r\n\tupdateFrom( attr ) {\r\n\r\n\t\tconst overrideItemSize = this.overrideItemSize;\r\n\t\tconst originalItemSize = attr.itemSize;\r\n\t\tconst originalCount = attr.count;\r\n\t\tif ( overrideItemSize !== null ) {\r\n\r\n\t\t\tif ( ( originalItemSize * originalCount ) % overrideItemSize !== 0.0 ) {\r\n\r\n\t\t\t\tthrow new Error( 'VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattr.itemSize = overrideItemSize;\r\n\t\t\tattr.count = originalCount * originalItemSize / overrideItemSize;\r\n\r\n\t\t}\r\n\r\n\t\tconst itemSize = attr.itemSize;\r\n\t\tconst count = attr.count;\r\n\t\tconst normalized = attr.normalized;\r\n\t\tconst originalBufferCons = attr.array.constructor;\r\n\t\tconst byteCount = originalBufferCons.BYTES_PER_ELEMENT;\r\n\t\tlet targetType = this._forcedType;\r\n\t\tlet finalStride = itemSize;\r\n\r\n\t\t// derive the type of texture this should be in the shader\r\n\t\tif ( targetType === null ) {\r\n\r\n\t\t\tswitch ( originalBufferCons ) {\r\n\r\n\t\t\t\tcase Float32Array:\r\n\t\t\t\t\ttargetType = FloatType;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase Uint8Array:\r\n\t\t\t\tcase Uint16Array:\r\n\t\t\t\tcase Uint32Array:\r\n\t\t\t\t\ttargetType = UnsignedIntType;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase Int8Array:\r\n\t\t\t\tcase Int16Array:\r\n\t\t\t\tcase Int32Array:\r\n\t\t\t\t\ttargetType = IntType;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// get the target format to store the texture as\r\n\t\tlet type, format, normalizeValue, targetBufferCons;\r\n\t\tlet internalFormat = countToStringFormat( itemSize );\r\n\t\tswitch ( targetType ) {\r\n\r\n\t\t\tcase FloatType:\r\n\t\t\t\tnormalizeValue = 1.0;\r\n\t\t\t\tformat = countToFormat( itemSize );\r\n\r\n\t\t\t\tif ( normalized && byteCount === 1 ) {\r\n\r\n\t\t\t\t\ttargetBufferCons = originalBufferCons;\r\n\t\t\t\t\tinternalFormat += '8';\r\n\r\n\t\t\t\t\tif ( originalBufferCons === Uint8Array ) {\r\n\r\n\t\t\t\t\t\ttype = UnsignedByteType;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttype = ByteType;\r\n\t\t\t\t\t\tinternalFormat += '_SNORM';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttargetBufferCons = Float32Array;\r\n\t\t\t\t\tinternalFormat += '32F';\r\n\t\t\t\t\ttype = FloatType;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase IntType:\r\n\t\t\t\tinternalFormat += byteCount * 8 + 'I';\r\n\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\r\n\t\t\t\tformat = countToIntFormat( itemSize );\r\n\r\n\t\t\t\tif ( byteCount === 1 ) {\r\n\r\n\t\t\t\t\ttargetBufferCons = Int8Array;\r\n\t\t\t\t\ttype = ByteType;\r\n\r\n\t\t\t\t} else if ( byteCount === 2 ) {\r\n\r\n\t\t\t\t\ttargetBufferCons = Int16Array;\r\n\t\t\t\t\ttype = ShortType;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttargetBufferCons = Int32Array;\r\n\t\t\t\t\ttype = IntType;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase UnsignedIntType:\r\n\t\t\t\tinternalFormat += byteCount * 8 + 'UI';\r\n\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\r\n\t\t\t\tformat = countToIntFormat( itemSize );\r\n\r\n\t\t\t\tif ( byteCount === 1 ) {\r\n\r\n\t\t\t\t\ttargetBufferCons = Uint8Array;\r\n\t\t\t\t\ttype = UnsignedByteType;\r\n\r\n\t\t\t\t} else if ( byteCount === 2 ) {\r\n\r\n\t\t\t\t\ttargetBufferCons = Uint16Array;\r\n\t\t\t\t\ttype = UnsignedShortType;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttargetBufferCons = Uint32Array;\r\n\t\t\t\t\ttype = UnsignedIntType;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\t// there will be a mismatch between format length and final length because\r\n\t\t// RGBFormat and RGBIntegerFormat was removed\r\n\t\tif ( finalStride === 3 && ( format === RGBAFormat || format === RGBAIntegerFormat ) ) {\r\n\r\n\t\t\tfinalStride = 4;\r\n\r\n\t\t}\r\n\r\n\t\t// copy the data over to the new texture array\r\n\t\tconst dimension = Math.ceil( Math.sqrt( count ) );\r\n\t\tconst length = finalStride * dimension * dimension;\r\n\t\tconst dataArray = new targetBufferCons( length );\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tconst ii = finalStride * i;\r\n\t\t\tdataArray[ ii ] = attr.getX( i ) / normalizeValue;\r\n\r\n\t\t\tif ( itemSize >= 2 ) {\r\n\r\n\t\t\t\tdataArray[ ii + 1 ] = attr.getY( i ) / normalizeValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( itemSize >= 3 ) {\r\n\r\n\t\t\t\tdataArray[ ii + 2 ] = attr.getZ( i ) / normalizeValue;\r\n\r\n\t\t\t\tif ( finalStride === 4 ) {\r\n\r\n\t\t\t\t\tdataArray[ ii + 3 ] = 1.0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( itemSize >= 4 ) {\r\n\r\n\t\t\t\tdataArray[ ii + 3 ] = attr.getW( i ) / normalizeValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.internalFormat = internalFormat;\r\n\t\tthis.format = format;\r\n\t\tthis.type = type;\r\n\t\tthis.image.width = dimension;\r\n\t\tthis.image.height = dimension;\r\n\t\tthis.image.data = dataArray;\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.dispose();\r\n\r\n\t\tattr.itemSize = originalItemSize;\r\n\t\tattr.count = originalCount;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class UIntVertexAttributeTexture extends VertexAttributeTexture {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\t\tthis._forcedType = UnsignedIntType;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class IntVertexAttributeTexture extends VertexAttributeTexture {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\t\tthis._forcedType = IntType;\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport class FloatVertexAttributeTexture extends VertexAttributeTexture {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\t\tthis._forcedType = FloatType;\r\n\r\n\t}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}