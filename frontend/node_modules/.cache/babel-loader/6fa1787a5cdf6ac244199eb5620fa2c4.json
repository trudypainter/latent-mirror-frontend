{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Mesh, ShaderMaterial, SphereGeometry } from 'three';\nvar LightProbeHelper = /*#__PURE__*/function (_Mesh) {\n  _inherits(LightProbeHelper, _Mesh);\n  var _super = _createSuper(LightProbeHelper);\n  function LightProbeHelper(lightProbe, size) {\n    var _this;\n    _classCallCheck(this, LightProbeHelper);\n    _this.lightProbe = lightProbe;\n    _this.size = size;\n    var material = new ShaderMaterial({\n      type: 'LightProbeHelperMaterial',\n      uniforms: {\n        sh: {\n          value: _this.lightProbe.sh.coefficients\n        },\n        // by reference\n        intensity: {\n          value: _this.lightProbe.intensity\n        }\n      },\n      vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tvNormal = normalize( normalMatrix * normal );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n      fragmentShader: ['#define RECIPROCAL_PI 0.318309886', 'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {', '\t// matrix is assumed to be orthogonal', '\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );', '}', '// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf', 'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {', '\t// normal is assumed to have unit length', '\tfloat x = normal.x, y = normal.y, z = normal.z;', '\t// band 0', '\tvec3 result = shCoefficients[ 0 ] * 0.886227;', '\t// band 1', '\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;', '\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;', '\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;', '\t// band 2', '\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;', '\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;', '\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );', '\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;', '\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );', '\treturn result;', '}', 'uniform vec3 sh[ 9 ]; // sh coefficients', 'uniform float intensity; // light probe intensity', 'varying vec3 vNormal;', 'void main() {', '\tvec3 normal = normalize( vNormal );', '\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );', '\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );', '\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;', '\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );', '}'].join('\\n')\n    });\n    var geometry = new SphereGeometry(1, 32, 16);\n    _this = _super.call(this, geometry, material);\n    _this.type = 'LightProbeHelper';\n    _this.onBeforeRender();\n    return _this;\n  }\n  _createClass(LightProbeHelper, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.geometry.dispose();\n      this.material.dispose();\n    }\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      this.position.copy(this.lightProbe.position);\n      this.scale.set(1, 1, 1).multiplyScalar(this.size);\n      this.material.uniforms.intensity.value = this.lightProbe.intensity;\n    }\n  }]);\n  return LightProbeHelper;\n}(Mesh);\nexport { LightProbeHelper };","map":{"version":3,"names":["Mesh","ShaderMaterial","SphereGeometry","LightProbeHelper","lightProbe","size","material","type","uniforms","sh","value","coefficients","intensity","vertexShader","join","fragmentShader","geometry","onBeforeRender","dispose","position","copy","scale","set","multiplyScalar"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/helpers/LightProbeHelper.js"],"sourcesContent":["import { Mesh, ShaderMaterial, SphereGeometry } from 'three';\n\nclass LightProbeHelper extends Mesh {\n  constructor(lightProbe, size) {\n    this.lightProbe = lightProbe;\n    this.size = size;\n    const material = new ShaderMaterial({\n      type: 'LightProbeHelperMaterial',\n      uniforms: {\n        sh: {\n          value: this.lightProbe.sh.coefficients\n        },\n        // by reference\n        intensity: {\n          value: this.lightProbe.intensity\n        }\n      },\n      vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tvNormal = normalize( normalMatrix * normal );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n      fragmentShader: ['#define RECIPROCAL_PI 0.318309886', 'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {', '\t// matrix is assumed to be orthogonal', '\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );', '}', '// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf', 'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {', '\t// normal is assumed to have unit length', '\tfloat x = normal.x, y = normal.y, z = normal.z;', '\t// band 0', '\tvec3 result = shCoefficients[ 0 ] * 0.886227;', '\t// band 1', '\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;', '\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;', '\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;', '\t// band 2', '\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;', '\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;', '\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );', '\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;', '\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );', '\treturn result;', '}', 'uniform vec3 sh[ 9 ]; // sh coefficients', 'uniform float intensity; // light probe intensity', 'varying vec3 vNormal;', 'void main() {', '\tvec3 normal = normalize( vNormal );', '\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );', '\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );', '\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;', '\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );', '}'].join('\\n')\n    });\n    const geometry = new SphereGeometry(1, 32, 16);\n    super(geometry, material);\n    this.type = 'LightProbeHelper';\n    this.onBeforeRender();\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n\n  onBeforeRender() {\n    this.position.copy(this.lightProbe.position);\n    this.scale.set(1, 1, 1).multiplyScalar(this.size);\n    this.material.uniforms.intensity.value = this.lightProbe.intensity;\n  }\n\n}\n\nexport { LightProbeHelper };\n"],"mappings":";;;;AAAA,SAASA,IAAI,EAAEC,cAAc,EAAEC,cAAc,QAAQ,OAAO;AAAC,IAEvDC,gBAAgB;EAAA;EAAA;EACpB,0BAAYC,UAAU,EAAEC,IAAI,EAAE;IAAA;IAAA;IAC5B,MAAKD,UAAU,GAAGA,UAAU;IAC5B,MAAKC,IAAI,GAAGA,IAAI;IAChB,IAAMC,QAAQ,GAAG,IAAIL,cAAc,CAAC;MAClCM,IAAI,EAAE,0BAA0B;MAChCC,QAAQ,EAAE;QACRC,EAAE,EAAE;UACFC,KAAK,EAAE,MAAKN,UAAU,CAACK,EAAE,CAACE;QAC5B,CAAC;QACD;QACAC,SAAS,EAAE;UACTF,KAAK,EAAE,MAAKN,UAAU,CAACQ;QACzB;MACF,CAAC;MACDC,YAAY,EAAE,CAAC,uBAAuB,EAAE,eAAe,EAAE,gDAAgD,EAAE,4EAA4E,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACxMC,cAAc,EAAE,CAAC,mCAAmC,EAAE,oEAAoE,EAAE,wCAAwC,EAAE,4DAA4D,EAAE,GAAG,EAAE,mEAAmE,EAAE,yEAAyE,EAAE,2CAA2C,EAAE,kDAAkD,EAAE,YAAY,EAAE,gDAAgD,EAAE,YAAY,EAAE,sDAAsD,EAAE,sDAAsD,EAAE,sDAAsD,EAAE,YAAY,EAAE,0DAA0D,EAAE,0DAA0D,EAAE,mEAAmE,EAAE,0DAA0D,EAAE,gEAAgE,EAAE,iBAAiB,EAAE,GAAG,EAAE,0CAA0C,EAAE,mDAAmD,EAAE,uBAAuB,EAAE,eAAe,EAAE,sCAAsC,EAAE,sEAAsE,EAAE,0DAA0D,EAAE,+DAA+D,EAAE,oEAAoE,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;IAC//C,CAAC,CAAC;IACF,IAAME,QAAQ,GAAG,IAAId,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAC9C,0BAAMc,QAAQ,EAAEV,QAAQ;IACxB,MAAKC,IAAI,GAAG,kBAAkB;IAC9B,MAAKU,cAAc,EAAE;IAAC;EACxB;EAAC;IAAA;IAAA,OAED,mBAAU;MACR,IAAI,CAACD,QAAQ,CAACE,OAAO,EAAE;MACvB,IAAI,CAACZ,QAAQ,CAACY,OAAO,EAAE;IACzB;EAAC;IAAA;IAAA,OAED,0BAAiB;MACf,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAChB,UAAU,CAACe,QAAQ,CAAC;MAC5C,IAAI,CAACE,KAAK,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACC,cAAc,CAAC,IAAI,CAAClB,IAAI,CAAC;MACjD,IAAI,CAACC,QAAQ,CAACE,QAAQ,CAACI,SAAS,CAACF,KAAK,GAAG,IAAI,CAACN,UAAU,CAACQ,SAAS;IACpE;EAAC;EAAA;AAAA,EAjC4BZ,IAAI;AAqCnC,SAASG,gBAAgB"},"metadata":{},"sourceType":"module"}