{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute, Vector3 } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\n\n/**\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\nconst _cb = new Vector3(),\n  _ab = new Vector3();\nclass SimplifyModifier {\n  modify(geometry, count) {\n    geometry = geometry.clone();\n    const attributes = geometry.attributes;\n\n    // this modifier can only process indexed and non-indexed geomtries with a position attribute\n\n    for (const name in attributes) {\n      if (name !== 'position') geometry.deleteAttribute(name);\n    }\n    geometry = BufferGeometryUtils.mergeVertices(geometry);\n\n    //\n    // put data of original geometry in different data structures\n    //\n\n    const vertices = [];\n    const faces = [];\n\n    // add vertices\n\n    const positionAttribute = geometry.getAttribute('position');\n    for (let i = 0; i < positionAttribute.count; i++) {\n      const v = new Vector3().fromBufferAttribute(positionAttribute, i);\n      const vertex = new Vertex(v);\n      vertices.push(vertex);\n    }\n\n    // add faces\n\n    let index = geometry.getIndex();\n    if (index !== null) {\n      for (let i = 0; i < index.count; i += 3) {\n        const a = index.getX(i);\n        const b = index.getX(i + 1);\n        const c = index.getX(i + 2);\n        const triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n        faces.push(triangle);\n      }\n    } else {\n      for (let i = 0; i < positionAttribute.count; i += 3) {\n        const a = i;\n        const b = i + 1;\n        const c = i + 2;\n        const triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n        faces.push(triangle);\n      }\n    }\n\n    // compute all edge collapse costs\n\n    for (let i = 0, il = vertices.length; i < il; i++) {\n      computeEdgeCostAtVertex(vertices[i]);\n    }\n    let nextVertex;\n    let z = count;\n    while (z--) {\n      nextVertex = minimumCostEdge(vertices);\n      if (!nextVertex) {\n        console.log('THREE.SimplifyModifier: No next vertex');\n        break;\n      }\n      collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n    }\n\n    //\n\n    const simplifiedGeometry = new BufferGeometry();\n    const position = [];\n    index = [];\n\n    //\n\n    for (let i = 0; i < vertices.length; i++) {\n      const vertex = vertices[i].position;\n      position.push(vertex.x, vertex.y, vertex.z);\n      // cache final index to GREATLY speed up faces reconstruction\n      vertices[i].id = i;\n    }\n\n    //\n\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      index.push(face.v1.id, face.v2.id, face.v3.id);\n    }\n\n    //\n\n    simplifiedGeometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n    simplifiedGeometry.setIndex(index);\n    return simplifiedGeometry;\n  }\n}\nfunction pushIfUnique(array, object) {\n  if (array.indexOf(object) === -1) array.push(object);\n}\nfunction removeFromArray(array, object) {\n  const k = array.indexOf(object);\n  if (k > -1) array.splice(k, 1);\n}\nfunction computeEdgeCollapseCost(u, v) {\n  // if we collapse edge uv by moving u to v then how\n  // much different will the model change, i.e. the \"error\".\n\n  const edgelength = v.position.distanceTo(u.position);\n  let curvature = 0;\n  const sideFaces = [];\n\n  // find the \"sides\" triangles that are on the edge uv\n  for (let i = 0, il = u.faces.length; i < il; i++) {\n    const face = u.faces[i];\n    if (face.hasVertex(v)) {\n      sideFaces.push(face);\n    }\n  }\n\n  // use the triangle facing most away from the sides\n  // to determine our curvature term\n  for (let i = 0, il = u.faces.length; i < il; i++) {\n    let minCurvature = 1;\n    const face = u.faces[i];\n    for (let j = 0; j < sideFaces.length; j++) {\n      const sideFace = sideFaces[j];\n      // use dot product of face normals.\n      const dotProd = face.normal.dot(sideFace.normal);\n      minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n    }\n    curvature = Math.max(curvature, minCurvature);\n  }\n\n  // crude approach in attempt to preserve borders\n  // though it seems not to be totally correct\n  const borders = 0;\n  if (sideFaces.length < 2) {\n    // we add some arbitrary cost for borders,\n    // borders += 10;\n    curvature = 1;\n  }\n  const amt = edgelength * curvature + borders;\n  return amt;\n}\nfunction computeEdgeCostAtVertex(v) {\n  // compute the edge collapse cost for all edges that start\n  // from vertex v.  Since we are only interested in reducing\n  // the object by selecting the min cost edge at each step, we\n  // only cache the cost of the least cost edge at this vertex\n  // (in member variable collapse) as well as the value of the\n  // cost (in member variable collapseCost).\n\n  if (v.neighbors.length === 0) {\n    // collapse if no neighbors.\n    v.collapseNeighbor = null;\n    v.collapseCost = -0.01;\n    return;\n  }\n  v.collapseCost = 100000;\n  v.collapseNeighbor = null;\n\n  // search all neighboring edges for \"least cost\" edge\n  for (let i = 0; i < v.neighbors.length; i++) {\n    const collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);\n    if (!v.collapseNeighbor) {\n      v.collapseNeighbor = v.neighbors[i];\n      v.collapseCost = collapseCost;\n      v.minCost = collapseCost;\n      v.totalCost = 0;\n      v.costCount = 0;\n    }\n    v.costCount++;\n    v.totalCost += collapseCost;\n    if (collapseCost < v.minCost) {\n      v.collapseNeighbor = v.neighbors[i];\n      v.minCost = collapseCost;\n    }\n  }\n\n  // we average the cost of collapsing at this vertex\n  v.collapseCost = v.totalCost / v.costCount;\n  // v.collapseCost = v.minCost;\n}\n\nfunction removeVertex(v, vertices) {\n  console.assert(v.faces.length === 0);\n  while (v.neighbors.length) {\n    const n = v.neighbors.pop();\n    removeFromArray(n.neighbors, v);\n  }\n  removeFromArray(vertices, v);\n}\nfunction removeFace(f, faces) {\n  removeFromArray(faces, f);\n  if (f.v1) removeFromArray(f.v1.faces, f);\n  if (f.v2) removeFromArray(f.v2.faces, f);\n  if (f.v3) removeFromArray(f.v3.faces, f);\n\n  // TODO optimize this!\n  const vs = [f.v1, f.v2, f.v3];\n  for (let i = 0; i < 3; i++) {\n    const v1 = vs[i];\n    const v2 = vs[(i + 1) % 3];\n    if (!v1 || !v2) continue;\n    v1.removeIfNonNeighbor(v2);\n    v2.removeIfNonNeighbor(v1);\n  }\n}\nfunction collapse(vertices, faces, u, v) {\n  // u and v are pointers to vertices of an edge\n\n  // Collapse the edge uv by moving vertex u onto v\n\n  if (!v) {\n    // u is a vertex all by itself so just delete it..\n    removeVertex(u, vertices);\n    return;\n  }\n  const tmpVertices = [];\n  for (let i = 0; i < u.neighbors.length; i++) {\n    tmpVertices.push(u.neighbors[i]);\n  }\n\n  // delete triangles on edge uv:\n  for (let i = u.faces.length - 1; i >= 0; i--) {\n    if (u.faces[i] && u.faces[i].hasVertex(v)) {\n      removeFace(u.faces[i], faces);\n    }\n  }\n\n  // update remaining triangles to have v instead of u\n  for (let i = u.faces.length - 1; i >= 0; i--) {\n    u.faces[i].replaceVertex(u, v);\n  }\n  removeVertex(u, vertices);\n\n  // recompute the edge collapse costs in neighborhood\n  for (let i = 0; i < tmpVertices.length; i++) {\n    computeEdgeCostAtVertex(tmpVertices[i]);\n  }\n}\nfunction minimumCostEdge(vertices) {\n  // O(n * n) approach. TODO optimize this\n\n  let least = vertices[0];\n  for (let i = 0; i < vertices.length; i++) {\n    if (vertices[i].collapseCost < least.collapseCost) {\n      least = vertices[i];\n    }\n  }\n  return least;\n}\n\n// we use a triangle class to represent structure of face slightly differently\n\nclass Triangle {\n  constructor(v1, v2, v3, a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n    this.normal = new Vector3();\n    this.computeNormal();\n    v1.faces.push(this);\n    v1.addUniqueNeighbor(v2);\n    v1.addUniqueNeighbor(v3);\n    v2.faces.push(this);\n    v2.addUniqueNeighbor(v1);\n    v2.addUniqueNeighbor(v3);\n    v3.faces.push(this);\n    v3.addUniqueNeighbor(v1);\n    v3.addUniqueNeighbor(v2);\n  }\n  computeNormal() {\n    const vA = this.v1.position;\n    const vB = this.v2.position;\n    const vC = this.v3.position;\n    _cb.subVectors(vC, vB);\n    _ab.subVectors(vA, vB);\n    _cb.cross(_ab).normalize();\n    this.normal.copy(_cb);\n  }\n  hasVertex(v) {\n    return v === this.v1 || v === this.v2 || v === this.v3;\n  }\n  replaceVertex(oldv, newv) {\n    if (oldv === this.v1) this.v1 = newv;else if (oldv === this.v2) this.v2 = newv;else if (oldv === this.v3) this.v3 = newv;\n    removeFromArray(oldv.faces, this);\n    newv.faces.push(this);\n    oldv.removeIfNonNeighbor(this.v1);\n    this.v1.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v2);\n    this.v2.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v3);\n    this.v3.removeIfNonNeighbor(oldv);\n    this.v1.addUniqueNeighbor(this.v2);\n    this.v1.addUniqueNeighbor(this.v3);\n    this.v2.addUniqueNeighbor(this.v1);\n    this.v2.addUniqueNeighbor(this.v3);\n    this.v3.addUniqueNeighbor(this.v1);\n    this.v3.addUniqueNeighbor(this.v2);\n    this.computeNormal();\n  }\n}\nclass Vertex {\n  constructor(v) {\n    this.position = v;\n    this.id = -1; // external use position in vertices list (for e.g. face generation)\n\n    this.faces = []; // faces vertex is connected\n    this.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n\n    // these will be computed in computeEdgeCostAtVertex()\n    this.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n    this.collapseNeighbor = null; // best candinate for collapsing\n  }\n\n  addUniqueNeighbor(vertex) {\n    pushIfUnique(this.neighbors, vertex);\n  }\n  removeIfNonNeighbor(n) {\n    const neighbors = this.neighbors;\n    const faces = this.faces;\n    const offset = neighbors.indexOf(n);\n    if (offset === -1) return;\n    for (let i = 0; i < faces.length; i++) {\n      if (faces[i].hasVertex(n)) return;\n    }\n    neighbors.splice(offset, 1);\n  }\n}\nexport { SimplifyModifier };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","Vector3","BufferGeometryUtils","_cb","_ab","SimplifyModifier","modify","geometry","count","clone","attributes","name","deleteAttribute","mergeVertices","vertices","faces","positionAttribute","getAttribute","i","v","fromBufferAttribute","vertex","Vertex","push","index","getIndex","a","getX","b","c","triangle","Triangle","il","length","computeEdgeCostAtVertex","nextVertex","z","minimumCostEdge","console","log","collapse","collapseNeighbor","simplifiedGeometry","position","x","y","id","face","v1","v2","v3","setAttribute","setIndex","pushIfUnique","array","object","indexOf","removeFromArray","k","splice","computeEdgeCollapseCost","u","edgelength","distanceTo","curvature","sideFaces","hasVertex","minCurvature","j","sideFace","dotProd","normal","dot","Math","min","max","borders","amt","neighbors","collapseCost","minCost","totalCost","costCount","removeVertex","assert","n","pop","removeFace","f","vs","removeIfNonNeighbor","tmpVertices","replaceVertex","least","constructor","computeNormal","addUniqueNeighbor","vA","vB","vC","subVectors","cross","normalize","copy","oldv","newv","offset"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three/examples/jsm/modifiers/SimplifyModifier.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tVector3\n} from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\n\n/**\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\nconst _cb = new Vector3(), _ab = new Vector3();\n\nclass SimplifyModifier {\n\n\tmodify( geometry, count ) {\n\n\t\tgeometry = geometry.clone();\n\t\tconst attributes = geometry.attributes;\n\n\t\t// this modifier can only process indexed and non-indexed geomtries with a position attribute\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tif ( name !== 'position' ) geometry.deleteAttribute( name );\n\n\t\t}\n\n\t\tgeometry = BufferGeometryUtils.mergeVertices( geometry );\n\n\t\t//\n\t\t// put data of original geometry in different data structures\n\t\t//\n\n\t\tconst vertices = [];\n\t\tconst faces = [];\n\n\t\t// add vertices\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tconst v = new Vector3().fromBufferAttribute( positionAttribute, i );\n\n\t\t\tconst vertex = new Vertex( v );\n\t\t\tvertices.push( vertex );\n\n\t\t}\n\n\t\t// add faces\n\n\t\tlet index = geometry.getIndex();\n\n\t\tif ( index !== null ) {\n\n\t\t\tfor ( let i = 0; i < index.count; i += 3 ) {\n\n\t\t\t\tconst a = index.getX( i );\n\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\tconst triangle = new Triangle( vertices[ a ], vertices[ b ], vertices[ c ], a, b, c );\n\t\t\t\tfaces.push( triangle );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\t\tconst a = i;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tconst triangle = new Triangle( vertices[ a ], vertices[ b ], vertices[ c ], a, b, c );\n\t\t\t\tfaces.push( triangle );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute all edge collapse costs\n\n\t\tfor ( let i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( vertices[ i ] );\n\n\t\t}\n\n\t\tlet nextVertex;\n\n\t\tlet z = count;\n\n\t\twhile ( z -- ) {\n\n\t\t\tnextVertex = minimumCostEdge( vertices );\n\n\t\t\tif ( ! nextVertex ) {\n\n\t\t\t\tconsole.log( 'THREE.SimplifyModifier: No next vertex' );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tcollapse( vertices, faces, nextVertex, nextVertex.collapseNeighbor );\n\n\t\t}\n\n\t\t//\n\n\t\tconst simplifiedGeometry = new BufferGeometry();\n\t\tconst position = [];\n\n\t\tindex = [];\n\n\t\t//\n\n\t\tfor ( let i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tconst vertex = vertices[ i ].position;\n\t\t\tposition.push( vertex.x, vertex.y, vertex.z );\n\t\t\t// cache final index to GREATLY speed up faces reconstruction\n\t\t\tvertices[ i ].id = i;\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( let i = 0; i < faces.length; i ++ ) {\n\n\t\t\tconst face = faces[ i ];\n\t\t\tindex.push( face.v1.id, face.v2.id, face.v3.id );\n\n\t\t}\n\n\t\t//\n\n\t\tsimplifiedGeometry.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\t\tsimplifiedGeometry.setIndex( index );\n\n\t\treturn simplifiedGeometry;\n\n\t}\n\n}\n\nfunction pushIfUnique( array, object ) {\n\n\tif ( array.indexOf( object ) === - 1 ) array.push( object );\n\n}\n\nfunction removeFromArray( array, object ) {\n\n\tconst k = array.indexOf( object );\n\tif ( k > - 1 ) array.splice( k, 1 );\n\n}\n\nfunction computeEdgeCollapseCost( u, v ) {\n\n\t// if we collapse edge uv by moving u to v then how\n\t// much different will the model change, i.e. the \"error\".\n\n\tconst edgelength = v.position.distanceTo( u.position );\n\tlet curvature = 0;\n\n\tconst sideFaces = [];\n\n\t// find the \"sides\" triangles that are on the edge uv\n\tfor ( let i = 0, il = u.faces.length; i < il; i ++ ) {\n\n\t\tconst face = u.faces[ i ];\n\n\t\tif ( face.hasVertex( v ) ) {\n\n\t\t\tsideFaces.push( face );\n\n\t\t}\n\n\t}\n\n\t// use the triangle facing most away from the sides\n\t// to determine our curvature term\n\tfor ( let i = 0, il = u.faces.length; i < il; i ++ ) {\n\n\t\tlet minCurvature = 1;\n\t\tconst face = u.faces[ i ];\n\n\t\tfor ( let j = 0; j < sideFaces.length; j ++ ) {\n\n\t\t\tconst sideFace = sideFaces[ j ];\n\t\t\t// use dot product of face normals.\n\t\t\tconst dotProd = face.normal.dot( sideFace.normal );\n\t\t\tminCurvature = Math.min( minCurvature, ( 1.001 - dotProd ) / 2 );\n\n\t\t}\n\n\t\tcurvature = Math.max( curvature, minCurvature );\n\n\t}\n\n\t// crude approach in attempt to preserve borders\n\t// though it seems not to be totally correct\n\tconst borders = 0;\n\n\tif ( sideFaces.length < 2 ) {\n\n\t\t// we add some arbitrary cost for borders,\n\t\t// borders += 10;\n\t\tcurvature = 1;\n\n\t}\n\n\tconst amt = edgelength * curvature + borders;\n\n\treturn amt;\n\n}\n\nfunction computeEdgeCostAtVertex( v ) {\n\n\t// compute the edge collapse cost for all edges that start\n\t// from vertex v.  Since we are only interested in reducing\n\t// the object by selecting the min cost edge at each step, we\n\t// only cache the cost of the least cost edge at this vertex\n\t// (in member variable collapse) as well as the value of the\n\t// cost (in member variable collapseCost).\n\n\tif ( v.neighbors.length === 0 ) {\n\n\t\t// collapse if no neighbors.\n\t\tv.collapseNeighbor = null;\n\t\tv.collapseCost = - 0.01;\n\n\t\treturn;\n\n\t}\n\n\tv.collapseCost = 100000;\n\tv.collapseNeighbor = null;\n\n\t// search all neighboring edges for \"least cost\" edge\n\tfor ( let i = 0; i < v.neighbors.length; i ++ ) {\n\n\t\tconst collapseCost = computeEdgeCollapseCost( v, v.neighbors[ i ] );\n\n\t\tif ( ! v.collapseNeighbor ) {\n\n\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\tv.collapseCost = collapseCost;\n\t\t\tv.minCost = collapseCost;\n\t\t\tv.totalCost = 0;\n\t\t\tv.costCount = 0;\n\n\t\t}\n\n\t\tv.costCount ++;\n\t\tv.totalCost += collapseCost;\n\n\t\tif ( collapseCost < v.minCost ) {\n\n\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\tv.minCost = collapseCost;\n\n\t\t}\n\n\t}\n\n\t// we average the cost of collapsing at this vertex\n\tv.collapseCost = v.totalCost / v.costCount;\n\t// v.collapseCost = v.minCost;\n\n}\n\nfunction removeVertex( v, vertices ) {\n\n\tconsole.assert( v.faces.length === 0 );\n\n\twhile ( v.neighbors.length ) {\n\n\t\tconst n = v.neighbors.pop();\n\t\tremoveFromArray( n.neighbors, v );\n\n\t}\n\n\tremoveFromArray( vertices, v );\n\n}\n\nfunction removeFace( f, faces ) {\n\n\tremoveFromArray( faces, f );\n\n\tif ( f.v1 ) removeFromArray( f.v1.faces, f );\n\tif ( f.v2 ) removeFromArray( f.v2.faces, f );\n\tif ( f.v3 ) removeFromArray( f.v3.faces, f );\n\n\t// TODO optimize this!\n\tconst vs = [ f.v1, f.v2, f.v3 ];\n\n\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\tconst v1 = vs[ i ];\n\t\tconst v2 = vs[ ( i + 1 ) % 3 ];\n\n\t\tif ( ! v1 || ! v2 ) continue;\n\n\t\tv1.removeIfNonNeighbor( v2 );\n\t\tv2.removeIfNonNeighbor( v1 );\n\n\t}\n\n}\n\nfunction collapse( vertices, faces, u, v ) { // u and v are pointers to vertices of an edge\n\n\t// Collapse the edge uv by moving vertex u onto v\n\n\tif ( ! v ) {\n\n\t\t// u is a vertex all by itself so just delete it..\n\t\tremoveVertex( u, vertices );\n\t\treturn;\n\n\t}\n\n\tconst tmpVertices = [];\n\n\tfor ( let i = 0; i < u.neighbors.length; i ++ ) {\n\n\t\ttmpVertices.push( u.neighbors[ i ] );\n\n\t}\n\n\n\t// delete triangles on edge uv:\n\tfor ( let i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\tif ( u.faces[ i ] && u.faces[ i ].hasVertex( v ) ) {\n\n\t\t\tremoveFace( u.faces[ i ], faces );\n\n\t\t}\n\n\t}\n\n\t// update remaining triangles to have v instead of u\n\tfor ( let i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\tu.faces[ i ].replaceVertex( u, v );\n\n\t}\n\n\n\tremoveVertex( u, vertices );\n\n\t// recompute the edge collapse costs in neighborhood\n\tfor ( let i = 0; i < tmpVertices.length; i ++ ) {\n\n\t\tcomputeEdgeCostAtVertex( tmpVertices[ i ] );\n\n\t}\n\n}\n\n\n\nfunction minimumCostEdge( vertices ) {\n\n\t// O(n * n) approach. TODO optimize this\n\n\tlet least = vertices[ 0 ];\n\n\tfor ( let i = 0; i < vertices.length; i ++ ) {\n\n\t\tif ( vertices[ i ].collapseCost < least.collapseCost ) {\n\n\t\t\tleast = vertices[ i ];\n\n\t\t}\n\n\t}\n\n\treturn least;\n\n}\n\n// we use a triangle class to represent structure of face slightly differently\n\nclass Triangle {\n\n\tconstructor( v1, v2, v3, a, b, c ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t\tthis.normal = new Vector3();\n\n\t\tthis.computeNormal();\n\n\t\tv1.faces.push( this );\n\t\tv1.addUniqueNeighbor( v2 );\n\t\tv1.addUniqueNeighbor( v3 );\n\n\t\tv2.faces.push( this );\n\t\tv2.addUniqueNeighbor( v1 );\n\t\tv2.addUniqueNeighbor( v3 );\n\n\n\t\tv3.faces.push( this );\n\t\tv3.addUniqueNeighbor( v1 );\n\t\tv3.addUniqueNeighbor( v2 );\n\n\t}\n\n\tcomputeNormal() {\n\n\t\tconst vA = this.v1.position;\n\t\tconst vB = this.v2.position;\n\t\tconst vC = this.v3.position;\n\n\t\t_cb.subVectors( vC, vB );\n\t\t_ab.subVectors( vA, vB );\n\t\t_cb.cross( _ab ).normalize();\n\n\t\tthis.normal.copy( _cb );\n\n\t}\n\n\thasVertex( v ) {\n\n\t\treturn v === this.v1 || v === this.v2 || v === this.v3;\n\n\t}\n\n\treplaceVertex( oldv, newv ) {\n\n\t\tif ( oldv === this.v1 ) this.v1 = newv;\n\t\telse if ( oldv === this.v2 ) this.v2 = newv;\n\t\telse if ( oldv === this.v3 ) this.v3 = newv;\n\n\t\tremoveFromArray( oldv.faces, this );\n\t\tnewv.faces.push( this );\n\n\n\t\toldv.removeIfNonNeighbor( this.v1 );\n\t\tthis.v1.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v2 );\n\t\tthis.v2.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v3 );\n\t\tthis.v3.removeIfNonNeighbor( oldv );\n\n\t\tthis.v1.addUniqueNeighbor( this.v2 );\n\t\tthis.v1.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v2.addUniqueNeighbor( this.v1 );\n\t\tthis.v2.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v3.addUniqueNeighbor( this.v1 );\n\t\tthis.v3.addUniqueNeighbor( this.v2 );\n\n\t\tthis.computeNormal();\n\n\t}\n\n}\n\nclass Vertex {\n\n\tconstructor( v ) {\n\n\t\tthis.position = v;\n\n\t\tthis.id = - 1; // external use position in vertices list (for e.g. face generation)\n\n\t\tthis.faces = []; // faces vertex is connected\n\t\tthis.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n\n\t\t// these will be computed in computeEdgeCostAtVertex()\n\t\tthis.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\t\tthis.collapseNeighbor = null; // best candinate for collapsing\n\n\t}\n\n\taddUniqueNeighbor( vertex ) {\n\n\t\tpushIfUnique( this.neighbors, vertex );\n\n\t}\n\n\tremoveIfNonNeighbor( n ) {\n\n\t\tconst neighbors = this.neighbors;\n\t\tconst faces = this.faces;\n\n\t\tconst offset = neighbors.indexOf( n );\n\n\t\tif ( offset === - 1 ) return;\n\n\t\tfor ( let i = 0; i < faces.length; i ++ ) {\n\n\t\t\tif ( faces[ i ].hasVertex( n ) ) return;\n\n\t\t}\n\n\t\tneighbors.splice( offset, 1 );\n\n\t}\n\n}\n\nexport { SimplifyModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}