{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute, OrthographicCamera, Mesh } from 'three';\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    this.enabled = true;\n\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    this.needsSwap = true;\n\n    // if set to true, the pass clears its buffer before rendering\n    this.clear = false;\n\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    this.renderToScreen = false;\n  }\n  setSize() {}\n  render() {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n_geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\nclass FullScreenQuad {\n  constructor(material) {\n    this._mesh = new Mesh(_geometry, material);\n  }\n  dispose() {\n    this._mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this._mesh, _camera);\n  }\n  get material() {\n    return this._mesh.material;\n  }\n  set material(value) {\n    this._mesh.material = value;\n  }\n}\nexport { Pass, FullScreenQuad };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","OrthographicCamera","Mesh","Pass","constructor","enabled","needsSwap","clear","renderToScreen","setSize","render","console","error","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","dispose","geometry","renderer","value"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three/examples/jsm/postprocessing/Pass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n"],"mappings":"AAAA,SACCA,cAAc,EACdC,sBAAsB,EACtBC,kBAAkB,EAClBC,IAAI,QACE,OAAO;AAEd,MAAMC,IAAI,CAAC;EAEVC,WAAW,GAAG;IAEb;IACA,IAAI,CAACC,OAAO,GAAG,IAAI;;IAEnB;IACA,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;IACA,IAAI,CAACC,KAAK,GAAG,KAAK;;IAElB;IACA,IAAI,CAACC,cAAc,GAAG,KAAK;EAE5B;EAEAC,OAAO,GAAwB,CAAC;EAEhCC,MAAM,GAAmE;IAExEC,OAAO,CAACC,KAAK,CAAE,4DAA4D,CAAE;EAE9E;AAED;;AAEA;;AAEA,MAAMC,OAAO,GAAG,IAAIZ,kBAAkB,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;;AAE9D;;AAEA,MAAMa,SAAS,GAAG,IAAIf,cAAc,EAAE;AACtCe,SAAS,CAACC,YAAY,CAAE,UAAU,EAAE,IAAIf,sBAAsB,CAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAC,CAAE,CAAE;AAC5Gc,SAAS,CAACC,YAAY,CAAE,IAAI,EAAE,IAAIf,sBAAsB,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAC,CAAE,CAAE;AAErF,MAAMgB,cAAc,CAAC;EAEpBZ,WAAW,CAAEa,QAAQ,EAAG;IAEvB,IAAI,CAACC,KAAK,GAAG,IAAIhB,IAAI,CAAEY,SAAS,EAAEG,QAAQ,CAAE;EAE7C;EAEAE,OAAO,GAAG;IAET,IAAI,CAACD,KAAK,CAACE,QAAQ,CAACD,OAAO,EAAE;EAE9B;EAEAT,MAAM,CAAEW,QAAQ,EAAG;IAElBA,QAAQ,CAACX,MAAM,CAAE,IAAI,CAACQ,KAAK,EAAEL,OAAO,CAAE;EAEvC;EAEA,IAAII,QAAQ,GAAG;IAEd,OAAO,IAAI,CAACC,KAAK,CAACD,QAAQ;EAE3B;EAEA,IAAIA,QAAQ,CAAEK,KAAK,EAAG;IAErB,IAAI,CAACJ,KAAK,CAACD,QAAQ,GAAGK,KAAK;EAE5B;AAED;AAEA,SAASnB,IAAI,EAAEa,cAAc"},"metadata":{},"sourceType":"module"}