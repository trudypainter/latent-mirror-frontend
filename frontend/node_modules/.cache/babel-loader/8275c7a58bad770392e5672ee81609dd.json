{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @author Deepkolos / https://github.com/deepkolos\n */var WorkerPool = /*#__PURE__*/function () {\n  function WorkerPool() {\n    var pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    _classCallCheck(this, WorkerPool);\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n  _createClass(WorkerPool, [{\n    key: \"_initWorker\",\n    value: function _initWorker(workerId) {\n      if (!this.workers[workerId]) {\n        var worker = this.workerCreator();\n        worker.addEventListener('message', this._onMessage.bind(this, workerId));\n        this.workers[workerId] = worker;\n      }\n    }\n  }, {\n    key: \"_getIdleWorker\",\n    value: function _getIdleWorker() {\n      for (var i = 0; i < this.pool; i++) {\n        if (!(this.workerStatus & 1 << i)) return i;\n      }\n      return -1;\n    }\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(workerId, msg) {\n      var resolve = this.workersResolve[workerId];\n      resolve && resolve(msg);\n      if (this.queue.length) {\n        var _this$queue$shift = this.queue.shift(),\n          _resolve = _this$queue$shift.resolve,\n          _msg = _this$queue$shift.msg,\n          transfer = _this$queue$shift.transfer;\n        this.workersResolve[workerId] = _resolve;\n        this.workers[workerId].postMessage(_msg, transfer);\n      } else {\n        this.workerStatus ^= 1 << workerId;\n      }\n    }\n  }, {\n    key: \"setWorkerCreator\",\n    value: function setWorkerCreator(workerCreator) {\n      this.workerCreator = workerCreator;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(pool) {\n      this.pool = pool;\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(msg, transfer) {\n      var _this = this;\n      return new Promise(function (resolve) {\n        var workerId = _this._getIdleWorker();\n        if (workerId !== -1) {\n          _this._initWorker(workerId);\n          _this.workerStatus |= 1 << workerId;\n          _this.workersResolve[workerId] = resolve;\n          _this.workers[workerId].postMessage(msg, transfer);\n        } else {\n          _this.queue.push({\n            resolve: resolve,\n            msg: msg,\n            transfer: transfer\n          });\n        }\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workers.forEach(function (worker) {\n        return worker.terminate();\n      });\n      this.workersResolve.length = 0;\n      this.workers.length = 0;\n      this.queue.length = 0;\n      this.workerStatus = 0;\n    }\n  }]);\n  return WorkerPool;\n}();\nexport { WorkerPool };","map":{"version":3,"names":["WorkerPool","pool","queue","workers","workersResolve","workerStatus","workerId","worker","workerCreator","addEventListener","_onMessage","bind","i","msg","resolve","length","shift","transfer","postMessage","Promise","_getIdleWorker","_initWorker","push","forEach","terminate"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/utils/WorkerPool.js"],"sourcesContent":["/**\n * @author Deepkolos / https://github.com/deepkolos\n */\nclass WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener('message', this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n\n    return -1;\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n\n    if (this.queue.length) {\n      const {\n        resolve,\n        msg,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve;\n      this.workers[workerId].postMessage(msg, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n\n}\n\nexport { WorkerPool };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}