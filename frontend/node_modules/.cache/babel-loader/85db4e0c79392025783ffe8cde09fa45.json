{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\nvar PLYLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PLYLoader, _Loader);\n  var _super = _createSuper(PLYLoader);\n  function PLYLoader(manager) {\n    var _this;\n    _classCallCheck(this, PLYLoader);\n    _this = _super.call(this, manager);\n    _this.propertyNameMapping = {};\n    return _this;\n  }\n  _createClass(PLYLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"setPropertyNameMapping\",\n    value: function setPropertyNameMapping(mapping) {\n      this.propertyNameMapping = mapping;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function parseHeader(data) {\n        var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n        var headerText = '';\n        var headerLength = 0;\n        var result = patternHeader.exec(data);\n        if (result !== null) {\n          headerText = result[1];\n          headerLength = new Blob([result[0]]).size;\n        }\n        var header = {\n          comments: [],\n          elements: [],\n          headerLength: headerLength,\n          objInfo: ''\n        };\n        var lines = headerText.split('\\n');\n        var currentElement;\n        function make_ply_element_property(propertValues, propertyNameMapping) {\n          var property = {\n            type: propertValues[0]\n          };\n          if (property.type === 'list') {\n            property.name = propertValues[3];\n            property.countType = propertValues[1];\n            property.itemType = propertValues[2];\n          } else {\n            property.name = propertValues[1];\n          }\n          if (property.name in propertyNameMapping) {\n            property.name = propertyNameMapping[property.name];\n          }\n          return property;\n        }\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n          line = line.trim();\n          if (line === '') continue;\n          var lineValues = line.split(/\\s+/);\n          var lineType = lineValues.shift();\n          line = lineValues.join(' ');\n          switch (lineType) {\n            case 'format':\n              header.format = lineValues[0];\n              header.version = lineValues[1];\n              break;\n            case 'comment':\n              header.comments.push(line);\n              break;\n            case 'element':\n              if (currentElement !== undefined) {\n                header.elements.push(currentElement);\n              }\n              currentElement = {};\n              currentElement.name = lineValues[0];\n              currentElement.count = parseInt(lineValues[1]);\n              currentElement.properties = [];\n              break;\n            case 'property':\n              currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n              break;\n            case 'obj_info':\n              header.objInfo = line;\n              break;\n            default:\n              console.log('unhandled', lineType, lineValues);\n          }\n        }\n        if (currentElement !== undefined) {\n          header.elements.push(currentElement);\n        }\n        return header;\n      }\n      function parseASCIINumber(n, type) {\n        switch (type) {\n          case 'char':\n          case 'uchar':\n          case 'short':\n          case 'ushort':\n          case 'int':\n          case 'uint':\n          case 'int8':\n          case 'uint8':\n          case 'int16':\n          case 'uint16':\n          case 'int32':\n          case 'uint32':\n            return parseInt(n);\n          case 'float':\n          case 'double':\n          case 'float32':\n          case 'float64':\n            return parseFloat(n);\n        }\n      }\n      function parseASCIIElement(properties, line) {\n        var values = line.split(/\\s+/);\n        var element = {};\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[i].type === 'list') {\n            var list = [];\n            var n = parseASCIINumber(values.shift(), properties[i].countType);\n            for (var j = 0; j < n; j++) {\n              list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n            }\n            element[properties[i].name] = list;\n          } else {\n            element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n          }\n        }\n        return element;\n      }\n      function parseASCII(data, header) {\n        // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        };\n        var result;\n        var patternBody = /end_header\\s([\\s\\S]*)$/;\n        var body = '';\n        if ((result = patternBody.exec(data)) !== null) {\n          body = result[1];\n        }\n        var lines = body.split('\\n');\n        var currentElement = 0;\n        var currentElementCount = 0;\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n          line = line.trim();\n          if (line === '') {\n            continue;\n          }\n          if (currentElementCount >= header.elements[currentElement].count) {\n            currentElement++;\n            currentElementCount = 0;\n          }\n          var element = parseASCIIElement(header.elements[currentElement].properties, line);\n          handleElement(buffer, header.elements[currentElement].name, element);\n          currentElementCount++;\n        }\n        return postProcess(buffer);\n      }\n      function postProcess(buffer) {\n        var geometry = new BufferGeometry(); // mandatory buffer data\n\n        if (buffer.indices.length > 0) {\n          geometry.setIndex(buffer.indices);\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(buffer.vertices, 3)); // optional buffer data\n\n        if (buffer.normals.length > 0) {\n          geometry.setAttribute('normal', new Float32BufferAttribute(buffer.normals, 3));\n        }\n        if (buffer.uvs.length > 0) {\n          geometry.setAttribute('uv', new Float32BufferAttribute(buffer.uvs, 2));\n        }\n        if (buffer.colors.length > 0) {\n          geometry.setAttribute('color', new Float32BufferAttribute(buffer.colors, 3));\n        }\n        if (buffer.faceVertexUvs.length > 0) {\n          geometry = geometry.toNonIndexed();\n          geometry.setAttribute('uv', new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n        }\n        geometry.computeBoundingSphere();\n        return geometry;\n      }\n      function handleElement(buffer, elementName, element) {\n        if (elementName === 'vertex') {\n          buffer.vertices.push(element.x, element.y, element.z);\n          if ('nx' in element && 'ny' in element && 'nz' in element) {\n            buffer.normals.push(element.nx, element.ny, element.nz);\n          }\n          if ('s' in element && 't' in element) {\n            buffer.uvs.push(element.s, element.t);\n          }\n          if ('red' in element && 'green' in element && 'blue' in element) {\n            buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n          }\n        } else if (elementName === 'face') {\n          var vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\n          var texcoord = element.texcoord;\n          if (vertex_indices.length === 3) {\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n            if (texcoord && texcoord.length === 6) {\n              buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n              buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n              buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n            }\n          } else if (vertex_indices.length === 4) {\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n            buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n          }\n        }\n      }\n      function binaryRead(dataview, at, type, little_endian) {\n        switch (type) {\n          // corespondences for non-specific length types here match rply:\n          case 'int8':\n          case 'char':\n            return [dataview.getInt8(at), 1];\n          case 'uint8':\n          case 'uchar':\n            return [dataview.getUint8(at), 1];\n          case 'int16':\n          case 'short':\n            return [dataview.getInt16(at, little_endian), 2];\n          case 'uint16':\n          case 'ushort':\n            return [dataview.getUint16(at, little_endian), 2];\n          case 'int32':\n          case 'int':\n            return [dataview.getInt32(at, little_endian), 4];\n          case 'uint32':\n          case 'uint':\n            return [dataview.getUint32(at, little_endian), 4];\n          case 'float32':\n          case 'float':\n            return [dataview.getFloat32(at, little_endian), 4];\n          case 'float64':\n          case 'double':\n            return [dataview.getFloat64(at, little_endian), 8];\n        }\n      }\n      function binaryReadElement(dataview, at, properties, little_endian) {\n        var element = {};\n        var result,\n          read = 0;\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[i].type === 'list') {\n            var list = [];\n            result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n            var n = result[0];\n            read += result[1];\n            for (var j = 0; j < n; j++) {\n              result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n              list.push(result[0]);\n              read += result[1];\n            }\n            element[properties[i].name] = list;\n          } else {\n            result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n            element[properties[i].name] = result[0];\n            read += result[1];\n          }\n        }\n        return [element, read];\n      }\n      function parseBinary(data, header) {\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        };\n        var little_endian = header.format === 'binary_little_endian';\n        var body = new DataView(data, header.headerLength);\n        var result,\n          loc = 0;\n        for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n          for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n            result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n            loc += result[1];\n            var element = result[0];\n            handleElement(buffer, header.elements[currentElement].name, element);\n          }\n        }\n        return postProcess(buffer);\n      } //\n\n      var geometry;\n      var scope = this;\n      if (data instanceof ArrayBuffer) {\n        var text = LoaderUtils.decodeText(new Uint8Array(data));\n        var header = parseHeader(text);\n        geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n      } else {\n        geometry = parseASCII(data, parseHeader(data));\n      }\n      return geometry;\n    }\n  }]);\n  return PLYLoader;\n}(Loader);\nexport { PLYLoader };","map":{"version":3,"names":["Loader","FileLoader","LoaderUtils","BufferGeometry","Float32BufferAttribute","PLYLoader","manager","propertyNameMapping","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","mapping","data","parseHeader","patternHeader","headerText","headerLength","result","exec","Blob","size","header","comments","elements","objInfo","lines","split","currentElement","make_ply_element_property","propertValues","property","type","name","countType","itemType","i","length","line","trim","lineValues","lineType","shift","join","format","version","push","undefined","count","parseInt","properties","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","patternBody","body","currentElementCount","handleElement","postProcess","geometry","setIndex","setAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","parseBinary","DataView","loc","ArrayBuffer","decodeText","Uint8Array"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/loaders/PLYLoader.js"],"sourcesContent":["import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\n\nclass PLYLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.propertyNameMapping = {};\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setPropertyNameMapping(mapping) {\n    this.propertyNameMapping = mapping;\n  }\n\n  parse(data) {\n    function parseHeader(data) {\n      const patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n      let headerText = '';\n      let headerLength = 0;\n      const result = patternHeader.exec(data);\n\n      if (result !== null) {\n        headerText = result[1];\n        headerLength = new Blob([result[0]]).size;\n      }\n\n      const header = {\n        comments: [],\n        elements: [],\n        headerLength: headerLength,\n        objInfo: ''\n      };\n      const lines = headerText.split('\\n');\n      let currentElement;\n\n      function make_ply_element_property(propertValues, propertyNameMapping) {\n        const property = {\n          type: propertValues[0]\n        };\n\n        if (property.type === 'list') {\n          property.name = propertValues[3];\n          property.countType = propertValues[1];\n          property.itemType = propertValues[2];\n        } else {\n          property.name = propertValues[1];\n        }\n\n        if (property.name in propertyNameMapping) {\n          property.name = propertyNameMapping[property.name];\n        }\n\n        return property;\n      }\n\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === '') continue;\n        const lineValues = line.split(/\\s+/);\n        const lineType = lineValues.shift();\n        line = lineValues.join(' ');\n\n        switch (lineType) {\n          case 'format':\n            header.format = lineValues[0];\n            header.version = lineValues[1];\n            break;\n\n          case 'comment':\n            header.comments.push(line);\n            break;\n\n          case 'element':\n            if (currentElement !== undefined) {\n              header.elements.push(currentElement);\n            }\n\n            currentElement = {};\n            currentElement.name = lineValues[0];\n            currentElement.count = parseInt(lineValues[1]);\n            currentElement.properties = [];\n            break;\n\n          case 'property':\n            currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n            break;\n\n          case 'obj_info':\n            header.objInfo = line;\n            break;\n\n          default:\n            console.log('unhandled', lineType, lineValues);\n        }\n      }\n\n      if (currentElement !== undefined) {\n        header.elements.push(currentElement);\n      }\n\n      return header;\n    }\n\n    function parseASCIINumber(n, type) {\n      switch (type) {\n        case 'char':\n        case 'uchar':\n        case 'short':\n        case 'ushort':\n        case 'int':\n        case 'uint':\n        case 'int8':\n        case 'uint8':\n        case 'int16':\n        case 'uint16':\n        case 'int32':\n        case 'uint32':\n          return parseInt(n);\n\n        case 'float':\n        case 'double':\n        case 'float32':\n        case 'float64':\n          return parseFloat(n);\n      }\n    }\n\n    function parseASCIIElement(properties, line) {\n      const values = line.split(/\\s+/);\n      const element = {};\n\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === 'list') {\n          const list = [];\n          const n = parseASCIINumber(values.shift(), properties[i].countType);\n\n          for (let j = 0; j < n; j++) {\n            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n          }\n\n          element[properties[i].name] = list;\n        } else {\n          element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n        }\n      }\n\n      return element;\n    }\n\n    function parseASCII(data, header) {\n      // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      let result;\n      const patternBody = /end_header\\s([\\s\\S]*)$/;\n      let body = '';\n\n      if ((result = patternBody.exec(data)) !== null) {\n        body = result[1];\n      }\n\n      const lines = body.split('\\n');\n      let currentElement = 0;\n      let currentElementCount = 0;\n\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n\n        if (line === '') {\n          continue;\n        }\n\n        if (currentElementCount >= header.elements[currentElement].count) {\n          currentElement++;\n          currentElementCount = 0;\n        }\n\n        const element = parseASCIIElement(header.elements[currentElement].properties, line);\n        handleElement(buffer, header.elements[currentElement].name, element);\n        currentElementCount++;\n      }\n\n      return postProcess(buffer);\n    }\n\n    function postProcess(buffer) {\n      let geometry = new BufferGeometry(); // mandatory buffer data\n\n      if (buffer.indices.length > 0) {\n        geometry.setIndex(buffer.indices);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(buffer.vertices, 3)); // optional buffer data\n\n      if (buffer.normals.length > 0) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(buffer.normals, 3));\n      }\n\n      if (buffer.uvs.length > 0) {\n        geometry.setAttribute('uv', new Float32BufferAttribute(buffer.uvs, 2));\n      }\n\n      if (buffer.colors.length > 0) {\n        geometry.setAttribute('color', new Float32BufferAttribute(buffer.colors, 3));\n      }\n\n      if (buffer.faceVertexUvs.length > 0) {\n        geometry = geometry.toNonIndexed();\n        geometry.setAttribute('uv', new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n      }\n\n      geometry.computeBoundingSphere();\n      return geometry;\n    }\n\n    function handleElement(buffer, elementName, element) {\n      if (elementName === 'vertex') {\n        buffer.vertices.push(element.x, element.y, element.z);\n\n        if ('nx' in element && 'ny' in element && 'nz' in element) {\n          buffer.normals.push(element.nx, element.ny, element.nz);\n        }\n\n        if ('s' in element && 't' in element) {\n          buffer.uvs.push(element.s, element.t);\n        }\n\n        if ('red' in element && 'green' in element && 'blue' in element) {\n          buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n        }\n      } else if (elementName === 'face') {\n        const vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\n        const texcoord = element.texcoord;\n\n        if (vertex_indices.length === 3) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n\n          if (texcoord && texcoord.length === 6) {\n            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n          }\n        } else if (vertex_indices.length === 4) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n          buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n        }\n      }\n    }\n\n    function binaryRead(dataview, at, type, little_endian) {\n      switch (type) {\n        // corespondences for non-specific length types here match rply:\n        case 'int8':\n        case 'char':\n          return [dataview.getInt8(at), 1];\n\n        case 'uint8':\n        case 'uchar':\n          return [dataview.getUint8(at), 1];\n\n        case 'int16':\n        case 'short':\n          return [dataview.getInt16(at, little_endian), 2];\n\n        case 'uint16':\n        case 'ushort':\n          return [dataview.getUint16(at, little_endian), 2];\n\n        case 'int32':\n        case 'int':\n          return [dataview.getInt32(at, little_endian), 4];\n\n        case 'uint32':\n        case 'uint':\n          return [dataview.getUint32(at, little_endian), 4];\n\n        case 'float32':\n        case 'float':\n          return [dataview.getFloat32(at, little_endian), 4];\n\n        case 'float64':\n        case 'double':\n          return [dataview.getFloat64(at, little_endian), 8];\n      }\n    }\n\n    function binaryReadElement(dataview, at, properties, little_endian) {\n      const element = {};\n      let result,\n          read = 0;\n\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === 'list') {\n          const list = [];\n          result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n          const n = result[0];\n          read += result[1];\n\n          for (let j = 0; j < n; j++) {\n            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n            list.push(result[0]);\n            read += result[1];\n          }\n\n          element[properties[i].name] = list;\n        } else {\n          result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n          element[properties[i].name] = result[0];\n          read += result[1];\n        }\n      }\n\n      return [element, read];\n    }\n\n    function parseBinary(data, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      const little_endian = header.format === 'binary_little_endian';\n      const body = new DataView(data, header.headerLength);\n      let result,\n          loc = 0;\n\n      for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n        for (let currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n          result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n          loc += result[1];\n          const element = result[0];\n          handleElement(buffer, header.elements[currentElement].name, element);\n        }\n      }\n\n      return postProcess(buffer);\n    } //\n\n\n    let geometry;\n    const scope = this;\n\n    if (data instanceof ArrayBuffer) {\n      const text = LoaderUtils.decodeText(new Uint8Array(data));\n      const header = parseHeader(text);\n      geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n    } else {\n      geometry = parseASCII(data, parseHeader(data));\n    }\n\n    return geometry;\n  }\n\n}\n\nexport { PLYLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}