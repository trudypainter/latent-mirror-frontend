{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector2, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter, RGBAFormat } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nvar RenderPixelatedPass = /*#__PURE__*/function (_Pass) {\n  _inherits(RenderPixelatedPass, _Pass);\n  var _super = _createSuper(RenderPixelatedPass);\n  function RenderPixelatedPass(resolution, pixelSize, scene, camera) {\n    var _this;\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    _classCallCheck(this, RenderPixelatedPass);\n    var _options$normalEdgeSt, _options$depthEdgeStr;\n    _this = _super.call(this);\n    _this.pixelSize = pixelSize;\n    _this.resolution = new Vector2();\n    _this.renderResolution = new Vector2();\n    _this.setSize(resolution.x, resolution.y);\n    _this.fsQuad = new FullScreenQuad(_this.material());\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.normalEdgeStrength = (_options$normalEdgeSt = options.normalEdgeStrength) != null ? _options$normalEdgeSt : 0.3;\n    _this.depthEdgeStrength = (_options$depthEdgeStr = options.depthEdgeStrength) != null ? _options$depthEdgeStr : 0.4;\n    _this.rgbRenderTarget = pixelRenderTarget(_this.renderResolution, RGBAFormat, true);\n    _this.normalRenderTarget = pixelRenderTarget(_this.renderResolution, RGBAFormat, false);\n    _this.normalMaterial = new MeshNormalMaterial();\n    return _this;\n  }\n  _createClass(RenderPixelatedPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.rgbRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      var _this$rgbRenderTarget, _this$normalRenderTar, _this$fsQuad;\n      this.resolution.set(width, height);\n      this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n      var _this$renderResolutio = this.renderResolution,\n        x = _this$renderResolutio.x,\n        y = _this$renderResolutio.y;\n      (_this$rgbRenderTarget = this.rgbRenderTarget) === null || _this$rgbRenderTarget === void 0 ? void 0 : _this$rgbRenderTarget.setSize(x, y);\n      (_this$normalRenderTar = this.normalRenderTarget) === null || _this$normalRenderTar === void 0 ? void 0 : _this$normalRenderTar.setSize(x, y);\n      (_this$fsQuad = this.fsQuad) === null || _this$fsQuad === void 0 ? void 0 : _this$fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n    }\n  }, {\n    key: \"setPixelSize\",\n    value: function setPixelSize(pixelSize) {\n      this.pixelSize = pixelSize;\n      this.setSize(this.resolution.x, this.resolution.y);\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      var uniforms = this.fsQuad.material.uniforms;\n      uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n      uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n      renderer.setRenderTarget(this.rgbRenderTarget);\n      renderer.render(this.scene, this.camera);\n      var overrideMaterial_old = this.scene.overrideMaterial;\n      renderer.setRenderTarget(this.normalRenderTarget);\n      this.scene.overrideMaterial = this.normalMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = overrideMaterial_old;\n      uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n      uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n      uniforms.tNormal.value = this.normalRenderTarget.texture;\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n      }\n      this.fsQuad.render(renderer);\n    }\n  }, {\n    key: \"material\",\n    value: function material() {\n      return new ShaderMaterial({\n        uniforms: {\n          tDiffuse: {\n            value: null\n          },\n          tDepth: {\n            value: null\n          },\n          tNormal: {\n            value: null\n          },\n          resolution: {\n            value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n          },\n          normalEdgeStrength: {\n            value: 0\n          },\n          depthEdgeStrength: {\n            value: 0\n          }\n        },\n        vertexShader: \"\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\",\n        fragmentShader: \"\\n\\t\\t\\t\\tuniform sampler2D tDiffuse;\\n\\t\\t\\t\\tuniform sampler2D tDepth;\\n\\t\\t\\t\\tuniform sampler2D tNormal;\\n\\t\\t\\t\\tuniform vec4 resolution;\\n\\t\\t\\t\\tuniform float normalEdgeStrength;\\n\\t\\t\\t\\tuniform float depthEdgeStrength;\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t\\tfloat getDepth(int x, int y) {\\n\\n\\t\\t\\t\\t\\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvec3 getNormal(int x, int y) {\\n\\n\\t\\t\\t\\t\\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat depthEdgeIndicator(float depth, vec3 normal) {\\n\\n\\t\\t\\t\\t\\tfloat diff = 0.0;\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\\n\\n\\t\\t\\t\\t\\tfloat depthDiff = getDepth(x, y) - depth;\\n\\t\\t\\t\\t\\tvec3 neighborNormal = getNormal(x, y);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\\n\\t\\t\\t\\t\\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\\n\\t\\t\\t\\t\\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\\n\\t\\t\\t\\t\\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Only the shallower pixel should detect the normal edge.\\n\\t\\t\\t\\t\\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\\n\\n\\t\\t\\t\\t\\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat normalEdgeIndicator(float depth, vec3 normal) {\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tfloat indicator = 0.0;\\n\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\\n\\n\\t\\t\\t\\t\\treturn step(0.1, indicator);\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec4 texel = texture2D( tDiffuse, vUv );\\n\\n\\t\\t\\t\\t\\tfloat depth = 0.0;\\n\\t\\t\\t\\t\\tvec3 normal = vec3(0.0);\\n\\n\\t\\t\\t\\t\\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\\n\\n\\t\\t\\t\\t\\t\\tdepth = getDepth(0, 0);\\n\\t\\t\\t\\t\\t\\tnormal = getNormal(0, 0);\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat dei = 0.0;\\n\\t\\t\\t\\t\\tif (depthEdgeStrength > 0.0) \\n\\t\\t\\t\\t\\t\\tdei = depthEdgeIndicator(depth, normal);\\n\\n\\t\\t\\t\\t\\tfloat nei = 0.0; \\n\\t\\t\\t\\t\\tif (normalEdgeStrength > 0.0) \\n\\t\\t\\t\\t\\t\\tnei = normalEdgeIndicator(depth, normal);\\n\\n\\t\\t\\t\\t\\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texel * Strength;\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"\n      });\n    }\n  }]);\n  return RenderPixelatedPass;\n}(Pass);\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  var renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? undefined : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\nexport { RenderPixelatedPass };","map":{"version":3,"names":["Vector2","MeshNormalMaterial","ShaderMaterial","Vector4","WebGLRenderTarget","DepthTexture","NearestFilter","RGBAFormat","Pass","FullScreenQuad","RenderPixelatedPass","resolution","pixelSize","scene","camera","options","_options$normalEdgeSt","_options$depthEdgeStr","renderResolution","setSize","x","y","fsQuad","material","normalEdgeStrength","depthEdgeStrength","rgbRenderTarget","pixelRenderTarget","normalRenderTarget","normalMaterial","dispose","width","height","_this$rgbRenderTarget","_this$normalRenderTar","_this$fsQuad","set","uniforms","value","renderer","writeBuffer","setRenderTarget","render","overrideMaterial_old","overrideMaterial","tDiffuse","texture","tDepth","depthTexture","tNormal","renderToScreen","clear","vertexShader","fragmentShader","pixelFormat","useDepthTexture","renderTarget","undefined","depthBuffer","format","minFilter","magFilter","generateMipmaps","stencilBuffer"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/postprocessing/RenderPixelatedPass.js"],"sourcesContent":["import { Vector2, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter, RGBAFormat } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass RenderPixelatedPass extends Pass {\n  constructor(resolution, pixelSize, scene, camera, options = {}) {\n    var _options$normalEdgeSt, _options$depthEdgeStr;\n\n    super();\n    this.pixelSize = pixelSize;\n    this.resolution = new Vector2();\n    this.renderResolution = new Vector2();\n    this.setSize(resolution.x, resolution.y);\n    this.fsQuad = new FullScreenQuad(this.material());\n    this.scene = scene;\n    this.camera = camera;\n    this.normalEdgeStrength = (_options$normalEdgeSt = options.normalEdgeStrength) != null ? _options$normalEdgeSt : 0.3;\n    this.depthEdgeStrength = (_options$depthEdgeStr = options.depthEdgeStrength) != null ? _options$depthEdgeStr : 0.4;\n    this.rgbRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, true);\n    this.normalRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, false);\n    this.normalMaterial = new MeshNormalMaterial();\n  }\n\n  dispose() {\n    this.rgbRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.fsQuad.dispose();\n  }\n\n  setSize(width, height) {\n    var _this$rgbRenderTarget, _this$normalRenderTar, _this$fsQuad;\n\n    this.resolution.set(width, height);\n    this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n    const {\n      x,\n      y\n    } = this.renderResolution;\n    (_this$rgbRenderTarget = this.rgbRenderTarget) === null || _this$rgbRenderTarget === void 0 ? void 0 : _this$rgbRenderTarget.setSize(x, y);\n    (_this$normalRenderTar = this.normalRenderTarget) === null || _this$normalRenderTar === void 0 ? void 0 : _this$normalRenderTar.setSize(x, y);\n    (_this$fsQuad = this.fsQuad) === null || _this$fsQuad === void 0 ? void 0 : _this$fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n  }\n\n  setPixelSize(pixelSize) {\n    this.pixelSize = pixelSize;\n    this.setSize(this.resolution.x, this.resolution.y);\n  }\n\n  render(renderer, writeBuffer) {\n    const uniforms = this.fsQuad.material.uniforms;\n    uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n    uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n    renderer.setRenderTarget(this.rgbRenderTarget);\n    renderer.render(this.scene, this.camera);\n    const overrideMaterial_old = this.scene.overrideMaterial;\n    renderer.setRenderTarget(this.normalRenderTarget);\n    this.scene.overrideMaterial = this.normalMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = overrideMaterial_old;\n    uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n    uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n    uniforms.tNormal.value = this.normalRenderTarget.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n    }\n\n    this.fsQuad.render(renderer);\n  }\n\n  material() {\n    return new ShaderMaterial({\n      uniforms: {\n        tDiffuse: {\n          value: null\n        },\n        tDepth: {\n          value: null\n        },\n        tNormal: {\n          value: null\n        },\n        resolution: {\n          value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n        },\n        normalEdgeStrength: {\n          value: 0\n        },\n        depthEdgeStrength: {\n          value: 0\n        }\n      },\n      vertexShader: `\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t\t`,\n      fragmentShader: `\n\t\t\t\tuniform sampler2D tDiffuse;\n\t\t\t\tuniform sampler2D tDepth;\n\t\t\t\tuniform sampler2D tNormal;\n\t\t\t\tuniform vec4 resolution;\n\t\t\t\tuniform float normalEdgeStrength;\n\t\t\t\tuniform float depthEdgeStrength;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat getDepth(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getNormal(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat diff = 0.0;\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\n\n\t\t\t\t}\n\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\n\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\n\t\t\t\t\t\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\n\t\t\t\t\t\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\n\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\n\n\t\t\t\t}\n\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\n\t\t\t\t\t\n\t\t\t\t\tfloat indicator = 0.0;\n\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\n\n\t\t\t\t\treturn step(0.1, indicator);\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\t\t\tfloat depth = 0.0;\n\t\t\t\t\tvec3 normal = vec3(0.0);\n\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\n\n\t\t\t\t\t\tdepth = getDepth(0, 0);\n\t\t\t\t\t\tnormal = getNormal(0, 0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat dei = 0.0;\n\t\t\t\t\tif (depthEdgeStrength > 0.0) \n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat nei = 0.0; \n\t\t\t\t\tif (normalEdgeStrength > 0.0) \n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\n\n\t\t\t\t\tgl_FragColor = texel * Strength;\n\n\t\t\t\t}\n\t\t\t\t`\n    });\n  }\n\n}\n\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  const renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? undefined : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\n\nexport { RenderPixelatedPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}