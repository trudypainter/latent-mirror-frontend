{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderPass } from './ShaderPass.js';\nvar LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\n\\t\",\n  fragmentShader: /* glsl */\"\\n\\t\\tprecision highp sampler3D;\\n\\n\\t\\tuniform float lutSize;\\n\\t\\t#if USE_3DTEXTURE\\n\\t\\tuniform sampler3D lut3d;\\n\\t\\t#else\\n\\t\\tuniform sampler2D lut;\\n\\n\\t\\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\\n\\n\\t\\t\\tfloat sliceHeight = 1.0 / size;\\n\\t\\t\\tfloat yPixelHeight = 1.0 / ( size * size );\\n\\n\\t\\t\\t// Get the slices on either side of the sample\\n\\t\\t\\tfloat slice = rgb.b * size;\\n\\t\\t\\tfloat interp = fract( slice );\\n\\t\\t\\tfloat slice0 = slice - interp;\\n\\t\\t\\tfloat centeredInterp = interp - 0.5;\\n\\n\\t\\t\\tfloat slice1 = slice0 + sign( centeredInterp );\\n\\n\\t\\t\\t// Pull y sample in by half a pixel in each direction to avoid color\\n\\t\\t\\t// bleeding from adjacent slices.\\n\\t\\t\\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\\n\\n\\t\\t\\tvec2 uv0 = vec2(\\n\\t\\t\\t\\trgb.r,\\n\\t\\t\\t\\tslice0 * sliceHeight + greenOffset\\n\\t\\t\\t);\\n\\t\\t\\tvec2 uv1 = vec2(\\n\\t\\t\\t\\trgb.r,\\n\\t\\t\\t\\tslice1 * sliceHeight + greenOffset\\n\\t\\t\\t);\\n\\n\\t\\t\\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\\n\\t\\t\\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\\n\\n\\t\\t\\treturn mix( sample0, sample1, abs( centeredInterp ) );\\n\\n\\t\\t}\\n\\t\\t#endif\\n\\n\\t\\tvarying vec2 vUv;\\n\\t\\tuniform float intensity;\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 val = texture2D( tDiffuse, vUv );\\n\\t\\t\\tvec4 lutVal;\\n\\n\\t\\t\\t// pull the sample in by half a pixel so the sample begins\\n\\t\\t\\t// at the center of the edge pixels.\\n\\t\\t\\tfloat pixelWidth = 1.0 / lutSize;\\n\\t\\t\\tfloat halfPixelWidth = 0.5 / lutSize;\\n\\t\\t\\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\\n\\n\\t\\t\\t#if USE_3DTEXTURE\\n\\n\\t\\t\\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\\n\\n\\t\\t}\\n\\n\\t\"\n};\nvar LUTPass = /*#__PURE__*/function (_ShaderPass) {\n  _inherits(LUTPass, _ShaderPass);\n  var _super = _createSuper(LUTPass);\n  function LUTPass() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, LUTPass);\n    _this = _super.call(this, LUTShader);\n    _this.lut = options.lut || null;\n    _this.intensity = 'intensity' in options ? options.intensity : 1;\n    return _this;\n  }\n  _createClass(LUTPass, [{\n    key: \"lut\",\n    get: function get() {\n      return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n    },\n    set: function set(v) {\n      var material = this.material;\n      if (v !== this.lut) {\n        material.uniforms.lut3d.value = null;\n        material.uniforms.lut.value = null;\n        if (v) {\n          var is3dTextureDefine = v.isDataTexture3D ? 1 : 0;\n          if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n            material.defines.USE_3DTEXTURE = is3dTextureDefine;\n            material.needsUpdate = true;\n          }\n          material.uniforms.lutSize.value = v.image.width;\n          if (v.isDataTexture3D) {\n            material.uniforms.lut3d.value = v;\n          } else {\n            material.uniforms.lut.value = v;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"intensity\",\n    get: function get() {\n      return this.material.uniforms.intensity.value;\n    },\n    set: function set(v) {\n      this.material.uniforms.intensity.value = v;\n    }\n  }]);\n  return LUTPass;\n}(ShaderPass);\nexport { LUTPass };","map":{"version":3,"names":["ShaderPass","LUTShader","defines","USE_3DTEXTURE","uniforms","lut3d","value","lut","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","options","material","v","is3dTextureDefine","isDataTexture3D","needsUpdate","image","width"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/postprocessing/LUTPass.js"],"sourcesContent":["import { ShaderPass } from './ShaderPass.js';\n\nconst LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n  fragmentShader:\n  /* glsl */\n  `\n\t\tprecision highp sampler3D;\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`\n};\n\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material;\n\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null;\n      material.uniforms.lut.value = null;\n\n      if (v) {\n        const is3dTextureDefine = v.isDataTexture3D ? 1 : 0;\n\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\n          material.needsUpdate = true;\n        }\n\n        material.uniforms.lutSize.value = v.image.width;\n\n        if (v.isDataTexture3D) {\n          material.uniforms.lut3d.value = v;\n        } else {\n          material.uniforms.lut.value = v;\n        }\n      }\n    }\n  }\n\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n  }\n\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n\n  constructor(options = {}) {\n    super(LUTShader);\n    this.lut = options.lut || null;\n    this.intensity = 'intensity' in options ? options.intensity : 1;\n  }\n\n}\n\nexport { LUTPass };\n"],"mappings":";;;;AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAE5C,IAAMC,SAAS,GAAG;EAChBC,OAAO,EAAE;IACPC,aAAa,EAAE;EACjB,CAAC;EACDC,QAAQ,EAAE;IACRC,KAAK,EAAE;MACLC,KAAK,EAAE;IACT,CAAC;IACDC,GAAG,EAAE;MACHD,KAAK,EAAE;IACT,CAAC;IACDE,OAAO,EAAE;MACPF,KAAK,EAAE;IACT,CAAC;IACDG,QAAQ,EAAE;MACRH,KAAK,EAAE;IACT,CAAC;IACDI,SAAS,EAAE;MACTJ,KAAK,EAAE;IACT;EACF,CAAC;EACDK,YAAY,EACZ,6KAYA;EACAC,cAAc,EACd;AAyEF,CAAC;AAAC,IAEIC,OAAO;EAAA;EAAA;EAuCX,mBAA0B;IAAA;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAAA;IACtB,0BAAMb,SAAS;IACf,MAAKM,GAAG,GAAGO,OAAO,CAACP,GAAG,IAAI,IAAI;IAC9B,MAAKG,SAAS,GAAG,WAAW,IAAII,OAAO,GAAGA,OAAO,CAACJ,SAAS,GAAG,CAAC;IAAC;EAClE;EAAC;IAAA;IAAA,KAhBD,eAAU;MACR,OAAO,IAAI,CAACK,QAAQ,CAACX,QAAQ,CAACG,GAAG,CAACD,KAAK,IAAI,IAAI,CAACS,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACC,KAAK;IAC/E,CAAC;IAAA,KA5BD,aAAQU,CAAC,EAAE;MACT,IAAMD,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAE9B,IAAIC,CAAC,KAAK,IAAI,CAACT,GAAG,EAAE;QAClBQ,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACC,KAAK,GAAG,IAAI;QACpCS,QAAQ,CAACX,QAAQ,CAACG,GAAG,CAACD,KAAK,GAAG,IAAI;QAElC,IAAIU,CAAC,EAAE;UACL,IAAMC,iBAAiB,GAAGD,CAAC,CAACE,eAAe,GAAG,CAAC,GAAG,CAAC;UAEnD,IAAID,iBAAiB,KAAKF,QAAQ,CAACb,OAAO,CAACC,aAAa,EAAE;YACxDY,QAAQ,CAACb,OAAO,CAACC,aAAa,GAAGc,iBAAiB;YAClDF,QAAQ,CAACI,WAAW,GAAG,IAAI;UAC7B;UAEAJ,QAAQ,CAACX,QAAQ,CAACI,OAAO,CAACF,KAAK,GAAGU,CAAC,CAACI,KAAK,CAACC,KAAK;UAE/C,IAAIL,CAAC,CAACE,eAAe,EAAE;YACrBH,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACC,KAAK,GAAGU,CAAC;UACnC,CAAC,MAAM;YACLD,QAAQ,CAACX,QAAQ,CAACG,GAAG,CAACD,KAAK,GAAGU,CAAC;UACjC;QACF;MACF;IACF;EAAC;IAAA;IAAA,KAUD,eAAgB;MACd,OAAO,IAAI,CAACD,QAAQ,CAACX,QAAQ,CAACM,SAAS,CAACJ,KAAK;IAC/C,CAAC;IAAA,KAND,aAAcU,CAAC,EAAE;MACf,IAAI,CAACD,QAAQ,CAACX,QAAQ,CAACM,SAAS,CAACJ,KAAK,GAAGU,CAAC;IAC5C;EAAC;EAAA;AAAA,EAjCmBhB,UAAU;AA+ChC,SAASa,OAAO"},"metadata":{},"sourceType":"module"}