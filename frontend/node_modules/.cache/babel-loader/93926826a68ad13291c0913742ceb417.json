{"ast":null,"code":"import _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\nvar SimplexNoise = /*#__PURE__*/_createClass(\n// To remove the need for index wrapping, double the permutation table length\n// A lookup table to traverse the simplex around a given point in 4D.\n// Details can be found where this table is used, in the 4D noise method.\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nfunction SimplexNoise() {\n  var _this = this;\n  var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math;\n  _classCallCheck(this, SimplexNoise);\n  _defineProperty(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n  _defineProperty(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n  _defineProperty(this, \"p\", []);\n  _defineProperty(this, \"perm\", []);\n  _defineProperty(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n  _defineProperty(this, \"dot\", function (g, x, y) {\n    return g[0] * x + g[1] * y;\n  });\n  _defineProperty(this, \"dot3\", function (g, x, y, z) {\n    return g[0] * x + g[1] * y + g[2] * z;\n  });\n  _defineProperty(this, \"dot4\", function (g, x, y, z, w) {\n    return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n  });\n  _defineProperty(this, \"noise\", function (xin, yin) {\n    var n0;\n    var n1;\n    var n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n    var t = (i + j) * G2;\n    var X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n    var Y0 = j - t;\n    var x0 = xin - X0; // The x,y distances from the cell origin\n\n    var y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n    var i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    var j1 = 1;\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n    var y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var gi0 = _this.perm[ii + _this.perm[jj]] % 12;\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1]] % 12;\n    var gi2 = _this.perm[ii + 1 + _this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot(_this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot(_this.grad3[gi1], x1, y1);\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot(_this.grad3[gi2], x2, y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n    return 70.0 * (n0 + n1 + n2);\n  });\n  _defineProperty(this, \"noise3d\", function (xin, yin, zin) {\n    // Noise contributions from the four corners\n    var n0;\n    var n1;\n    var n2;\n    var n3; // Skew the input space to determine which simplex cell we're in\n\n    var F3 = 1.0 / 3.0;\n    var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n    var t = (i + j + k) * G3;\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var x0 = xin - X0; // The x,y,z distances from the cell origin\n\n    var y0 = yin - Y0;\n    var z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var i1;\n    var j1;\n    var k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    var i2;\n    var j2;\n    var k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0; // X Y Z order\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1; // X Z Y order\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // Z X Y order\n    } else {\n      // x0<y0\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1; // Z Y X order\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1; // Y Z X order\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // Y X Z order\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n\n    var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n    var y2 = y0 - j2 + 2.0 * G3;\n    var z2 = z0 - k2 + 2.0 * G3;\n    var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n    var y3 = y0 - 1.0 + 3.0 * G3;\n    var z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var gi0 = _this.perm[ii + _this.perm[jj + _this.perm[kk]]] % 12;\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1 + _this.perm[kk + k1]]] % 12;\n    var gi2 = _this.perm[ii + i2 + _this.perm[jj + j2 + _this.perm[kk + k2]]] % 12;\n    var gi3 = _this.perm[ii + 1 + _this.perm[jj + 1 + _this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot3(_this.grad3[gi0], x0, y0, z0);\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot3(_this.grad3[gi1], x1, y1, z1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot3(_this.grad3[gi2], x2, y2, z2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) {\n      n3 = 0.0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * _this.dot3(_this.grad3[gi3], x3, y3, z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n\n    return 32.0 * (n0 + n1 + n2 + n3);\n  });\n  _defineProperty(this, \"noise4d\", function (x, y, z, w) {\n    // For faster and easier lookups\n    var grad4 = _this.grad4;\n    var simplex = _this.simplex;\n    var perm = _this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n    var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n    var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n    var n0;\n    var n1;\n    var n2;\n    var n3;\n    var n4; // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n    var s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n    var i = Math.floor(x + s);\n    var j = Math.floor(y + s);\n    var k = Math.floor(z + s);\n    var l = Math.floor(w + s);\n    var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var W0 = l - t;\n    var x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n    var y0 = y - Y0;\n    var z0 = z - Z0;\n    var w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // The method below is a good way of finding the ordering of x,y,z,w and\n    // then find the correct traversal order for the simplex we’re in.\n    // First, six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to add up binary bits\n    // for an integer index.\n\n    var c1 = x0 > y0 ? 32 : 0;\n    var c2 = x0 > z0 ? 16 : 0;\n    var c3 = y0 > z0 ? 8 : 0;\n    var c4 = x0 > w0 ? 4 : 0;\n    var c5 = y0 > w0 ? 2 : 0;\n    var c6 = z0 > w0 ? 1 : 0;\n    var c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n    var i1;\n    var j1;\n    var k1;\n    var l1; // The integer offsets for the third simplex corner\n\n    var i2;\n    var j2;\n    var k2;\n    var l2; // The integer offsets for the fourth simplex corner\n\n    var i3;\n    var j3;\n    var k3;\n    var l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n    i1 = simplex[c][0] >= 3 ? 1 : 0;\n    j1 = simplex[c][1] >= 3 ? 1 : 0;\n    k1 = simplex[c][2] >= 3 ? 1 : 0;\n    l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n    i2 = simplex[c][0] >= 2 ? 1 : 0;\n    j2 = simplex[c][1] >= 2 ? 1 : 0;\n    k2 = simplex[c][2] >= 2 ? 1 : 0;\n    l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n    i3 = simplex[c][0] >= 1 ? 1 : 0;\n    j3 = simplex[c][1] >= 1 ? 1 : 0;\n    k3 = simplex[c][2] >= 1 ? 1 : 0;\n    l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n    var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n    var y1 = y0 - j1 + G4;\n    var z1 = z0 - k1 + G4;\n    var w1 = w0 - l1 + G4;\n    var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n    var y2 = y0 - j2 + 2.0 * G4;\n    var z2 = z0 - k2 + 2.0 * G4;\n    var w2 = w0 - l2 + 2.0 * G4;\n    var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n    var y3 = y0 - j3 + 3.0 * G4;\n    var z3 = z0 - k3 + 3.0 * G4;\n    var w3 = w0 - l3 + 3.0 * G4;\n    var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n    var y4 = y0 - 1.0 + 4.0 * G4;\n    var z4 = z0 - 1.0 + 4.0 * G4;\n    var w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var ll = l & 255;\n    var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n    var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n    var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n    var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n    var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot4(grad4[gi0], x0, y0, z0, w0);\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot4(grad4[gi1], x1, y1, z1, w1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot4(grad4[gi2], x2, y2, z2, w2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n    if (t3 < 0) {\n      n3 = 0.0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * _this.dot4(grad4[gi3], x3, y3, z3, w3);\n    }\n    var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n    if (t4 < 0) {\n      n4 = 0.0;\n    } else {\n      t4 *= t4;\n      n4 = t4 * t4 * _this.dot4(grad4[gi4], x4, y4, z4, w4);\n    } // Sum up and scale the result to cover the range [-1,1]\n\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n  });\n  for (var i = 0; i < 256; i++) {\n    this.p[i] = Math.floor(r.random() * 256);\n  }\n  for (var _i = 0; _i < 512; _i++) {\n    this.perm[_i] = this.p[_i & 255];\n  }\n});\nexport { SimplexNoise };","map":{"version":3,"names":["_defineProperty","SimplexNoise","r","Math","g","x","y","z","w","xin","yin","n0","n1","n2","F2","sqrt","s","i","floor","j","G2","t","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","perm","gi1","gi2","t0","dot","grad3","t1","t2","zin","n3","F3","k","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","dot3","t3","grad4","simplex","F4","G4","n4","l","W0","w0","c1","c2","c3","c4","c5","c6","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","dot4","t4","p","random"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/math/SimplexNoise.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\nclass SimplexNoise {\n  // To remove the need for index wrapping, double the permutation table length\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor(r = Math) {\n    _defineProperty(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n\n    _defineProperty(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n\n    _defineProperty(this, \"p\", []);\n\n    _defineProperty(this, \"perm\", []);\n\n    _defineProperty(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n\n    _defineProperty(this, \"dot\", (g, x, y) => {\n      return g[0] * x + g[1] * y;\n    });\n\n    _defineProperty(this, \"dot3\", (g, x, y, z) => {\n      return g[0] * x + g[1] * y + g[2] * z;\n    });\n\n    _defineProperty(this, \"dot4\", (g, x, y, z, w) => {\n      return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n    });\n\n    _defineProperty(this, \"noise\", (xin, yin) => {\n      let n0;\n      let n1;\n      let n2; // Noise contributions from the three corners\n      // Skew the input space to determine which simplex cell we're in\n\n      const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n      const s = (xin + yin) * F2; // Hairy factor for 2D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n      const t = (i + j) * G2;\n      const X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n      const Y0 = j - t;\n      const x0 = xin - X0; // The x,y distances from the cell origin\n\n      const y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n      let i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n      let j1 = 1;\n\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n\n\n      const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n      const y1 = y0 - j1 + G2;\n      const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n      const y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const gi0 = this.perm[ii + this.perm[jj]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n      const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n      let t0 = 0.5 - x0 * x0 - y0 * y0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      let t1 = 0.5 - x1 * x1 - y1 * y1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n      }\n\n      let t2 = 0.5 - x2 * x2 - y2 * y2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 70.0 * (n0 + n1 + n2);\n    });\n\n    _defineProperty(this, \"noise3d\", (xin, yin, zin) => {\n      // Noise contributions from the four corners\n      let n0;\n      let n1;\n      let n2;\n      let n3; // Skew the input space to determine which simplex cell we're in\n\n      const F3 = 1.0 / 3.0;\n      const s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const k = Math.floor(zin + s);\n      const G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n      const t = (i + j + k) * G3;\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const x0 = xin - X0; // The x,y,z distances from the cell origin\n\n      const y0 = yin - Y0;\n      const z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n\n      let i1;\n      let j1;\n      let k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n      let i2;\n      let j2;\n      let k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0; // X Y Z order\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1; // X Z Y order\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n\n      } else {\n        // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Z Y X order\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Y Z X order\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n\n      } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n\n\n      const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n      const y1 = y0 - j1 + G3;\n      const z1 = z0 - k1 + G3;\n      const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n      const y2 = y0 - j2 + 2.0 * G3;\n      const z2 = z0 - k2 + 2.0 * G3;\n      const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n      const y3 = y0 - 1.0 + 3.0 * G3;\n      const z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n      const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n      const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n\n\n      return 32.0 * (n0 + n1 + n2 + n3);\n    });\n\n    _defineProperty(this, \"noise4d\", (x, y, z, w) => {\n      // For faster and easier lookups\n      const grad4 = this.grad4;\n      const simplex = this.simplex;\n      const perm = this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n      const F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n      const G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n      let n0;\n      let n1;\n      let n2;\n      let n3;\n      let n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n      const s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n      const i = Math.floor(x + s);\n      const j = Math.floor(y + s);\n      const k = Math.floor(z + s);\n      const l = Math.floor(w + s);\n      const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const W0 = l - t;\n      const x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n      const y0 = y - Y0;\n      const z0 = z - Z0;\n      const w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // The method below is a good way of finding the ordering of x,y,z,w and\n      // then find the correct traversal order for the simplex we’re in.\n      // First, six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to add up binary bits\n      // for an integer index.\n\n      const c1 = x0 > y0 ? 32 : 0;\n      const c2 = x0 > z0 ? 16 : 0;\n      const c3 = y0 > z0 ? 8 : 0;\n      const c4 = x0 > w0 ? 4 : 0;\n      const c5 = y0 > w0 ? 2 : 0;\n      const c6 = z0 > w0 ? 1 : 0;\n      const c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n      let i1;\n      let j1;\n      let k1;\n      let l1; // The integer offsets for the third simplex corner\n\n      let i2;\n      let j2;\n      let k2;\n      let l2; // The integer offsets for the fourth simplex corner\n\n      let i3;\n      let j3;\n      let k3;\n      let l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n      i1 = simplex[c][0] >= 3 ? 1 : 0;\n      j1 = simplex[c][1] >= 3 ? 1 : 0;\n      k1 = simplex[c][2] >= 3 ? 1 : 0;\n      l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n      i2 = simplex[c][0] >= 2 ? 1 : 0;\n      j2 = simplex[c][1] >= 2 ? 1 : 0;\n      k2 = simplex[c][2] >= 2 ? 1 : 0;\n      l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n      i3 = simplex[c][0] >= 1 ? 1 : 0;\n      j3 = simplex[c][1] >= 1 ? 1 : 0;\n      k3 = simplex[c][2] >= 1 ? 1 : 0;\n      l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n      const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n      const y1 = y0 - j1 + G4;\n      const z1 = z0 - k1 + G4;\n      const w1 = w0 - l1 + G4;\n      const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n      const y2 = y0 - j2 + 2.0 * G4;\n      const z2 = z0 - k2 + 2.0 * G4;\n      const w2 = w0 - l2 + 2.0 * G4;\n      const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n      const y3 = y0 - j3 + 3.0 * G4;\n      const z3 = z0 - k3 + 3.0 * G4;\n      const w3 = w0 - l3 + 3.0 * G4;\n      const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n      const y4 = y0 - 1.0 + 4.0 * G4;\n      const z4 = z0 - 1.0 + 4.0 * G4;\n      const w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const ll = l & 255;\n      const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n      const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n      const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n      const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n      const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n      }\n\n      let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\n      if (t4 < 0) {\n        n4 = 0.0;\n      } else {\n        t4 *= t4;\n        n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n      } // Sum up and scale the result to cover the range [-1,1]\n\n\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    });\n\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    }\n\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n  }\n\n}\n\nexport { SimplexNoise };\n"],"mappings":";;AAAA,OAAOA,eAAe,MAAM,2CAA2C;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IACMC,YAAY;AAChB;AACA;AACA;;AAEA;AACF;AACA;AACA;AACE,wBAAsB;EAAA;EAAA,IAAVC,CAAC,uEAAGC,IAAI;EAAA;EAClBH,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAEhLA,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,C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"},"metadata":{},"sourceType":"module"}