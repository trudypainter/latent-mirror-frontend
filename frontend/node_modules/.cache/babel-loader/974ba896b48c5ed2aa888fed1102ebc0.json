{"ast":null,"code":"import _regeneratorRuntime from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nvar MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nfunction fetchJsonFile(_x) {\n  return _fetchJsonFile.apply(this, arguments);\n}\nfunction _fetchJsonFile() {\n  _fetchJsonFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(path);\n          case 2:\n            response = _context.sent;\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n            throw new Error(response.statusText);\n          case 7:\n            return _context.abrupt(\"return\", response.json());\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchJsonFile.apply(this, arguments);\n}\nfunction fetchProfilesList(_x2) {\n  return _fetchProfilesList.apply(this, arguments);\n}\nfunction _fetchProfilesList() {\n  _fetchProfilesList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(basePath) {\n    var profileListFileName, profilesList;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (basePath) {\n              _context2.next = 2;\n              break;\n            }\n            throw new Error('No basePath supplied');\n          case 2:\n            profileListFileName = 'profilesList.json';\n            _context2.next = 5;\n            return fetchJsonFile(\"\".concat(basePath, \"/\").concat(profileListFileName));\n          case 5:\n            profilesList = _context2.sent;\n            return _context2.abrupt(\"return\", profilesList);\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchProfilesList.apply(this, arguments);\n}\nfunction fetchProfile(_x3, _x4) {\n  return _fetchProfile.apply(this, arguments);\n} /** @constant {Object} */\nfunction _fetchProfile() {\n  _fetchProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(xrInputSource, basePath) {\n    var defaultProfile,\n      getAssetPath,\n      supportedProfilesList,\n      match,\n      supportedProfile,\n      profile,\n      assetPath,\n      layout,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            defaultProfile = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : null;\n            getAssetPath = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n            if (xrInputSource) {\n              _context3.next = 4;\n              break;\n            }\n            throw new Error('No xrInputSource supplied');\n          case 4:\n            if (basePath) {\n              _context3.next = 6;\n              break;\n            }\n            throw new Error('No basePath supplied');\n          case 6:\n            _context3.next = 8;\n            return fetchProfilesList(basePath);\n          case 8:\n            supportedProfilesList = _context3.sent;\n            xrInputSource.profiles.some(function (profileId) {\n              var supportedProfile = supportedProfilesList[profileId];\n              if (supportedProfile) {\n                match = {\n                  profileId: profileId,\n                  profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n                  deprecated: !!supportedProfile.deprecated\n                };\n              }\n              return !!match;\n            });\n            if (match) {\n              _context3.next = 17;\n              break;\n            }\n            if (defaultProfile) {\n              _context3.next = 13;\n              break;\n            }\n            throw new Error('No matching profile name found');\n          case 13:\n            supportedProfile = supportedProfilesList[defaultProfile];\n            if (supportedProfile) {\n              _context3.next = 16;\n              break;\n            }\n            throw new Error(\"No matching profile name found and default profile \\\"\".concat(defaultProfile, \"\\\" missing.\"));\n          case 16:\n            match = {\n              profileId: defaultProfile,\n              profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n              deprecated: !!supportedProfile.deprecated\n            };\n          case 17:\n            _context3.next = 19;\n            return fetchJsonFile(match.profilePath);\n          case 19:\n            profile = _context3.sent;\n            if (!getAssetPath) {\n              _context3.next = 25;\n              break;\n            }\n            if (xrInputSource.handedness === 'any') {\n              layout = profile.layouts[Object.keys(profile.layouts)[0]];\n            } else {\n              layout = profile.layouts[xrInputSource.handedness];\n            }\n            if (layout) {\n              _context3.next = 24;\n              break;\n            }\n            throw new Error(\"No matching handedness, \".concat(xrInputSource.handedness, \", in profile \").concat(match.profileId));\n          case 24:\n            if (layout.assetPath) {\n              assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n            }\n          case 25:\n            return _context3.abrupt(\"return\", {\n              profile: profile,\n              assetPath: assetPath\n            });\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _fetchProfile.apply(this, arguments);\n}\nvar defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xAxis = x;\n  var yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  var hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    var theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n  var result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nvar VisualResponse = /*#__PURE__*/function () {\n  function VisualResponse(visualResponseDescription) {\n    _classCallCheck(this, VisualResponse);\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  _createClass(VisualResponse, [{\n    key: \"updateFromComponent\",\n    value: function updateFromComponent(_ref) {\n      var xAxis = _ref.xAxis,\n        yAxis = _ref.yAxis,\n        button = _ref.button,\n        state = _ref.state;\n      var _normalizeAxes = normalizeAxes(xAxis, yAxis),\n        normalizedXAxis = _normalizeAxes.normalizedXAxis,\n        normalizedYAxis = _normalizeAxes.normalizedYAxis;\n      switch (this.componentProperty) {\n        case MotionControllerConstants.ComponentProperty.X_AXIS:\n          this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n          break;\n        case MotionControllerConstants.ComponentProperty.Y_AXIS:\n          this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n          break;\n        case MotionControllerConstants.ComponentProperty.BUTTON:\n          this.value = this.states.includes(state) ? button : 0;\n          break;\n        case MotionControllerConstants.ComponentProperty.STATE:\n          if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            this.value = this.states.includes(state);\n          } else {\n            this.value = this.states.includes(state) ? 1.0 : 0.0;\n          }\n          break;\n        default:\n          throw new Error(\"Unexpected visualResponse componentProperty \".concat(this.componentProperty));\n      }\n    }\n  }]);\n  return VisualResponse;\n}();\nvar Component = /*#__PURE__*/function () {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  function Component(componentId, componentDescription) {\n    var _this = this;\n    _classCallCheck(this, Component);\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(function (responseName) {\n      var visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      _this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n  _createClass(Component, [{\n    key: \"data\",\n    get: function get() {\n      var data = _objectSpread({\n        id: this.id\n      }, this.values);\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     * @param {Object} gamepad - The gamepad object from which the component data should be polled\n     */\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad(gamepad) {\n      var _this2 = this;\n      // Set the state to default before processing other data sources\n      this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n      if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n        var gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n        this.values.button = gamepadButton.value;\n        this.values.button = this.values.button < 0 ? 0 : this.values.button;\n        this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n        if (gamepadButton.pressed || this.values.button === 1) {\n          this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n        } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Get and normalize x axis value\n\n      if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n        this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n        this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n        this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Get and normalize Y axis value\n\n      if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n        this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n        this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n        this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Update the visual response weights based on the current component data\n\n      Object.values(this.visualResponses).forEach(function (visualResponse) {\n        visualResponse.updateFromComponent(_this2.values);\n      });\n    }\n  }]);\n  return Component;\n}(); /**\n      * @description Builds a motion controller with components and visual responses based on the\n      * supplied profile description. Data is polled from the xrInputSource's gamepad.\n      * @author Nell Waliczek / https://github.com/NellWaliczek\n      */\nvar MotionController = /*#__PURE__*/function () {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  function MotionController(xrInputSource, profile, assetUrl) {\n    var _this3 = this;\n    _classCallCheck(this, MotionController);\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(function (componentId) {\n      var componentDescription = _this3.layoutDescription.components[componentId];\n      _this3.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n  _createClass(MotionController, [{\n    key: \"gripSpace\",\n    get: function get() {\n      return this.xrInputSource.gripSpace;\n    }\n  }, {\n    key: \"targetRaySpace\",\n    get: function get() {\n      return this.xrInputSource.targetRaySpace;\n    }\n    /**\n     * @description Returns a subset of component data for simplified debugging\n     */\n  }, {\n    key: \"data\",\n    get: function get() {\n      var data = [];\n      Object.values(this.components).forEach(function (component) {\n        data.push(component.data);\n      });\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     */\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad() {\n      var _this4 = this;\n      Object.values(this.components).forEach(function (component) {\n        component.updateFromGamepad(_this4.xrInputSource.gamepad);\n      });\n    }\n  }]);\n  return MotionController;\n}();\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":{"version":3,"names":["MotionControllerConstants","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","path","fetch","response","ok","Error","statusText","json","fetchProfilesList","basePath","profileListFileName","profilesList","fetchProfile","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","profiles","some","profileId","supportedProfile","match","profilePath","deprecated","profile","handedness","layout","layouts","keys","assetPath","replace","defaultComponentValues","xAxis","yAxis","button","state","normalizeAxes","x","y","hypotenuse","Math","sqrt","theta","atan2","cos","sin","result","normalizedXAxis","normalizedYAxis","VisualResponse","visualResponseDescription","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","undefined","data","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","updateFromGamepad","gripSpace","targetRaySpace","component","push"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/libs/MotionControllers.js"],"sourcesContent":["/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nconst MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\n\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  } // Get the list of profiles\n\n\n  const supportedProfilesList = await fetchProfilesList(basePath); // Find the relative path to the first requested profile that is recognized\n\n  let match;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath;\n\n  if (getAssetPath) {\n    let layout;\n\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return {\n    profile,\n    assetPath\n  };\n}\n/** @constant {Object} */\n\n\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  const hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\n\n\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) ? button : 0;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n\n\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n    if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize x axis value\n\n\n    if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize Y axis value\n\n\n    if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Update the visual response weights based on the current component data\n\n\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n\n}\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\n\n\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n\n\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n\n\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n\n}\n\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}