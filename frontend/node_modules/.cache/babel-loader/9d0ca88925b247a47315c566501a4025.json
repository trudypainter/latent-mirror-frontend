{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from 'three';\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\nvar MTLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(MTLLoader, _Loader);\n  var _super = _createSuper(MTLLoader);\n  function MTLLoader(manager) {\n    _classCallCheck(this, MTLLoader);\n    return _super.call(this, manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n  _createClass(MTLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"setMaterialOptions\",\n    value: function setMaterialOptions(value) {\n      this.materialOptions = value;\n      return this;\n    }\n    /**\n     * Parses a MTL file.\n     *\n     * @param {String} text - Content of MTL file\n     * @return {MaterialCreator}\n     *\n     * @see setPath setResourcePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setResourcePath() explicitly prior to parse.\n     */\n  }, {\n    key: \"parse\",\n    value: function parse(text, path) {\n      var lines = text.split('\\n');\n      var info = {};\n      var delimiter_pattern = /\\s+/;\n      var materialsInfo = {};\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        line = line.trim();\n        if (line.length === 0 || line.charAt(0) === '#') {\n          // Blank line or comment ignore\n          continue;\n        }\n        var pos = line.indexOf(' ');\n        var key = pos >= 0 ? line.substring(0, pos) : line;\n        key = key.toLowerCase();\n        var value = pos >= 0 ? line.substring(pos + 1) : '';\n        value = value.trim();\n        if (key === 'newmtl') {\n          // New material\n          info = {\n            name: value\n          };\n          materialsInfo[value] = info;\n        } else {\n          if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n            var ss = value.split(delimiter_pattern, 3);\n            info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n          } else {\n            info[key] = value;\n          }\n        }\n      }\n      var materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n      materialCreator.setCrossOrigin(this.crossOrigin);\n      materialCreator.setManager(this.manager);\n      materialCreator.setMaterials(materialsInfo);\n      return materialCreator;\n    }\n  }]);\n  return MTLLoader;\n}(Loader); /**\n            * Create a new MTLLoader.MaterialCreator\n            * @param baseUrl - Url relative to which textures are loaded\n            * @param options - Set of options on how to construct the materials\n            *                  side: Which side to apply the material\n            *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n            *                  wrap: What type of wrapping to apply for textures\n            *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n            *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n            *                                Default: false, assumed to be already normalized\n            *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n            *                                  Default: false\n            * @constructor\n            */\nvar MaterialCreator = /*#__PURE__*/function () {\n  function MaterialCreator() {\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MaterialCreator);\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = 'anonymous';\n    this.side = this.options.side !== undefined ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== undefined ? this.options.wrap : RepeatWrapping;\n  }\n  _createClass(MaterialCreator, [{\n    key: \"setCrossOrigin\",\n    value: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n      return this;\n    }\n  }, {\n    key: \"setManager\",\n    value: function setManager(value) {\n      this.manager = value;\n    }\n  }, {\n    key: \"setMaterials\",\n    value: function setMaterials(materialsInfo) {\n      this.materialsInfo = this.convert(materialsInfo);\n      this.materials = {};\n      this.materialsArray = [];\n      this.nameLookup = {};\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(materialsInfo) {\n      if (!this.options) return materialsInfo;\n      var converted = {};\n      for (var mn in materialsInfo) {\n        // Convert materials info into normalized form based on options\n        var mat = materialsInfo[mn];\n        var covmat = {};\n        converted[mn] = covmat;\n        for (var prop in mat) {\n          var save = true;\n          var value = mat[prop];\n          var lprop = prop.toLowerCase();\n          switch (lprop) {\n            case 'kd':\n            case 'ka':\n            case 'ks':\n              // Diffuse color (color under white light) using RGB values\n              if (this.options && this.options.normalizeRGB) {\n                value = [value[0] / 255, value[1] / 255, value[2] / 255];\n              }\n              if (this.options && this.options.ignoreZeroRGBs) {\n                if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                  // ignore\n                  save = false;\n                }\n              }\n              break;\n          }\n          if (save) {\n            covmat[lprop] = value;\n          }\n        }\n      }\n      return converted;\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      for (var mn in this.materialsInfo) {\n        this.create(mn);\n      }\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(materialName) {\n      return this.nameLookup[materialName];\n    }\n  }, {\n    key: \"getAsArray\",\n    value: function getAsArray() {\n      var index = 0;\n      for (var mn in this.materialsInfo) {\n        this.materialsArray[index] = this.create(mn);\n        this.nameLookup[mn] = index;\n        index++;\n      }\n      return this.materialsArray;\n    }\n  }, {\n    key: \"create\",\n    value: function create(materialName) {\n      if (this.materials[materialName] === undefined) {\n        this.createMaterial_(materialName);\n      }\n      return this.materials[materialName];\n    }\n  }, {\n    key: \"createMaterial_\",\n    value: function createMaterial_(materialName) {\n      // Create material\n      var scope = this;\n      var mat = this.materialsInfo[materialName];\n      var params = {\n        name: materialName,\n        side: this.side\n      };\n      function resolveURL(baseUrl, url) {\n        if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n        if (/^https?:\\/\\//i.test(url)) return url;\n        return baseUrl + url;\n      }\n      function setMapForType(mapType, value) {\n        if (params[mapType]) return; // Keep the first encountered texture\n\n        var texParams = scope.getTextureParams(value, params);\n        var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n        map.repeat.copy(texParams.scale);\n        map.offset.copy(texParams.offset);\n        map.wrapS = scope.wrap;\n        map.wrapT = scope.wrap;\n        params[mapType] = map;\n      }\n      for (var prop in mat) {\n        var value = mat[prop];\n        var n = void 0;\n        if (value === '') continue;\n        switch (prop.toLowerCase()) {\n          // Ns is material specular exponent\n          case 'kd':\n            // Diffuse color (color under white light) using RGB values\n            params.color = new Color().fromArray(value);\n            break;\n          case 'ks':\n            // Specular color (color when light is reflected from shiny surface) using RGB values\n            params.specular = new Color().fromArray(value);\n            break;\n          case 'ke':\n            // Emissive using RGB values\n            params.emissive = new Color().fromArray(value);\n            break;\n          case 'map_kd':\n            // Diffuse texture map\n            setMapForType('map', value);\n            break;\n          case 'map_ks':\n            // Specular map\n            setMapForType('specularMap', value);\n            break;\n          case 'map_ke':\n            // Emissive map\n            setMapForType('emissiveMap', value);\n            break;\n          case 'norm':\n            setMapForType('normalMap', value);\n            break;\n          case 'map_bump':\n          case 'bump':\n            // Bump texture map\n            setMapForType('bumpMap', value);\n            break;\n          case 'map_d':\n            // Alpha map\n            setMapForType('alphaMap', value);\n            params.transparent = true;\n            break;\n          case 'ns':\n            // The specular exponent (defines the focus of the specular highlight)\n            // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n            params.shininess = parseFloat(value);\n            break;\n          case 'd':\n            n = parseFloat(value);\n            if (n < 1) {\n              params.opacity = n;\n              params.transparent = true;\n            }\n            break;\n          case 'tr':\n            n = parseFloat(value);\n            if (this.options && this.options.invertTrProperty) n = 1 - n;\n            if (n > 0) {\n              params.opacity = 1 - n;\n              params.transparent = true;\n            }\n            break;\n        }\n      }\n      this.materials[materialName] = new MeshPhongMaterial(params);\n      return this.materials[materialName];\n    }\n  }, {\n    key: \"getTextureParams\",\n    value: function getTextureParams(value, matParams) {\n      var texParams = {\n        scale: new Vector2(1, 1),\n        offset: new Vector2(0, 0)\n      };\n      var items = value.split(/\\s+/);\n      var pos;\n      pos = items.indexOf('-bm');\n      if (pos >= 0) {\n        matParams.bumpScale = parseFloat(items[pos + 1]);\n        items.splice(pos, 2);\n      }\n      pos = items.indexOf('-s');\n      if (pos >= 0) {\n        texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4); // we expect 3 parameters here!\n      }\n\n      pos = items.indexOf('-o');\n      if (pos >= 0) {\n        texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4); // we expect 3 parameters here!\n      }\n\n      texParams.url = items.join(' ').trim();\n      return texParams;\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(url, mapping, onLoad, onProgress, onError) {\n      var manager = this.manager !== undefined ? this.manager : DefaultLoadingManager;\n      var loader = manager.getHandler(url);\n      if (loader === null) {\n        loader = new TextureLoader(manager);\n      }\n      if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n      var texture = loader.load(url, onLoad, onProgress, onError);\n      if (mapping !== undefined) texture.mapping = mapping;\n      return texture;\n    }\n  }]);\n  return MaterialCreator;\n}();\nexport { MTLLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","FrontSide","RepeatWrapping","Color","MeshPhongMaterial","Vector2","DefaultLoadingManager","TextureLoader","MTLLoader","manager","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","undefined","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","create","materialName","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","set","join","mapping","getHandler","texture"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/loaders/MTLLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from 'three';\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nclass MTLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setMaterialOptions(value) {\n    this.materialOptions = value;\n    return this;\n  }\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {MaterialCreator}\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to parse.\n   */\n\n\n  parse(text, path) {\n    const lines = text.split('\\n');\n    let info = {};\n    const delimiter_pattern = /\\s+/;\n    const materialsInfo = {};\n\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      const pos = line.indexOf(' ');\n      let key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      let value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else {\n        if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n          const ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    const materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n\n}\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\n\nclass MaterialCreator {\n  constructor(baseUrl = '', options = {}) {\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = 'anonymous';\n    this.side = this.options.side !== undefined ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== undefined ? this.options.wrap : RepeatWrapping;\n  }\n\n  setCrossOrigin(value) {\n    this.crossOrigin = value;\n    return this;\n  }\n\n  setManager(value) {\n    this.manager = value;\n  }\n\n  setMaterials(materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  }\n\n  convert(materialsInfo) {\n    if (!this.options) return materialsInfo;\n    const converted = {};\n\n    for (const mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n      const mat = materialsInfo[mn];\n      const covmat = {};\n      converted[mn] = covmat;\n\n      for (const prop in mat) {\n        let save = true;\n        let value = mat[prop];\n        const lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n                save = false;\n              }\n            }\n\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  }\n\n  preload() {\n    for (const mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  }\n\n  getIndex(materialName) {\n    return this.nameLookup[materialName];\n  }\n\n  getAsArray() {\n    let index = 0;\n\n    for (const mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  }\n\n  create(materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  }\n\n  createMaterial_(materialName) {\n    // Create material\n    const scope = this;\n    const mat = this.materialsInfo[materialName];\n    const params = {\n      name: materialName,\n      side: this.side\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n      if (/^https?:\\/\\//i.test(url)) return url;\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      const texParams = scope.getTextureParams(value, params);\n      const map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n\n    for (const prop in mat) {\n      const value = mat[prop];\n      let n;\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          params.color = new Color().fromArray(value);\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new Color().fromArray(value);\n          break;\n\n        case 'ke':\n          // Emissive using RGB values\n          params.emissive = new Color().fromArray(value);\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n          setMapForType('map', value);\n          break;\n\n        case 'map_ks':\n          // Specular map\n          setMapForType('specularMap', value);\n          break;\n\n        case 'map_ke':\n          // Emissive map\n          setMapForType('emissiveMap', value);\n          break;\n\n        case 'norm':\n          setMapForType('normalMap', value);\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n          setMapForType('bumpMap', value);\n          break;\n\n        case 'map_d':\n          // Alpha map\n          setMapForType('alphaMap', value);\n          params.transparent = true;\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n          params.shininess = parseFloat(value);\n          break;\n\n        case 'd':\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'tr':\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n      }\n    }\n\n    this.materials[materialName] = new MeshPhongMaterial(params);\n    return this.materials[materialName];\n  }\n\n  getTextureParams(value, matParams) {\n    const texParams = {\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    const items = value.split(/\\s+/);\n    let pos;\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  }\n\n  loadTexture(url, mapping, onLoad, onProgress, onError) {\n    const manager = this.manager !== undefined ? this.manager : DefaultLoadingManager;\n    let loader = manager.getHandler(url);\n\n    if (loader === null) {\n      loader = new TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    const texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== undefined) texture.mapping = mapping;\n    return texture;\n  }\n\n}\n\nexport { MTLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}