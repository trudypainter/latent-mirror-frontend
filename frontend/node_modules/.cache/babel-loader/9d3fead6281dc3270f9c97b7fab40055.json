{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node from '../core/Node.js';\nvar ConvertNode = /*#__PURE__*/function (_Node) {\n  _inherits(ConvertNode, _Node);\n  var _super = _createSuper(ConvertNode);\n  function ConvertNode(node, convertTo) {\n    var _this;\n    _classCallCheck(this, ConvertNode);\n    _this = _super.call(this);\n    _this.node = node;\n    _this.convertTo = convertTo;\n    return _this;\n  }\n  _createClass(ConvertNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType() {\n      return this.convertTo;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var convertTo = this.convertTo;\n      var node = this.node;\n      if (builder.isReference(convertTo) === false) {\n        var convertToSnippet = builder.getType(convertTo);\n        var nodeSnippet = node.build(builder, convertTo);\n        return \"\".concat(builder.getVectorType(convertToSnippet), \"( \").concat(nodeSnippet, \" )\");\n      } else {\n        return node.build(builder, convertTo);\n      }\n    }\n  }]);\n  return ConvertNode;\n}(Node);\nexport default ConvertNode;","map":{"version":3,"names":["Node","ConvertNode","node","convertTo","builder","isReference","convertToSnippet","getType","nodeSnippet","build","getVectorType"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/nodes/utils/ConvertNode.js"],"sourcesContent":["import Node from '../core/Node.js';\n\nclass ConvertNode extends Node {\n  constructor(node, convertTo) {\n    super();\n    this.node = node;\n    this.convertTo = convertTo;\n  }\n\n  getNodeType() {\n    return this.convertTo;\n  }\n\n  generate(builder) {\n    const convertTo = this.convertTo;\n    const node = this.node;\n\n    if (builder.isReference(convertTo) === false) {\n      const convertToSnippet = builder.getType(convertTo);\n      const nodeSnippet = node.build(builder, convertTo);\n      return `${builder.getVectorType(convertToSnippet)}( ${nodeSnippet} )`;\n    } else {\n      return node.build(builder, convertTo);\n    }\n  }\n\n}\n\nexport default ConvertNode;\n"],"mappings":";;;;AAAA,OAAOA,IAAI,MAAM,iBAAiB;AAAC,IAE7BC,WAAW;EAAA;EAAA;EACf,qBAAYC,IAAI,EAAEC,SAAS,EAAE;IAAA;IAAA;IAC3B;IACA,MAAKD,IAAI,GAAGA,IAAI;IAChB,MAAKC,SAAS,GAAGA,SAAS;IAAC;EAC7B;EAAC;IAAA;IAAA,OAED,uBAAc;MACZ,OAAO,IAAI,CAACA,SAAS;IACvB;EAAC;IAAA;IAAA,OAED,kBAASC,OAAO,EAAE;MAChB,IAAMD,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAMD,IAAI,GAAG,IAAI,CAACA,IAAI;MAEtB,IAAIE,OAAO,CAACC,WAAW,CAACF,SAAS,CAAC,KAAK,KAAK,EAAE;QAC5C,IAAMG,gBAAgB,GAAGF,OAAO,CAACG,OAAO,CAACJ,SAAS,CAAC;QACnD,IAAMK,WAAW,GAAGN,IAAI,CAACO,KAAK,CAACL,OAAO,EAAED,SAAS,CAAC;QAClD,iBAAUC,OAAO,CAACM,aAAa,CAACJ,gBAAgB,CAAC,eAAKE,WAAW;MACnE,CAAC,MAAM;QACL,OAAON,IAAI,CAACO,KAAK,CAACL,OAAO,EAAED,SAAS,CAAC;MACvC;IACF;EAAC;EAAA;AAAA,EAtBuBH,IAAI;AA0B9B,eAAeC,WAAW"},"metadata":{},"sourceType":"module"}