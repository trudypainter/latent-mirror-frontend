{"ast":null,"code":"import { BufferGeometry, Color, Float32BufferAttribute, Vector2, Vector3 } from 'three';\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nclass TessellateModifier {\n  constructor() {\n    let maxEdgeLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.1;\n    let maxIterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n    this.maxEdgeLength = maxEdgeLength;\n    this.maxIterations = maxIterations;\n  }\n  modify(geometry) {\n    if (geometry.index !== null) {\n      geometry = geometry.toNonIndexed();\n    }\n\n    //\n\n    const maxIterations = this.maxIterations;\n    const maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n    const va = new Vector3();\n    const vb = new Vector3();\n    const vc = new Vector3();\n    const vm = new Vector3();\n    const vs = [va, vb, vc, vm];\n    const na = new Vector3();\n    const nb = new Vector3();\n    const nc = new Vector3();\n    const nm = new Vector3();\n    const ns = [na, nb, nc, nm];\n    const ca = new Color();\n    const cb = new Color();\n    const cc = new Color();\n    const cm = new Color();\n    const cs = [ca, cb, cc, cm];\n    const ua = new Vector2();\n    const ub = new Vector2();\n    const uc = new Vector2();\n    const um = new Vector2();\n    const us = [ua, ub, uc, um];\n    const u2a = new Vector2();\n    const u2b = new Vector2();\n    const u2c = new Vector2();\n    const u2m = new Vector2();\n    const u2s = [u2a, u2b, u2c, u2m];\n    const attributes = geometry.attributes;\n    const hasNormals = attributes.normal !== undefined;\n    const hasColors = attributes.color !== undefined;\n    const hasUVs = attributes.uv !== undefined;\n    const hasUV2s = attributes.uv2 !== undefined;\n    let positions = attributes.position.array;\n    let normals = hasNormals ? attributes.normal.array : null;\n    let colors = hasColors ? attributes.color.array : null;\n    let uvs = hasUVs ? attributes.uv.array : null;\n    let uv2s = hasUV2s ? attributes.uv2.array : null;\n    let positions2 = positions;\n    let normals2 = normals;\n    let colors2 = colors;\n    let uvs2 = uvs;\n    let uv2s2 = uv2s;\n    let iteration = 0;\n    let tessellating = true;\n    function addTriangle(a, b, c) {\n      const v1 = vs[a];\n      const v2 = vs[b];\n      const v3 = vs[c];\n      positions2.push(v1.x, v1.y, v1.z);\n      positions2.push(v2.x, v2.y, v2.z);\n      positions2.push(v3.x, v3.y, v3.z);\n      if (hasNormals) {\n        const n1 = ns[a];\n        const n2 = ns[b];\n        const n3 = ns[c];\n        normals2.push(n1.x, n1.y, n1.z);\n        normals2.push(n2.x, n2.y, n2.z);\n        normals2.push(n3.x, n3.y, n3.z);\n      }\n      if (hasColors) {\n        const c1 = cs[a];\n        const c2 = cs[b];\n        const c3 = cs[c];\n        colors2.push(c1.x, c1.y, c1.z);\n        colors2.push(c2.x, c2.y, c2.z);\n        colors2.push(c3.x, c3.y, c3.z);\n      }\n      if (hasUVs) {\n        const u1 = us[a];\n        const u2 = us[b];\n        const u3 = us[c];\n        uvs2.push(u1.x, u1.y);\n        uvs2.push(u2.x, u2.y);\n        uvs2.push(u3.x, u3.y);\n      }\n      if (hasUV2s) {\n        const u21 = u2s[a];\n        const u22 = u2s[b];\n        const u23 = u2s[c];\n        uv2s2.push(u21.x, u21.y);\n        uv2s2.push(u22.x, u22.y);\n        uv2s2.push(u23.x, u23.y);\n      }\n    }\n    while (tessellating && iteration < maxIterations) {\n      iteration++;\n      tessellating = false;\n      positions = positions2;\n      positions2 = [];\n      if (hasNormals) {\n        normals = normals2;\n        normals2 = [];\n      }\n      if (hasColors) {\n        colors = colors2;\n        colors2 = [];\n      }\n      if (hasUVs) {\n        uvs = uvs2;\n        uvs2 = [];\n      }\n      if (hasUV2s) {\n        uv2s = uv2s2;\n        uv2s2 = [];\n      }\n      for (let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n        va.fromArray(positions, i + 0);\n        vb.fromArray(positions, i + 3);\n        vc.fromArray(positions, i + 6);\n        if (hasNormals) {\n          na.fromArray(normals, i + 0);\n          nb.fromArray(normals, i + 3);\n          nc.fromArray(normals, i + 6);\n        }\n        if (hasColors) {\n          ca.fromArray(colors, i + 0);\n          cb.fromArray(colors, i + 3);\n          cc.fromArray(colors, i + 6);\n        }\n        if (hasUVs) {\n          ua.fromArray(uvs, i2 + 0);\n          ub.fromArray(uvs, i2 + 2);\n          uc.fromArray(uvs, i2 + 4);\n        }\n        if (hasUV2s) {\n          u2a.fromArray(uv2s, i2 + 0);\n          u2b.fromArray(uv2s, i2 + 2);\n          u2c.fromArray(uv2s, i2 + 4);\n        }\n        const dab = va.distanceToSquared(vb);\n        const dbc = vb.distanceToSquared(vc);\n        const dac = va.distanceToSquared(vc);\n        if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n          tessellating = true;\n          if (dab >= dbc && dab >= dac) {\n            vm.lerpVectors(va, vb, 0.5);\n            if (hasNormals) nm.lerpVectors(na, nb, 0.5);\n            if (hasColors) cm.lerpColors(ca, cb, 0.5);\n            if (hasUVs) um.lerpVectors(ua, ub, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2a, u2b, 0.5);\n            addTriangle(0, 3, 2);\n            addTriangle(3, 1, 2);\n          } else if (dbc >= dab && dbc >= dac) {\n            vm.lerpVectors(vb, vc, 0.5);\n            if (hasNormals) nm.lerpVectors(nb, nc, 0.5);\n            if (hasColors) cm.lerpColors(cb, cc, 0.5);\n            if (hasUVs) um.lerpVectors(ub, uc, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2b, u2c, 0.5);\n            addTriangle(0, 1, 3);\n            addTriangle(3, 2, 0);\n          } else {\n            vm.lerpVectors(va, vc, 0.5);\n            if (hasNormals) nm.lerpVectors(na, nc, 0.5);\n            if (hasColors) cm.lerpColors(ca, cc, 0.5);\n            if (hasUVs) um.lerpVectors(ua, uc, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2a, u2c, 0.5);\n            addTriangle(0, 1, 3);\n            addTriangle(3, 1, 2);\n          }\n        } else {\n          addTriangle(0, 1, 2);\n        }\n      }\n    }\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    if (hasNormals) {\n      geometry2.setAttribute('normal', new Float32BufferAttribute(normals2, 3));\n    }\n    if (hasColors) {\n      geometry2.setAttribute('color', new Float32BufferAttribute(colors2, 3));\n    }\n    if (hasUVs) {\n      geometry2.setAttribute('uv', new Float32BufferAttribute(uvs2, 2));\n    }\n    if (hasUV2s) {\n      geometry2.setAttribute('uv2', new Float32BufferAttribute(uv2s2, 2));\n    }\n    return geometry2;\n  }\n}\nexport { TessellateModifier };","map":{"version":3,"names":["BufferGeometry","Color","Float32BufferAttribute","Vector2","Vector3","TessellateModifier","constructor","maxEdgeLength","maxIterations","modify","geometry","index","toNonIndexed","maxEdgeLengthSquared","va","vb","vc","vm","vs","na","nb","nc","nm","ns","ca","cb","cc","cm","cs","ua","ub","uc","um","us","u2a","u2b","u2c","u2m","u2s","attributes","hasNormals","normal","undefined","hasColors","color","hasUVs","uv","hasUV2s","uv2","positions","position","array","normals","colors","uvs","uv2s","positions2","normals2","colors2","uvs2","uv2s2","iteration","tessellating","addTriangle","a","b","c","v1","v2","v3","push","x","y","z","n1","n2","n3","c1","c2","c3","u1","u2","u3","u21","u22","u23","i","i2","il","length","fromArray","dab","distanceToSquared","dbc","dac","lerpVectors","lerpColors","geometry2","setAttribute"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three/examples/jsm/modifiers/TessellateModifier.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tColor,\n\tFloat32BufferAttribute,\n\tVector2,\n\tVector3\n} from 'three';\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nclass TessellateModifier {\n\n\tconstructor( maxEdgeLength = 0.1, maxIterations = 6 ) {\n\n\t\tthis.maxEdgeLength = maxEdgeLength;\n\t\tthis.maxIterations = maxIterations;\n\n\t}\n\n\tmodify( geometry ) {\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tgeometry = geometry.toNonIndexed();\n\n\t\t}\n\n\t\t//\n\n\t\tconst maxIterations = this.maxIterations;\n\t\tconst maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n\n\t\tconst va = new Vector3();\n\t\tconst vb = new Vector3();\n\t\tconst vc = new Vector3();\n\t\tconst vm = new Vector3();\n\t\tconst vs = [ va, vb, vc, vm ];\n\n\t\tconst na = new Vector3();\n\t\tconst nb = new Vector3();\n\t\tconst nc = new Vector3();\n\t\tconst nm = new Vector3();\n\t\tconst ns = [ na, nb, nc, nm ];\n\n\t\tconst ca = new Color();\n\t\tconst cb = new Color();\n\t\tconst cc = new Color();\n\t\tconst cm = new Color();\n\t\tconst cs = [ ca, cb, cc, cm ];\n\n\t\tconst ua = new Vector2();\n\t\tconst ub = new Vector2();\n\t\tconst uc = new Vector2();\n\t\tconst um = new Vector2();\n\t\tconst us = [ ua, ub, uc, um ];\n\n\t\tconst u2a = new Vector2();\n\t\tconst u2b = new Vector2();\n\t\tconst u2c = new Vector2();\n\t\tconst u2m = new Vector2();\n\t\tconst u2s = [ u2a, u2b, u2c, u2m ];\n\n\t\tconst attributes = geometry.attributes;\n\t\tconst hasNormals = attributes.normal !== undefined;\n\t\tconst hasColors = attributes.color !== undefined;\n\t\tconst hasUVs = attributes.uv !== undefined;\n\t\tconst hasUV2s = attributes.uv2 !== undefined;\n\n\t\tlet positions = attributes.position.array;\n\t\tlet normals = hasNormals ? attributes.normal.array : null;\n\t\tlet colors = hasColors ? attributes.color.array : null;\n\t\tlet uvs = hasUVs ? attributes.uv.array : null;\n\t\tlet uv2s = hasUV2s ? attributes.uv2.array : null;\n\n\t\tlet positions2 = positions;\n\t\tlet normals2 = normals;\n\t\tlet colors2 = colors;\n\t\tlet uvs2 = uvs;\n\t\tlet uv2s2 = uv2s;\n\n\t\tlet iteration = 0;\n\t\tlet tessellating = true;\n\n\t\tfunction addTriangle( a, b, c ) {\n\n\t\t\tconst v1 = vs[ a ];\n\t\t\tconst v2 = vs[ b ];\n\t\t\tconst v3 = vs[ c ];\n\n\t\t\tpositions2.push( v1.x, v1.y, v1.z );\n\t\t\tpositions2.push( v2.x, v2.y, v2.z );\n\t\t\tpositions2.push( v3.x, v3.y, v3.z );\n\n\t\t\tif ( hasNormals ) {\n\n\t\t\t\tconst n1 = ns[ a ];\n\t\t\t\tconst n2 = ns[ b ];\n\t\t\t\tconst n3 = ns[ c ];\n\n\t\t\t\tnormals2.push( n1.x, n1.y, n1.z );\n\t\t\t\tnormals2.push( n2.x, n2.y, n2.z );\n\t\t\t\tnormals2.push( n3.x, n3.y, n3.z );\n\n\t\t\t}\n\n\t\t\tif ( hasColors ) {\n\n\t\t\t\tconst c1 = cs[ a ];\n\t\t\t\tconst c2 = cs[ b ];\n\t\t\t\tconst c3 = cs[ c ];\n\n\t\t\t\tcolors2.push( c1.x, c1.y, c1.z );\n\t\t\t\tcolors2.push( c2.x, c2.y, c2.z );\n\t\t\t\tcolors2.push( c3.x, c3.y, c3.z );\n\n\t\t\t}\n\n\t\t\tif ( hasUVs ) {\n\n\t\t\t\tconst u1 = us[ a ];\n\t\t\t\tconst u2 = us[ b ];\n\t\t\t\tconst u3 = us[ c ];\n\n\t\t\t\tuvs2.push( u1.x, u1.y );\n\t\t\t\tuvs2.push( u2.x, u2.y );\n\t\t\t\tuvs2.push( u3.x, u3.y );\n\n\t\t\t}\n\n\t\t\tif ( hasUV2s ) {\n\n\t\t\t\tconst u21 = u2s[ a ];\n\t\t\t\tconst u22 = u2s[ b ];\n\t\t\t\tconst u23 = u2s[ c ];\n\n\t\t\t\tuv2s2.push( u21.x, u21.y );\n\t\t\t\tuv2s2.push( u22.x, u22.y );\n\t\t\t\tuv2s2.push( u23.x, u23.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\twhile ( tessellating && iteration < maxIterations ) {\n\n\t\t\titeration ++;\n\t\t\ttessellating = false;\n\n\t\t\tpositions = positions2;\n\t\t\tpositions2 = [];\n\n\t\t\tif ( hasNormals ) {\n\n\t\t\t\tnormals = normals2;\n\t\t\t\tnormals2 = [];\n\n\t\t\t}\n\n\t\t\tif ( hasColors ) {\n\n\t\t\t\tcolors = colors2;\n\t\t\t\tcolors2 = [];\n\n\t\t\t}\n\n\t\t\tif ( hasUVs ) {\n\n\t\t\t\tuvs = uvs2;\n\t\t\t\tuvs2 = [];\n\n\t\t\t}\n\n\t\t\tif ( hasUV2s ) {\n\n\t\t\t\tuv2s = uv2s2;\n\t\t\t\tuv2s2 = [];\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6 ) {\n\n\t\t\t\tva.fromArray( positions, i + 0 );\n\t\t\t\tvb.fromArray( positions, i + 3 );\n\t\t\t\tvc.fromArray( positions, i + 6 );\n\n\t\t\t\tif ( hasNormals ) {\n\n\t\t\t\t\tna.fromArray( normals, i + 0 );\n\t\t\t\t\tnb.fromArray( normals, i + 3 );\n\t\t\t\t\tnc.fromArray( normals, i + 6 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\tca.fromArray( colors, i + 0 );\n\t\t\t\t\tcb.fromArray( colors, i + 3 );\n\t\t\t\t\tcc.fromArray( colors, i + 6 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasUVs ) {\n\n\t\t\t\t\tua.fromArray( uvs, i2 + 0 );\n\t\t\t\t\tub.fromArray( uvs, i2 + 2 );\n\t\t\t\t\tuc.fromArray( uvs, i2 + 4 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasUV2s ) {\n\n\t\t\t\t\tu2a.fromArray( uv2s, i2 + 0 );\n\t\t\t\t\tu2b.fromArray( uv2s, i2 + 2 );\n\t\t\t\t\tu2c.fromArray( uv2s, i2 + 4 );\n\n\t\t\t\t}\n\n\t\t\t\tconst dab = va.distanceToSquared( vb );\n\t\t\t\tconst dbc = vb.distanceToSquared( vc );\n\t\t\t\tconst dac = va.distanceToSquared( vc );\n\n\t\t\t\tif ( dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared ) {\n\n\t\t\t\t\ttessellating = true;\n\n\t\t\t\t\tif ( dab >= dbc && dab >= dac ) {\n\n\t\t\t\t\t\tvm.lerpVectors( va, vb, 0.5 );\n\t\t\t\t\t\tif ( hasNormals ) nm.lerpVectors( na, nb, 0.5 );\n\t\t\t\t\t\tif ( hasColors ) cm.lerpColors( ca, cb, 0.5 );\n\t\t\t\t\t\tif ( hasUVs ) um.lerpVectors( ua, ub, 0.5 );\n\t\t\t\t\t\tif ( hasUV2s ) u2m.lerpVectors( u2a, u2b, 0.5 );\n\n\t\t\t\t\t\taddTriangle( 0, 3, 2 );\n\t\t\t\t\t\taddTriangle( 3, 1, 2 );\n\n\t\t\t\t\t} else if ( dbc >= dab && dbc >= dac ) {\n\n\t\t\t\t\t\tvm.lerpVectors( vb, vc, 0.5 );\n\t\t\t\t\t\tif ( hasNormals ) nm.lerpVectors( nb, nc, 0.5 );\n\t\t\t\t\t\tif ( hasColors ) cm.lerpColors( cb, cc, 0.5 );\n\t\t\t\t\t\tif ( hasUVs ) um.lerpVectors( ub, uc, 0.5 );\n\t\t\t\t\t\tif ( hasUV2s ) u2m.lerpVectors( u2b, u2c, 0.5 );\n\n\t\t\t\t\t\taddTriangle( 0, 1, 3 );\n\t\t\t\t\t\taddTriangle( 3, 2, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvm.lerpVectors( va, vc, 0.5 );\n\t\t\t\t\t\tif ( hasNormals ) nm.lerpVectors( na, nc, 0.5 );\n\t\t\t\t\t\tif ( hasColors ) cm.lerpColors( ca, cc, 0.5 );\n\t\t\t\t\t\tif ( hasUVs ) um.lerpVectors( ua, uc, 0.5 );\n\t\t\t\t\t\tif ( hasUV2s ) u2m.lerpVectors( u2a, u2c, 0.5 );\n\n\t\t\t\t\t\taddTriangle( 0, 1, 3 );\n\t\t\t\t\t\taddTriangle( 3, 1, 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\taddTriangle( 0, 1, 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\n\t\tif ( hasNormals ) {\n\n\t\t\tgeometry2.setAttribute( 'normal', new Float32BufferAttribute( normals2, 3 ) );\n\n\t\t}\n\n\t\tif ( hasColors ) {\n\n\t\t\tgeometry2.setAttribute( 'color', new Float32BufferAttribute( colors2, 3 ) );\n\n\t\t}\n\n\t\tif ( hasUVs ) {\n\n\t\t\tgeometry2.setAttribute( 'uv', new Float32BufferAttribute( uvs2, 2 ) );\n\n\t\t}\n\n\t\tif ( hasUV2s ) {\n\n\t\t\tgeometry2.setAttribute( 'uv2', new Float32BufferAttribute( uv2s2, 2 ) );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n}\n\nexport { TessellateModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}