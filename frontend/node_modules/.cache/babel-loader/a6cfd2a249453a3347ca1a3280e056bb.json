{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DataTextureLoader, LinearMipmapLinearFilter } from 'three';\nvar TGALoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(TGALoader, _DataTextureLoader);\n  var _super = _createSuper(TGALoader);\n  function TGALoader(manager) {\n    _classCallCheck(this, TGALoader);\n    return _super.call(this, manager);\n  }\n  _createClass(TGALoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      // reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n      function tgaCheckHeader(header) {\n        switch (header.image_type) {\n          // check indexed type\n          case TGA_TYPE_INDEXED:\n          case TGA_TYPE_RLE_INDEXED:\n            if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n              console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n            }\n            break;\n          // check colormap type\n\n          case TGA_TYPE_RGB:\n          case TGA_TYPE_GREY:\n          case TGA_TYPE_RLE_RGB:\n          case TGA_TYPE_RLE_GREY:\n            if (header.colormap_type) {\n              console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n            }\n            break;\n          // What the need of a file without data ?\n\n          case TGA_TYPE_NO_DATA:\n            console.error('THREE.TGALoader: No data.');\n          // Invalid type ?\n\n          default:\n            console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n        } // check image width and height\n\n        if (header.width <= 0 || header.height <= 0) {\n          console.error('THREE.TGALoader: Invalid image size.');\n        } // check image pixel size\n\n        if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n          console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n        }\n      } // parse tga image buffer\n\n      function tgaParse(use_rle, use_pal, header, offset, data) {\n        var pixel_data, palettes;\n        var pixel_size = header.pixel_size >> 3;\n        var pixel_total = header.width * header.height * pixel_size; // read palettes\n\n        if (use_pal) {\n          palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n        } // read RLE\n\n        if (use_rle) {\n          pixel_data = new Uint8Array(pixel_total);\n          var c, count, i;\n          var shift = 0;\n          var pixels = new Uint8Array(pixel_size);\n          while (shift < pixel_total) {\n            c = data[offset++];\n            count = (c & 0x7f) + 1; // RLE pixels\n\n            if (c & 0x80) {\n              // bind pixel tmp array\n              for (i = 0; i < pixel_size; ++i) {\n                pixels[i] = data[offset++];\n              } // copy pixel array\n\n              for (i = 0; i < count; ++i) {\n                pixel_data.set(pixels, shift + i * pixel_size);\n              }\n              shift += pixel_size * count;\n            } else {\n              // raw pixels\n              count *= pixel_size;\n              for (i = 0; i < count; ++i) {\n                pixel_data[shift + i] = data[offset++];\n              }\n              shift += count;\n            }\n          }\n        } else {\n          // raw pixels\n          pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n        }\n        return {\n          pixel_data: pixel_data,\n          palettes: palettes\n        };\n      }\n      function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n        var colormap = palettes;\n        var color,\n          i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i++) {\n            color = image[i];\n            imageData[(x + width * y) * 4 + 3] = 255;\n            imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n            imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n            imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var color,\n          i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i += 2) {\n            color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n            imageData[(x + width * y) * 4 + 0] = (color & 0x7c00) >> 7;\n            imageData[(x + width * y) * 4 + 1] = (color & 0x03e0) >> 2;\n            imageData[(x + width * y) * 4 + 2] = (color & 0x001f) >> 3;\n            imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i += 3) {\n            imageData[(x + width * y) * 4 + 3] = 255;\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i += 4) {\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\n            imageData[(x + width * y) * 4 + 3] = image[i + 3];\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var color,\n          i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i++) {\n            color = image[i];\n            imageData[(x + width * y) * 4 + 0] = color;\n            imageData[(x + width * y) * 4 + 1] = color;\n            imageData[(x + width * y) * 4 + 2] = color;\n            imageData[(x + width * y) * 4 + 3] = 255;\n          }\n        }\n        return imageData;\n      }\n      function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n        var i = 0,\n          x,\n          y;\n        var width = header.width;\n        for (y = y_start; y !== y_end; y += y_step) {\n          for (x = x_start; x !== x_end; x += x_step, i += 2) {\n            imageData[(x + width * y) * 4 + 0] = image[i + 0];\n            imageData[(x + width * y) * 4 + 1] = image[i + 0];\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\n            imageData[(x + width * y) * 4 + 3] = image[i + 1];\n          }\n        }\n        return imageData;\n      }\n      function getTgaRGBA(data, width, height, image, palette) {\n        var x_start, y_start, x_step, y_step, x_end, y_end;\n        switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n          default:\n          case TGA_ORIGIN_UL:\n            x_start = 0;\n            x_step = 1;\n            x_end = width;\n            y_start = 0;\n            y_step = 1;\n            y_end = height;\n            break;\n          case TGA_ORIGIN_BL:\n            x_start = 0;\n            x_step = 1;\n            x_end = width;\n            y_start = height - 1;\n            y_step = -1;\n            y_end = -1;\n            break;\n          case TGA_ORIGIN_UR:\n            x_start = width - 1;\n            x_step = -1;\n            x_end = -1;\n            y_start = 0;\n            y_step = 1;\n            y_end = height;\n            break;\n          case TGA_ORIGIN_BR:\n            x_start = width - 1;\n            x_step = -1;\n            x_end = -1;\n            y_start = height - 1;\n            y_step = -1;\n            y_end = -1;\n            break;\n        }\n        if (use_grey) {\n          switch (header.pixel_size) {\n            case 8:\n              tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            case 16:\n              tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            default:\n              console.error('THREE.TGALoader: Format not supported.');\n              break;\n          }\n        } else {\n          switch (header.pixel_size) {\n            case 8:\n              tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n              break;\n            case 16:\n              tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            case 24:\n              tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            case 32:\n              tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n              break;\n            default:\n              console.error('THREE.TGALoader: Format not supported.');\n              break;\n          }\n        } // Load image data according to specific method\n        // let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n        // func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\n        return data;\n      } // TGA constants\n\n      var TGA_TYPE_NO_DATA = 0,\n        TGA_TYPE_INDEXED = 1,\n        TGA_TYPE_RGB = 2,\n        TGA_TYPE_GREY = 3,\n        TGA_TYPE_RLE_INDEXED = 9,\n        TGA_TYPE_RLE_RGB = 10,\n        TGA_TYPE_RLE_GREY = 11,\n        TGA_ORIGIN_MASK = 0x30,\n        TGA_ORIGIN_SHIFT = 0x04,\n        TGA_ORIGIN_BL = 0x00,\n        TGA_ORIGIN_BR = 0x01,\n        TGA_ORIGIN_UL = 0x02,\n        TGA_ORIGIN_UR = 0x03;\n      if (buffer.length < 19) console.error('THREE.TGALoader: Not enough data to contain header.');\n      var offset = 0;\n      var content = new Uint8Array(buffer),\n        header = {\n          id_length: content[offset++],\n          colormap_type: content[offset++],\n          image_type: content[offset++],\n          colormap_index: content[offset++] | content[offset++] << 8,\n          colormap_length: content[offset++] | content[offset++] << 8,\n          colormap_size: content[offset++],\n          origin: [content[offset++] | content[offset++] << 8, content[offset++] | content[offset++] << 8],\n          width: content[offset++] | content[offset++] << 8,\n          height: content[offset++] | content[offset++] << 8,\n          pixel_size: content[offset++],\n          flags: content[offset++]\n        }; // check tga if it is valid format\n\n      tgaCheckHeader(header);\n      if (header.id_length + offset > buffer.length) {\n        console.error('THREE.TGALoader: No data.');\n      } // skip the needn't data\n\n      offset += header.id_length; // get targa information about RLE compression and palette\n\n      var use_rle = false,\n        use_pal = false,\n        use_grey = false;\n      switch (header.image_type) {\n        case TGA_TYPE_RLE_INDEXED:\n          use_rle = true;\n          use_pal = true;\n          break;\n        case TGA_TYPE_INDEXED:\n          use_pal = true;\n          break;\n        case TGA_TYPE_RLE_RGB:\n          use_rle = true;\n          break;\n        case TGA_TYPE_RGB:\n          break;\n        case TGA_TYPE_RLE_GREY:\n          use_rle = true;\n          use_grey = true;\n          break;\n        case TGA_TYPE_GREY:\n          use_grey = true;\n          break;\n      } //\n\n      var imageData = new Uint8Array(header.width * header.height * 4);\n      var result = tgaParse(use_rle, use_pal, header, offset, content);\n      getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);\n      return {\n        data: imageData,\n        width: header.width,\n        height: header.height,\n        flipY: true,\n        generateMipmaps: true,\n        minFilter: LinearMipmapLinearFilter\n      };\n    }\n  }]);\n  return TGALoader;\n}(DataTextureLoader);\nexport { TGALoader };","map":{"version":3,"names":["DataTextureLoader","LinearMipmapLinearFilter","TGALoader","manager","buffer","tgaCheckHeader","header","image_type","TGA_TYPE_INDEXED","TGA_TYPE_RLE_INDEXED","colormap_length","colormap_size","colormap_type","console","error","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_TYPE_NO_DATA","width","height","pixel_size","tgaParse","use_rle","use_pal","offset","data","pixel_data","palettes","pixel_total","subarray","Uint8Array","c","count","i","shift","pixels","set","tgaGetImageData8bits","imageData","y_start","y_step","y_end","x_start","x_step","x_end","image","colormap","color","x","y","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","getTgaRGBA","palette","flags","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_UL","TGA_ORIGIN_BL","TGA_ORIGIN_UR","TGA_ORIGIN_BR","use_grey","length","content","id_length","colormap_index","origin","result","flipY","generateMipmaps","minFilter"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/TGALoader.js"],"sourcesContent":["import { DataTextureLoader, LinearMipmapLinearFilter } from 'three';\n\nclass TGALoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer) {\n    // reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n    function tgaCheckHeader(header) {\n      switch (header.image_type) {\n        // check indexed type\n        case TGA_TYPE_INDEXED:\n        case TGA_TYPE_RLE_INDEXED:\n          if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n            console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n          }\n\n          break;\n        // check colormap type\n\n        case TGA_TYPE_RGB:\n        case TGA_TYPE_GREY:\n        case TGA_TYPE_RLE_RGB:\n        case TGA_TYPE_RLE_GREY:\n          if (header.colormap_type) {\n            console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n          }\n\n          break;\n        // What the need of a file without data ?\n\n        case TGA_TYPE_NO_DATA:\n          console.error('THREE.TGALoader: No data.');\n        // Invalid type ?\n\n        default:\n          console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n      } // check image width and height\n\n\n      if (header.width <= 0 || header.height <= 0) {\n        console.error('THREE.TGALoader: Invalid image size.');\n      } // check image pixel size\n\n\n      if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n        console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n      }\n    } // parse tga image buffer\n\n\n    function tgaParse(use_rle, use_pal, header, offset, data) {\n      let pixel_data, palettes;\n      const pixel_size = header.pixel_size >> 3;\n      const pixel_total = header.width * header.height * pixel_size; // read palettes\n\n      if (use_pal) {\n        palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n      } // read RLE\n\n\n      if (use_rle) {\n        pixel_data = new Uint8Array(pixel_total);\n        let c, count, i;\n        let shift = 0;\n        const pixels = new Uint8Array(pixel_size);\n\n        while (shift < pixel_total) {\n          c = data[offset++];\n          count = (c & 0x7f) + 1; // RLE pixels\n\n          if (c & 0x80) {\n            // bind pixel tmp array\n            for (i = 0; i < pixel_size; ++i) {\n              pixels[i] = data[offset++];\n            } // copy pixel array\n\n\n            for (i = 0; i < count; ++i) {\n              pixel_data.set(pixels, shift + i * pixel_size);\n            }\n\n            shift += pixel_size * count;\n          } else {\n            // raw pixels\n            count *= pixel_size;\n\n            for (i = 0; i < count; ++i) {\n              pixel_data[shift + i] = data[offset++];\n            }\n\n            shift += count;\n          }\n        }\n      } else {\n        // raw pixels\n        pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n      }\n\n      return {\n        pixel_data: pixel_data,\n        palettes: palettes\n      };\n    }\n\n    function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n      const colormap = palettes;\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n          imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n          imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n          imageData[(x + width * y) * 4 + 0] = (color & 0x7c00) >> 7;\n          imageData[(x + width * y) * 4 + 1] = (color & 0x03e0) >> 2;\n          imageData[(x + width * y) * 4 + 2] = (color & 0x001f) >> 3;\n          imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n          imageData[(x + width * y) * 4 + 3] = image[i + 3];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 0] = color;\n          imageData[(x + width * y) * 4 + 1] = color;\n          imageData[(x + width * y) * 4 + 2] = color;\n          imageData[(x + width * y) * 4 + 3] = 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          imageData[(x + width * y) * 4 + 0] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 0];\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 3] = image[i + 1];\n        }\n      }\n\n      return imageData;\n    }\n\n    function getTgaRGBA(data, width, height, image, palette) {\n      let x_start, y_start, x_step, y_step, x_end, y_end;\n\n      switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n        default:\n        case TGA_ORIGIN_UL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n\n        case TGA_ORIGIN_UR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n      }\n\n      if (use_grey) {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 16:\n            tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } else {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n            break;\n\n          case 16:\n            tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 24:\n            tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 32:\n            tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } // Load image data according to specific method\n      // let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n      // func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\n\n      return data;\n    } // TGA constants\n\n\n    const TGA_TYPE_NO_DATA = 0,\n          TGA_TYPE_INDEXED = 1,\n          TGA_TYPE_RGB = 2,\n          TGA_TYPE_GREY = 3,\n          TGA_TYPE_RLE_INDEXED = 9,\n          TGA_TYPE_RLE_RGB = 10,\n          TGA_TYPE_RLE_GREY = 11,\n          TGA_ORIGIN_MASK = 0x30,\n          TGA_ORIGIN_SHIFT = 0x04,\n          TGA_ORIGIN_BL = 0x00,\n          TGA_ORIGIN_BR = 0x01,\n          TGA_ORIGIN_UL = 0x02,\n          TGA_ORIGIN_UR = 0x03;\n    if (buffer.length < 19) console.error('THREE.TGALoader: Not enough data to contain header.');\n    let offset = 0;\n    const content = new Uint8Array(buffer),\n          header = {\n      id_length: content[offset++],\n      colormap_type: content[offset++],\n      image_type: content[offset++],\n      colormap_index: content[offset++] | content[offset++] << 8,\n      colormap_length: content[offset++] | content[offset++] << 8,\n      colormap_size: content[offset++],\n      origin: [content[offset++] | content[offset++] << 8, content[offset++] | content[offset++] << 8],\n      width: content[offset++] | content[offset++] << 8,\n      height: content[offset++] | content[offset++] << 8,\n      pixel_size: content[offset++],\n      flags: content[offset++]\n    }; // check tga if it is valid format\n\n    tgaCheckHeader(header);\n\n    if (header.id_length + offset > buffer.length) {\n      console.error('THREE.TGALoader: No data.');\n    } // skip the needn't data\n\n\n    offset += header.id_length; // get targa information about RLE compression and palette\n\n    let use_rle = false,\n        use_pal = false,\n        use_grey = false;\n\n    switch (header.image_type) {\n      case TGA_TYPE_RLE_INDEXED:\n        use_rle = true;\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_INDEXED:\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_RLE_RGB:\n        use_rle = true;\n        break;\n\n      case TGA_TYPE_RGB:\n        break;\n\n      case TGA_TYPE_RLE_GREY:\n        use_rle = true;\n        use_grey = true;\n        break;\n\n      case TGA_TYPE_GREY:\n        use_grey = true;\n        break;\n    } //\n\n\n    const imageData = new Uint8Array(header.width * header.height * 4);\n    const result = tgaParse(use_rle, use_pal, header, offset, content);\n    getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);\n    return {\n      data: imageData,\n      width: header.width,\n      height: header.height,\n      flipY: true,\n      generateMipmaps: true,\n      minFilter: LinearMipmapLinearFilter\n    };\n  }\n\n}\n\nexport { TGALoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}