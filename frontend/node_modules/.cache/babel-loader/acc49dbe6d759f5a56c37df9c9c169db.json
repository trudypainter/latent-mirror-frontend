{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, HalfFloatType, CubeTexture, LinearEncoding, LinearFilter, FloatType, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\nvar HDRCubeTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(HDRCubeTextureLoader, _Loader);\n  var _super = _createSuper(HDRCubeTextureLoader);\n  function HDRCubeTextureLoader(manager) {\n    var _this;\n    _classCallCheck(this, HDRCubeTextureLoader);\n    _this = _super.call(this, manager);\n    _this.hdrLoader = new RGBELoader();\n    _this.type = HalfFloatType;\n    return _this;\n  }\n  _createClass(HDRCubeTextureLoader, [{\n    key: \"load\",\n    value: function load(urls, onLoad, onProgress, onError) {\n      if (!Array.isArray(urls)) {\n        console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n        this.setDataType(urls);\n        urls = onLoad;\n        onLoad = onProgress;\n        onProgress = onError;\n        onError = arguments[4];\n      }\n      var texture = new CubeTexture();\n      texture.type = this.type;\n      switch (texture.type) {\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          break;\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          break;\n      }\n      var scope = this;\n      var loaded = 0;\n      function loadHDRData(i, onLoad, onProgress, onError) {\n        new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n          loaded++;\n          var texData = scope.hdrLoader.parse(buffer);\n          if (!texData) return;\n          if (texData.data !== undefined) {\n            var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad) onLoad(texture);\n          }\n        }, onProgress, onError);\n      }\n      for (var i = 0; i < urls.length; i++) {\n        loadHDRData(i, onLoad, onProgress, onError);\n      }\n      return texture;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      this.hdrLoader.setDataType(value);\n      return this;\n    }\n  }]);\n  return HDRCubeTextureLoader;\n}(Loader);\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["Loader","HalfFloatType","CubeTexture","LinearEncoding","LinearFilter","FloatType","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","manager","hdrLoader","type","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","load","buffer","texData","parse","data","undefined","dataTexture","width","height","format","images","needsUpdate","length","value"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import { Loader, HalfFloatType, CubeTexture, LinearEncoding, LinearFilter, FloatType, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}