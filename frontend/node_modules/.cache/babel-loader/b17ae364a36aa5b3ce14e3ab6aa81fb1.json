{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\nvar EdgeSplitModifier = /*#__PURE__*/_createClass(function EdgeSplitModifier() {\n  var _this = this;\n  _classCallCheck(this, EdgeSplitModifier);\n  _defineProperty(this, \"A\", new Vector3());\n  _defineProperty(this, \"B\", new Vector3());\n  _defineProperty(this, \"C\", new Vector3());\n  _defineProperty(this, \"positions\", []);\n  _defineProperty(this, \"normals\", new Float32Array());\n  _defineProperty(this, \"indexes\", []);\n  _defineProperty(this, \"pointToIndexMap\", []);\n  _defineProperty(this, \"splitIndexes\", []);\n  _defineProperty(this, \"oldNormals\", []);\n  _defineProperty(this, \"computeNormals\", function () {\n    _this.normals = new Float32Array(_this.indexes.length * 3);\n    for (var i = 0; i < _this.indexes.length; i += 3) {\n      var index = _this.indexes[i];\n      _this.A.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n      index = _this.indexes[i + 1];\n      _this.B.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n      index = _this.indexes[i + 2];\n      _this.C.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n      _this.C.sub(_this.B);\n      _this.A.sub(_this.B);\n      var normal = _this.C.cross(_this.A).normalize();\n      for (var j = 0; j < 3; j++) {\n        _this.normals[3 * (i + j)] = normal.x;\n        _this.normals[3 * (i + j) + 1] = normal.y;\n        _this.normals[3 * (i + j) + 2] = normal.z;\n      }\n    }\n  });\n  _defineProperty(this, \"mapPositionsToIndexes\", function () {\n    _this.pointToIndexMap = Array(_this.positions.length / 3);\n    for (var i = 0; i < _this.indexes.length; i++) {\n      var index = _this.indexes[i];\n      if (_this.pointToIndexMap[index] == null) {\n        _this.pointToIndexMap[index] = [];\n      }\n      _this.pointToIndexMap[index].push(i);\n    }\n  });\n  _defineProperty(this, \"edgeSplitToGroups\", function (indexes, cutOff, firstIndex) {\n    _this.A.set(_this.normals[3 * firstIndex], _this.normals[3 * firstIndex + 1], _this.normals[3 * firstIndex + 2]).normalize();\n    var result = {\n      splitGroup: [],\n      currentGroup: [firstIndex]\n    };\n    var _iterator = _createForOfIteratorHelper(indexes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var j = _step.value;\n        if (j !== firstIndex) {\n          _this.B.set(_this.normals[3 * j], _this.normals[3 * j + 1], _this.normals[3 * j + 2]).normalize();\n          if (_this.B.dot(_this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return result;\n  });\n  _defineProperty(this, \"edgeSplit\", function (indexes, cutOff) {\n    var original = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (indexes.length === 0) return;\n    var groupResults = [];\n    var _iterator2 = _createForOfIteratorHelper(indexes),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var index = _step2.value;\n        groupResults.push(_this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var result = groupResults[0];\n    for (var _i = 0, _groupResults = groupResults; _i < _groupResults.length; _i++) {\n      var groupResult = _groupResults[_i];\n      if (groupResult.currentGroup.length > result.currentGroup.length) {\n        result = groupResult;\n      }\n    }\n    if (original != null) {\n      _this.splitIndexes.push({\n        original: original,\n        indexes: result.currentGroup\n      });\n    }\n    if (result.splitGroup.length) {\n      _this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n    }\n  });\n  _defineProperty(this, \"modify\", function (geometry, cutOffAngle) {\n    var tryKeepNormals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var hadNormals = false;\n    if (geometry.attributes.normal) {\n      hadNormals = true;\n      geometry = geometry.clone();\n      if (tryKeepNormals === true && geometry.index !== null) {\n        _this.oldNormals = geometry.attributes.normal.array;\n      }\n      geometry.deleteAttribute('normal');\n    }\n    if (geometry.index == null) {\n      if (BufferGeometryUtils === undefined) {\n        throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n      }\n      geometry = mergeVertices(geometry);\n    }\n    _this.indexes = geometry.index.array;\n    _this.positions = geometry.getAttribute('position').array;\n    _this.computeNormals();\n    _this.mapPositionsToIndexes();\n    _this.splitIndexes = [];\n    var _iterator3 = _createForOfIteratorHelper(_this.pointToIndexMap),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var vertexIndexes = _step3.value;\n        _this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    var newAttributes = {};\n    for (var _i2 = 0, _Object$keys = Object.keys(geometry.attributes); _i2 < _Object$keys.length; _i2++) {\n      var name = _Object$keys[_i2];\n      var oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n      var newArray = new oldAttribute.array.constructor((_this.indexes.length + _this.splitIndexes.length) * oldAttribute.itemSize);\n      newArray.set(oldAttribute.array);\n      newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n    }\n    var newIndexes = new Uint32Array(_this.indexes.length);\n    newIndexes.set(_this.indexes);\n    for (var i = 0; i < _this.splitIndexes.length; i++) {\n      var split = _this.splitIndexes[i];\n      var index = _this.indexes[split.original];\n      for (var _i3 = 0, _Object$values = Object.values(newAttributes); _i3 < _Object$values.length; _i3++) {\n        var attribute = _Object$values[_i3];\n        for (var j = 0; j < attribute.itemSize; j++) {\n          // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n          attribute.array[(_this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n        }\n      }\n      var _iterator4 = _createForOfIteratorHelper(split.indexes),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _j = _step4.value;\n          newIndexes[_j] = _this.indexes.length + i;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n    geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(newIndexes, 1));\n    for (var _i4 = 0, _Object$keys2 = Object.keys(newAttributes); _i4 < _Object$keys2.length; _i4++) {\n      var _name = _Object$keys2[_i4];\n      geometry.setAttribute(_name, newAttributes[_name]);\n    }\n    if (hadNormals) {\n      geometry.computeVertexNormals();\n      if (_this.oldNormals !== null) {\n        var changedNormals = new Array(_this.oldNormals.length / 3).fill(false);\n        var _iterator5 = _createForOfIteratorHelper(_this.splitIndexes),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var splitData = _step5.value;\n            changedNormals[splitData.original] = true;\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        for (var _i5 = 0; _i5 < changedNormals.length; _i5++) {\n          if (changedNormals[_i5] === false) {\n            for (var _j2 = 0; _j2 < 3; _j2++) {\n              // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n              geometry.attributes.normal.array[3 * _i5 + _j2] = _this.oldNormals[3 * _i5 + _j2];\n            }\n          }\n        }\n      }\n    }\n    return geometry;\n  });\n});\nexport { EdgeSplitModifier };","map":{"version":3,"names":["_defineProperty","Vector3","BufferAttribute","BufferGeometry","BufferGeometryUtils","mergeVertices","EdgeSplitModifier","Float32Array","normals","indexes","length","i","index","A","set","positions","B","C","sub","normal","cross","normalize","j","x","y","z","pointToIndexMap","Array","push","cutOff","firstIndex","result","splitGroup","currentGroup","dot","original","groupResults","edgeSplitToGroups","groupResult","splitIndexes","edgeSplit","geometry","cutOffAngle","tryKeepNormals","hadNormals","attributes","clone","oldNormals","array","deleteAttribute","undefined","getAttribute","computeNormals","mapPositionsToIndexes","vertexIndexes","Math","cos","newAttributes","Object","keys","name","oldAttribute","newArray","constructor","itemSize","normalized","newIndexes","Uint32Array","split","values","attribute","setIndex","setAttribute","computeVertexNormals","changedNormals","fill","splitData"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/modifiers/EdgeSplitModifier.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\n\nclass EdgeSplitModifier {\n  constructor() {\n    _defineProperty(this, \"A\", new Vector3());\n\n    _defineProperty(this, \"B\", new Vector3());\n\n    _defineProperty(this, \"C\", new Vector3());\n\n    _defineProperty(this, \"positions\", []);\n\n    _defineProperty(this, \"normals\", new Float32Array());\n\n    _defineProperty(this, \"indexes\", []);\n\n    _defineProperty(this, \"pointToIndexMap\", []);\n\n    _defineProperty(this, \"splitIndexes\", []);\n\n    _defineProperty(this, \"oldNormals\", []);\n\n    _defineProperty(this, \"computeNormals\", () => {\n      this.normals = new Float32Array(this.indexes.length * 3);\n\n      for (let i = 0; i < this.indexes.length; i += 3) {\n        let index = this.indexes[i];\n        this.A.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 1];\n        this.B.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 2];\n        this.C.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        this.C.sub(this.B);\n        this.A.sub(this.B);\n        const normal = this.C.cross(this.A).normalize();\n\n        for (let j = 0; j < 3; j++) {\n          this.normals[3 * (i + j)] = normal.x;\n          this.normals[3 * (i + j) + 1] = normal.y;\n          this.normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    });\n\n    _defineProperty(this, \"mapPositionsToIndexes\", () => {\n      this.pointToIndexMap = Array(this.positions.length / 3);\n\n      for (let i = 0; i < this.indexes.length; i++) {\n        const index = this.indexes[i];\n\n        if (this.pointToIndexMap[index] == null) {\n          this.pointToIndexMap[index] = [];\n        }\n\n        this.pointToIndexMap[index].push(i);\n      }\n    });\n\n    _defineProperty(this, \"edgeSplitToGroups\", (indexes, cutOff, firstIndex) => {\n      this.A.set(this.normals[3 * firstIndex], this.normals[3 * firstIndex + 1], this.normals[3 * firstIndex + 2]).normalize();\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n\n      for (let j of indexes) {\n        if (j !== firstIndex) {\n          this.B.set(this.normals[3 * j], this.normals[3 * j + 1], this.normals[3 * j + 2]).normalize();\n\n          if (this.B.dot(this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n\n      return result;\n    });\n\n    _defineProperty(this, \"edgeSplit\", (indexes, cutOff, original = null) => {\n      if (indexes.length === 0) return;\n      const groupResults = [];\n\n      for (let index of indexes) {\n        groupResults.push(this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n\n      let result = groupResults[0];\n\n      for (let groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n\n      if (original != null) {\n        this.splitIndexes.push({\n          original,\n          indexes: result.currentGroup\n        });\n      }\n\n      if (result.splitGroup.length) {\n        this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    });\n\n    _defineProperty(this, \"modify\", (geometry, cutOffAngle, tryKeepNormals = true) => {\n      let hadNormals = false;\n\n      if (geometry.attributes.normal) {\n        hadNormals = true;\n        geometry = geometry.clone();\n\n        if (tryKeepNormals === true && geometry.index !== null) {\n          this.oldNormals = geometry.attributes.normal.array;\n        }\n\n        geometry.deleteAttribute('normal');\n      }\n\n      if (geometry.index == null) {\n        if (BufferGeometryUtils === undefined) {\n          throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n        }\n\n        geometry = mergeVertices(geometry);\n      }\n\n      this.indexes = geometry.index.array;\n      this.positions = geometry.getAttribute('position').array;\n      this.computeNormals();\n      this.mapPositionsToIndexes();\n      this.splitIndexes = [];\n\n      for (let vertexIndexes of this.pointToIndexMap) {\n        this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n\n      const newAttributes = {};\n\n      for (let name of Object.keys(geometry.attributes)) {\n        const oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n        const newArray = new oldAttribute.array.constructor((this.indexes.length + this.splitIndexes.length) * oldAttribute.itemSize);\n        newArray.set(oldAttribute.array);\n        newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n      }\n\n      const newIndexes = new Uint32Array(this.indexes.length);\n      newIndexes.set(this.indexes);\n\n      for (let i = 0; i < this.splitIndexes.length; i++) {\n        const split = this.splitIndexes[i];\n        const index = this.indexes[split.original];\n\n        for (let attribute of Object.values(newAttributes)) {\n          for (let j = 0; j < attribute.itemSize; j++) {\n            // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n            attribute.array[(this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n          }\n        }\n\n        for (let j of split.indexes) {\n          newIndexes[j] = this.indexes.length + i;\n        }\n      }\n\n      geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n      for (let name of Object.keys(newAttributes)) {\n        geometry.setAttribute(name, newAttributes[name]);\n      }\n\n      if (hadNormals) {\n        geometry.computeVertexNormals();\n\n        if (this.oldNormals !== null) {\n          const changedNormals = new Array(this.oldNormals.length / 3).fill(false);\n\n          for (let splitData of this.splitIndexes) changedNormals[splitData.original] = true;\n\n          for (let i = 0; i < changedNormals.length; i++) {\n            if (changedNormals[i] === false) {\n              for (let j = 0; j < 3; j++) {\n                // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n                geometry.attributes.normal.array[3 * i + j] = this.oldNormals[3 * i + j];\n              }\n            }\n          }\n        }\n      }\n\n      return geometry;\n    });\n  }\n\n}\n\nexport { EdgeSplitModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}