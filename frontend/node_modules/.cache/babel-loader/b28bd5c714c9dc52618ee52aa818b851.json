{"ast":null,"code":"import { forwardRef, useRef, useMemo, useState, createElement } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: \"uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader: \"uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n      }\"\n    });\n  }\n}\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nconst Stars = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    radius = 100,\n    depth = 50,\n    count = 5000,\n    saturation = 0,\n    factor = 4,\n    fade = false\n  } = _ref;\n  const material = useRef();\n  const [position, color, size] = useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"names":["forwardRef","useRef","useMemo","useState","createElement","useFrame","Color","Vector3","Spherical","AdditiveBlending","ShaderMaterial","StarfieldMaterial","constructor","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","ref","radius","depth","count","saturation","factor","material","position","color","size","positions","colors","sizes","Array","from","length","increment","i","push","toArray","setHSL","g","b","Float32Array","state","current","clock","getElapsedTime","starfieldMaterial","attach","attachObject","args","dispose","undefined","object","blending","transparent","vertexColors"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/drei/Stars.js"],"sourcesContent":["import { forwardRef, useRef, useMemo, useState, createElement } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: \"uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader: \"uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n      }\"\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false\n}, ref) => {\n  const material = useRef();\n  const [position, color, size] = useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}