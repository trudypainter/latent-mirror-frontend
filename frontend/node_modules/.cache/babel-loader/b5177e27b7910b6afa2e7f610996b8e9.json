{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, MathUtils, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three';\n\n//trackball state\nvar STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nvar INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nvar _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nvar _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nvar _changeEvent = {\n  type: 'change'\n};\nvar _startEvent = {\n  type: 'start'\n};\nvar _endEvent = {\n  type: 'end'\n};\n/**\n *\n * @param {CamOrthographicCamera | PerspectiveCameraera} camera Virtual camera used in the scene\n * @param {HTMLElement=null} domElement Renderer's dom element\n * @param {Scene=null} scene The scene to be rendered\n */\nvar ArcballControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(ArcballControls, _EventDispatcher);\n  var _super = _createSuper(ArcballControls);\n  function ArcballControls(_camera) {\n    var _this;\n    var _domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var scene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, ArcballControls);\n    _this = _super.call(this);\n    _defineProperty(_assertThisInitialized(_this), \"camera\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"domElement\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"scene\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"mouseActions\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_mouseOp\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_v2_1\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_v3_1\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_v3_2\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_m4_1\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_m4_2\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_quat\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_translationMatrix\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_rotationMatrix\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_scaleMatrix\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_rotationAxis\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_cameraMatrixState\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_cameraProjectionState\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_fovState\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_upState\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_zoomState\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_nearPos\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_farPos\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_gizmoMatrixState\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_up0\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_zoom0\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_fov0\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_initialNear\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_nearPos0\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_initialFar\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_farPos0\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_cameraMatrixState0\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_gizmoMatrixState0\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_button\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_touchStart\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_touchCurrent\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_input\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_switchSensibility\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_startFingerDistance\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_currentFingerDistance\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_startFingerRotation\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_currentFingerRotation\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_devPxRatio\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_downValid\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_nclicks\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_downEvents\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_clickStart\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_maxDownTime\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_maxInterval\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_posThreshold\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_movementThreshold\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_currentCursorPosition\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_startCursorPosition\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_grid\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_gridPosition\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_gizmos\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_curvePts\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_timeStart\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_animationId\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"focusAnimationTime\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_timePrev\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_timeCurrent\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_anglePrev\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_angleCurrent\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_cursorPosPrev\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_cursorPosCurr\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_wPrev\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_wCurr\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"adjustNearFar\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"scaleFactor\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"dampingFactor\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"wMax\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"enableAnimations\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"enableGrid\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"cursorZoom\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"minFov\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"maxFov\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"enabled\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"enablePan\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"enableRotate\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"enableZoom\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"minDistance\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"maxDistance\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"minZoom\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"maxZoom\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"target\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_currentTarget\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_tbRadius\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_state\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"onWindowResize\", function () {\n      var scale = (_this._gizmos.scale.x + _this._gizmos.scale.y + _this._gizmos.scale.z) / 3;\n      if (_this.camera) {\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n      }\n      var newRadius = _this._tbRadius / scale; // @ts-expect-error\n\n      var curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      var points = curve.getPoints(_this._curvePts);\n      var curveGeometry = new BufferGeometry().setFromPoints(points);\n      for (var gizmo in _this._gizmos.children) {\n        var child = _this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n      _this.dispatchEvent(_changeEvent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onContextMenu\", function (event) {\n      if (!_this.enabled) {\n        return;\n      }\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        if (_this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerCancel\", function () {\n      _this._touchStart.splice(0, _this._touchStart.length);\n      _this._touchCurrent.splice(0, _this._touchCurrent.length);\n      _this._input = INPUT.NONE;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerDown\", function (event) {\n      if (event.button == 0 && event.isPrimary) {\n        _this._downValid = true;\n        _this._downEvents.push(event);\n      } else {\n        _this._downValid = false;\n      }\n      if (event.pointerType == 'touch' && _this._input != INPUT.CURSOR) {\n        _this._touchStart.push(event);\n        _this._touchCurrent.push(event);\n        switch (_this._input) {\n          case INPUT.NONE:\n            //singleStart\n            _this._input = INPUT.ONE_FINGER;\n            _this.onSinglePanStart(event, 'ROTATE');\n            window.addEventListener('pointermove', _this.onPointerMove);\n            window.addEventListener('pointerup', _this.onPointerUp);\n            break;\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            _this._input = INPUT.TWO_FINGER;\n            _this.onRotateStart();\n            _this.onPinchStart();\n            _this.onDoublePanStart();\n            break;\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            _this._input = INPUT.MULT_FINGER;\n            _this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && _this._input == INPUT.NONE) {\n        var modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n        _this._mouseOp = _this.getOpFromAction(event.button, modifier);\n        if (_this._mouseOp) {\n          window.addEventListener('pointermove', _this.onPointerMove);\n          window.addEventListener('pointerup', _this.onPointerUp); //singleStart\n\n          _this._input = INPUT.CURSOR;\n          _this._button = event.button;\n          _this.onSinglePanStart(event, _this._mouseOp);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerMove\", function (event) {\n      if (event.pointerType == 'touch' && _this._input != INPUT.CURSOR) {\n        switch (_this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            _this.updateTouchEvent(event);\n            _this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n          case INPUT.ONE_FINGER_SWITCHED:\n            var movement = _this.calculatePointersDistance(_this._touchCurrent[0], event) * _this._devPxRatio;\n            if (movement >= _this._switchSensibility) {\n              //singleMove\n              _this._input = INPUT.ONE_FINGER;\n              _this.updateTouchEvent(event);\n              _this.onSinglePanStart(event, 'ROTATE');\n              break;\n            }\n            break;\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            _this.updateTouchEvent(event);\n            _this.onRotateMove();\n            _this.onPinchMove();\n            _this.onDoublePanMove();\n            break;\n          case INPUT.MULT_FINGER:\n            //multMove\n            _this.updateTouchEvent(event);\n            _this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && _this._input == INPUT.CURSOR) {\n        var modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n        var mouseOpState = _this.getOpStateFromAction(_this._button, modifier);\n        if (mouseOpState) {\n          _this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n      if (_this._downValid) {\n        var _movement = _this.calculatePointersDistance(_this._downEvents[_this._downEvents.length - 1], event) * _this._devPxRatio;\n        if (_movement > _this._movementThreshold) {\n          _this._downValid = false;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPointerUp\", function (event) {\n      if (event.pointerType == 'touch' && _this._input != INPUT.CURSOR) {\n        var nTouch = _this._touchCurrent.length;\n        for (var i = 0; i < nTouch; i++) {\n          if (_this._touchCurrent[i].pointerId == event.pointerId) {\n            _this._touchCurrent.splice(i, 1);\n            _this._touchStart.splice(i, 1);\n            break;\n          }\n        }\n        switch (_this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', _this.onPointerMove);\n            window.removeEventListener('pointerup', _this.onPointerUp);\n            _this._input = INPUT.NONE;\n            _this.onSinglePanEnd();\n            break;\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            _this.onDoublePanEnd();\n            _this.onPinchEnd();\n            _this.onRotateEnd(); //switching to singleStart\n\n            _this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n          case INPUT.MULT_FINGER:\n            if (_this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', _this.onPointerMove);\n              window.removeEventListener('pointerup', _this.onPointerUp); //multCancel\n\n              _this._input = INPUT.NONE;\n              _this.onTriplePanEnd();\n            }\n            break;\n        }\n      } else if (event.pointerType != 'touch' && _this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', _this.onPointerMove);\n        window.removeEventListener('pointerup', _this.onPointerUp);\n        _this._input = INPUT.NONE;\n        _this.onSinglePanEnd();\n        _this._button = -1;\n      }\n      if (event.isPrimary) {\n        if (_this._downValid) {\n          var downTime = event.timeStamp - _this._downEvents[_this._downEvents.length - 1].timeStamp;\n          if (downTime <= _this._maxDownTime) {\n            if (_this._nclicks == 0) {\n              //first valid click detected\n              _this._nclicks = 1;\n              _this._clickStart = performance.now();\n            } else {\n              var clickInterval = event.timeStamp - _this._clickStart;\n              var movement = _this.calculatePointersDistance(_this._downEvents[1], _this._downEvents[0]) * _this._devPxRatio;\n              if (clickInterval <= _this._maxInterval && movement <= _this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                _this._nclicks = 0;\n                _this._downEvents.splice(0, _this._downEvents.length);\n                _this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                _this._nclicks = 1;\n                _this._downEvents.shift();\n                _this._clickStart = performance.now();\n              }\n            }\n          } else {\n            _this._downValid = false;\n            _this._nclicks = 0;\n            _this._downEvents.splice(0, _this._downEvents.length);\n          }\n        } else {\n          _this._nclicks = 0;\n          _this._downEvents.splice(0, _this._downEvents.length);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onWheel\", function (event) {\n      var _this$camera3;\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        var modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n        var mouseOp = _this.getOpFromAction('WHEEL', modifier);\n        if (mouseOp) {\n          event.preventDefault();\n          _this.dispatchEvent(_startEvent);\n          var notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          var sgn = event.deltaY / notchDeltaY;\n          var size = 1;\n          if (sgn > 0) {\n            size = 1 / _this.scaleFactor;\n          } else if (sgn < 0) {\n            size = _this.scaleFactor;\n          }\n          switch (mouseOp) {\n            case 'ZOOM':\n              _this.updateTbState(STATE.SCALE, true);\n              if (sgn > 0) {\n                size = 1 / Math.pow(_this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(_this.scaleFactor, -sgn);\n              }\n              if (_this.cursorZoom && _this.enablePan) {\n                var _this$camera, _this$camera2;\n                var scalePoint;\n                if (((_this$camera = _this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.type) === 'OrthographicCamera') {\n                  var _this$unprojectOnTbPl;\n                  scalePoint = (_this$unprojectOnTbPl = _this.unprojectOnTbPlane(_this.camera, event.clientX, event.clientY, _this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._gizmos.position);\n                }\n                if (((_this$camera2 = _this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.type) === 'PerspectiveCamera') {\n                  var _this$unprojectOnTbPl2;\n                  scalePoint = (_this$unprojectOnTbPl2 = _this.unprojectOnTbPlane(_this.camera, event.clientX, event.clientY, _this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(_this.camera.quaternion).add(_this._gizmos.position);\n                }\n                if (scalePoint !== undefined) _this.applyTransformMatrix(_this.applyScale(size, scalePoint));\n              } else {\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n              }\n              if (_this._grid) {\n                _this.disposeGrid();\n                _this.drawGrid();\n              }\n              _this.updateTbState(STATE.IDLE, false);\n              _this.dispatchEvent(_changeEvent);\n              _this.dispatchEvent(_endEvent);\n              break;\n            case 'FOV':\n              if (((_this$camera3 = _this.camera) === null || _this$camera3 === void 0 ? void 0 : _this$camera3.type) === 'PerspectiveCamera') {\n                _this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(_this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(_this.scaleFactor, -sgn);\n                  }\n                }\n                _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n                var x = _this._v3_1.distanceTo(_this._gizmos.position);\n                var xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n                var y = x * Math.tan(MathUtils.DEG2RAD * _this.camera.fov * 0.5); //calculate new fov\n\n                var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > _this.maxFov) {\n                  newFov = _this.maxFov;\n                } else if (newFov < _this.minFov) {\n                  newFov = _this.minFov;\n                }\n                var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                _this.setFov(newFov);\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position, false));\n              }\n              if (_this._grid) {\n                _this.disposeGrid();\n                _this.drawGrid();\n              }\n              _this.updateTbState(STATE.IDLE, false);\n              _this.dispatchEvent(_changeEvent);\n              _this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSinglePanStart\", function (event, operation) {\n      var _this$camera4;\n      if (_this.enabled && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n        _this.setCenter(event.clientX, event.clientY);\n        switch (operation) {\n          case 'PAN':\n            if (!_this.enablePan) return;\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n              _this.activateGizmos(false);\n              _this.dispatchEvent(_changeEvent);\n            }\n            if (_this.camera) {\n              _this.updateTbState(STATE.PAN, true);\n              var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n              if (rayDir !== undefined) {\n                _this._startCursorPosition.copy(rayDir);\n              }\n              if (_this.enableGrid) {\n                _this.drawGrid();\n                _this.dispatchEvent(_changeEvent);\n              }\n            }\n            break;\n          case 'ROTATE':\n            if (!_this.enableRotate) return;\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n            }\n            if (_this.camera) {\n              _this.updateTbState(STATE.ROTATE, true);\n              var _rayDir = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n              if (_rayDir !== undefined) {\n                _this._startCursorPosition.copy(_rayDir);\n              }\n              _this.activateGizmos(true);\n              if (_this.enableAnimations) {\n                _this._timePrev = _this._timeCurrent = performance.now();\n                _this._angleCurrent = _this._anglePrev = 0;\n                _this._cursorPosPrev.copy(_this._startCursorPosition);\n                _this._cursorPosCurr.copy(_this._cursorPosPrev);\n                _this._wCurr = 0;\n                _this._wPrev = _this._wCurr;\n              }\n            }\n            _this.dispatchEvent(_changeEvent);\n            break;\n          case 'FOV':\n            if (!_this.enableZoom) return;\n            if (((_this$camera4 = _this.camera) === null || _this$camera4 === void 0 ? void 0 : _this$camera4.type) === 'PerspectiveCamera') {\n              if (_this._animationId != -1) {\n                cancelAnimationFrame(_this._animationId);\n                _this._animationId = -1;\n                _this._timeStart = -1;\n                _this.activateGizmos(false);\n                _this.dispatchEvent(_changeEvent);\n              }\n              _this.updateTbState(STATE.FOV, true);\n              _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n              _this._currentCursorPosition.copy(_this._startCursorPosition);\n            }\n            break;\n          case 'ZOOM':\n            if (!_this.enableZoom) return;\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n              _this.activateGizmos(false);\n              _this.dispatchEvent(_changeEvent);\n            }\n            _this.updateTbState(STATE.SCALE, true);\n            _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n            _this._currentCursorPosition.copy(_this._startCursorPosition);\n            break;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSinglePanMove\", function (event, opState) {\n      var _this$camera5;\n      if (_this.enabled && _this.domElement) {\n        var restart = opState != _this._state;\n        _this.setCenter(event.clientX, event.clientY);\n        switch (opState) {\n          case STATE.PAN:\n            if (_this.enablePan && _this.camera) {\n              if (restart) {\n                //switch to pan operation\n                _this.dispatchEvent(_endEvent);\n                _this.dispatchEvent(_startEvent);\n                _this.updateTbState(opState, true);\n                var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n                if (rayDir !== undefined) {\n                  _this._startCursorPosition.copy(rayDir);\n                }\n                if (_this.enableGrid) {\n                  _this.drawGrid();\n                }\n                _this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                var _rayDir2 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n                if (_rayDir2 !== undefined) {\n                  _this._currentCursorPosition.copy(_rayDir2);\n                }\n                _this.applyTransformMatrix(_this.pan(_this._startCursorPosition, _this._currentCursorPosition));\n              }\n            }\n            break;\n          case STATE.ROTATE:\n            if (_this.enableRotate && _this.camera) {\n              if (restart) {\n                //switch to rotate operation\n                _this.dispatchEvent(_endEvent);\n                _this.dispatchEvent(_startEvent);\n                _this.updateTbState(opState, true);\n                var _rayDir3 = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n                if (_rayDir3 !== undefined) {\n                  _this._startCursorPosition.copy(_rayDir3);\n                }\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n                _this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                var _rayDir4 = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n                if (_rayDir4 !== undefined) {\n                  _this._currentCursorPosition.copy(_rayDir4);\n                }\n                var distance = _this._startCursorPosition.distanceTo(_this._currentCursorPosition);\n                var angle = _this._startCursorPosition.angleTo(_this._currentCursorPosition);\n                var amount = Math.max(distance / _this._tbRadius, angle); //effective rotation angle\n\n                _this.applyTransformMatrix(_this.rotate(_this.calculateRotationAxis(_this._startCursorPosition, _this._currentCursorPosition), amount));\n                if (_this.enableAnimations) {\n                  _this._timePrev = _this._timeCurrent;\n                  _this._timeCurrent = performance.now();\n                  _this._anglePrev = _this._angleCurrent;\n                  _this._angleCurrent = amount;\n                  _this._cursorPosPrev.copy(_this._cursorPosCurr);\n                  _this._cursorPosCurr.copy(_this._currentCursorPosition);\n                  _this._wPrev = _this._wCurr;\n                  _this._wCurr = _this.calculateAngularSpeed(_this._anglePrev, _this._angleCurrent, _this._timePrev, _this._timeCurrent);\n                }\n              }\n            }\n            break;\n          case STATE.SCALE:\n            if (_this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                _this.dispatchEvent(_endEvent);\n                _this.dispatchEvent(_startEvent);\n                _this.updateTbState(opState, true);\n                _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n                _this._currentCursorPosition.copy(_this._startCursorPosition);\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n                _this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                var screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n                var movement = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n                var size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(_this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(_this.scaleFactor, movement * screenNotches);\n                }\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n              }\n            }\n            break;\n          case STATE.FOV:\n            if (_this.enableZoom && ((_this$camera5 = _this.camera) === null || _this$camera5 === void 0 ? void 0 : _this$camera5.type) === 'PerspectiveCamera') {\n              if (restart) {\n                //switch to fov operation\n                _this.dispatchEvent(_endEvent);\n                _this.dispatchEvent(_startEvent);\n                _this.updateTbState(opState, true);\n                _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n                _this._currentCursorPosition.copy(_this._startCursorPosition);\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n                _this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                var _screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n                var _movement2 = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n                var _size = 1;\n                if (_movement2 < 0) {\n                  _size = 1 / Math.pow(_this.scaleFactor, -_movement2 * _screenNotches);\n                } else if (_movement2 > 0) {\n                  _size = Math.pow(_this.scaleFactor, _movement2 * _screenNotches);\n                }\n                _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n                var x = _this._v3_1.distanceTo(_this._gizmos.position);\n                var xNew = x / _size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n                var y = x * Math.tan(MathUtils.DEG2RAD * _this._fovState * 0.5); //calculate new fov\n\n                var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, _this.minFov, _this.maxFov);\n                var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                _size = x / newDistance;\n                _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n                _this.setFov(newFov);\n                _this.applyTransformMatrix(_this.applyScale(_size, _this._v3_2, false)); //adjusting distance\n\n                var direction = _this._gizmos.position.clone().sub(_this.camera.position).normalize().multiplyScalar(newDistance / x);\n                _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n            break;\n        }\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSinglePanEnd\", function () {\n      if (_this._state == STATE.ROTATE) {\n        if (!_this.enableRotate) {\n          return;\n        }\n        if (_this.enableAnimations) {\n          //perform rotation animation\n          var deltaTime = performance.now() - _this._timeCurrent;\n          if (deltaTime < 120) {\n            var w = Math.abs((_this._wPrev + _this._wCurr) / 2);\n            var self = _assertThisInitialized(_this);\n            _this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              var rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            _this.updateTbState(STATE.IDLE, false);\n            _this.activateGizmos(false);\n            _this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          _this.updateTbState(STATE.IDLE, false);\n          _this.activateGizmos(false);\n          _this.dispatchEvent(_changeEvent);\n        }\n      } else if (_this._state == STATE.PAN || _this._state == STATE.IDLE) {\n        _this.updateTbState(STATE.IDLE, false);\n        if (_this.enableGrid) {\n          _this.disposeGrid();\n        }\n        _this.activateGizmos(false);\n        _this.dispatchEvent(_changeEvent);\n      }\n      _this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDoubleTap\", function (event) {\n      if (_this.enabled && _this.enablePan && _this.scene && _this.camera && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n        _this.setCenter(event.clientX, event.clientY);\n        var hitP = _this.unprojectOnObj(_this.getCursorNDC(_center.x, _center.y, _this.domElement), _this.camera);\n        if (hitP && _this.enableAnimations) {\n          var self = _assertThisInitialized(_this);\n          if (_this._animationId != -1) {\n            window.cancelAnimationFrame(_this._animationId);\n          }\n          _this._timeStart = -1;\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !_this.enableAnimations) {\n          _this.updateTbState(STATE.FOCUS, true);\n          _this.focus(hitP, _this.scaleFactor);\n          _this.updateTbState(STATE.IDLE, false);\n          _this.dispatchEvent(_changeEvent);\n        }\n      }\n      _this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDoublePanStart\", function () {\n      if (_this.enabled && _this.enablePan && _this.camera && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n        _this.updateTbState(STATE.PAN, true);\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n        var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement, true);\n        if (rayDir !== undefined) {\n          _this._startCursorPosition.copy(rayDir);\n        }\n        _this._currentCursorPosition.copy(_this._startCursorPosition);\n        _this.activateGizmos(false);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDoublePanMove\", function () {\n      if (_this.enabled && _this.enablePan && _this.camera && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n        if (_this._state != STATE.PAN) {\n          _this.updateTbState(STATE.PAN, true);\n          _this._startCursorPosition.copy(_this._currentCursorPosition);\n        }\n        var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement, true);\n        if (rayDir !== undefined) _this._currentCursorPosition.copy(rayDir);\n        _this.applyTransformMatrix(_this.pan(_this._startCursorPosition, _this._currentCursorPosition, true));\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDoublePanEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n      _this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onRotateStart\", function () {\n      if (_this.enabled && _this.enableRotate) {\n        var _this$camera6;\n        _this.dispatchEvent(_startEvent);\n        _this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n        _this._startFingerRotation = _this.getAngle(_this._touchCurrent[1], _this._touchCurrent[0]) + _this.getAngle(_this._touchStart[1], _this._touchStart[0]);\n        _this._currentFingerRotation = _this._startFingerRotation;\n        (_this$camera6 = _this.camera) === null || _this$camera6 === void 0 ? void 0 : _this$camera6.getWorldDirection(_this._rotationAxis); //rotation axis\n\n        if (!_this.enablePan && !_this.enableZoom) {\n          _this.activateGizmos(true);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onRotateMove\", function () {\n      if (_this.enabled && _this.enableRotate && _this.camera && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n        var rotationPoint;\n        if (_this._state != STATE.ZROTATE) {\n          _this.updateTbState(STATE.ZROTATE, true);\n          _this._startFingerRotation = _this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n        _this._currentFingerRotation = _this.getAngle(_this._touchCurrent[1], _this._touchCurrent[0]) + _this.getAngle(_this._touchStart[1], _this._touchStart[0]);\n        if (!_this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(_this._gizmoMatrixState);\n        } else if (_this.camera) {\n          var _this$unprojectOnTbPl3;\n          _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n          rotationPoint = (_this$unprojectOnTbPl3 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._v3_2);\n        }\n        var amount = MathUtils.DEG2RAD * (_this._startFingerRotation - _this._currentFingerRotation);\n        if (rotationPoint !== undefined) {\n          _this.applyTransformMatrix(_this.zRotate(rotationPoint, amount));\n        }\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onRotateEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n      _this.activateGizmos(false);\n      _this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPinchStart\", function () {\n      if (_this.enabled && _this.enableZoom) {\n        _this.dispatchEvent(_startEvent);\n        _this.updateTbState(STATE.SCALE, true);\n        _this._startFingerDistance = _this.calculatePointersDistance(_this._touchCurrent[0], _this._touchCurrent[1]);\n        _this._currentFingerDistance = _this._startFingerDistance;\n        _this.activateGizmos(false);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPinchMove\", function () {\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n        var minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (_this._state != STATE.SCALE) {\n          _this._startFingerDistance = _this._currentFingerDistance;\n          _this.updateTbState(STATE.SCALE, true);\n        }\n        _this._currentFingerDistance = Math.max(_this.calculatePointersDistance(_this._touchCurrent[0], _this._touchCurrent[1]), minDistance * _this._devPxRatio);\n        var amount = _this._currentFingerDistance / _this._startFingerDistance;\n        var scalePoint;\n        if (!_this.enablePan) {\n          scalePoint = _this._gizmos.position;\n        } else {\n          var _this$camera7, _this$camera8;\n          if (((_this$camera7 = _this.camera) === null || _this$camera7 === void 0 ? void 0 : _this$camera7.type) === 'OrthographicCamera') {\n            var _this$unprojectOnTbPl4;\n            scalePoint = (_this$unprojectOnTbPl4 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._gizmos.position);\n          } else if (((_this$camera8 = _this.camera) === null || _this$camera8 === void 0 ? void 0 : _this$camera8.type) === 'PerspectiveCamera') {\n            var _this$unprojectOnTbPl5;\n            scalePoint = (_this$unprojectOnTbPl5 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(_this.camera.quaternion).add(_this._gizmos.position);\n          }\n        }\n        if (scalePoint !== undefined) {\n          _this.applyTransformMatrix(_this.applyScale(amount, scalePoint));\n        }\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPinchEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n      _this.dispatchEvent(_endEvent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTriplePanStart\", function () {\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n        _this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n        var clientX = 0;\n        var clientY = 0;\n        var nFingers = _this._touchCurrent.length;\n        for (var i = 0; i < nFingers; i++) {\n          clientX += _this._touchCurrent[i].clientX;\n          clientY += _this._touchCurrent[i].clientY;\n        }\n        _this.setCenter(clientX / nFingers, clientY / nFingers);\n        _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n        _this._currentCursorPosition.copy(_this._startCursorPosition);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTriplePanMove\", function () {\n      if (_this.enabled && _this.enableZoom && _this.camera && _this.domElement) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        var clientX = 0;\n        var clientY = 0;\n        var nFingers = _this._touchCurrent.length;\n        for (var i = 0; i < nFingers; i++) {\n          clientX += _this._touchCurrent[i].clientX;\n          clientY += _this._touchCurrent[i].clientY;\n        }\n        _this.setCenter(clientX / nFingers, clientY / nFingers);\n        var screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n        var movement = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n        var size = 1;\n        if (movement < 0) {\n          size = 1 / Math.pow(_this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(_this.scaleFactor, movement * screenNotches);\n        }\n        _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n        var x = _this._v3_1.distanceTo(_this._gizmos.position);\n        var xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n        var y = x * Math.tan(MathUtils.DEG2RAD * _this._fovState * 0.5); //calculate new fov\n\n        var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, _this.minFov, _this.maxFov);\n        var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n        _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n        _this.setFov(newFov);\n        _this.applyTransformMatrix(_this.applyScale(size, _this._v3_2, false)); //adjusting distance\n\n        var direction = _this._gizmos.position.clone().sub(_this.camera.position).normalize().multiplyScalar(newDistance / x);\n        _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTriplePanEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n      _this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setCenter\", function (clientX, clientY) {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"initializeMouseActions\", function () {\n      _this.setMouseAction('PAN', 0, 'CTRL');\n      _this.setMouseAction('PAN', 2);\n      _this.setMouseAction('ROTATE', 0);\n      _this.setMouseAction('ZOOM', 'WHEEL');\n      _this.setMouseAction('ZOOM', 1);\n      _this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n      _this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setMouseAction\", function (operation, mouse) {\n      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      var mouseInput = [0, 1, 2, 'WHEEL'];\n      var keyInput = ['CTRL', 'SHIFT', null];\n      var state;\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n      var action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        if (_this.mouseActions[i].mouse == action.mouse && _this.mouseActions[i].key == action.key) {\n          _this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n      _this.mouseActions.push(action);\n      return true;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getOpFromAction\", function (mouse, key) {\n      var action;\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        action = _this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n      if (key) {\n        for (var _i = 0; _i < _this.mouseActions.length; _i++) {\n          action = _this.mouseActions[_i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n      return null;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getOpStateFromAction\", function (mouse, key) {\n      var action;\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        action = _this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n      if (key) {\n        for (var _i2 = 0; _i2 < _this.mouseActions.length; _i2++) {\n          action = _this.mouseActions[_i2];\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n      return null;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getAngle\", function (p1, p2) {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateTouchEvent\", function (event) {\n      for (var i = 0; i < _this._touchCurrent.length; i++) {\n        if (_this._touchCurrent[i].pointerId == event.pointerId) {\n          _this._touchCurrent.splice(i, 1, event);\n          break;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"calculateAngularSpeed\", function (p0, p1, t0, t1) {\n      var s = p1 - p0;\n      var t = (t1 - t0) / 1000;\n      if (t == 0) {\n        return 0;\n      }\n      return s / t;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"calculatePointersDistance\", function (p0, p1) {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"calculateRotationAxis\", function (vec1, vec2) {\n      _this._rotationMatrix.extractRotation(_this._cameraMatrixState);\n      _this._quat.setFromRotationMatrix(_this._rotationMatrix);\n      _this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(_this._quat);\n      return _this._rotationAxis.normalize().clone();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"calculateTbRadius\", function (camera) {\n      var factor = 0.67;\n      var distance = camera.position.distanceTo(_this._gizmos.position);\n      if (camera.type == 'PerspectiveCamera') {\n        var halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        var halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera') {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"focus\", function (point, size) {\n      var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      if (_this.camera) {\n        var focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(_this._gizmos.position).multiplyScalar(amount);\n        _this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n        var gizmoStateTemp = _this._gizmoMatrixState.clone();\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix);\n        _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n        var cameraStateTemp = _this._cameraMatrixState.clone();\n        _this._cameraMatrixState.premultiply(_this._translationMatrix);\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale); //apply zoom\n\n        if (_this.enableZoom) {\n          _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n        }\n        _this._gizmoMatrixState.copy(gizmoStateTemp);\n        _this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"drawGrid\", function () {\n      if (_this.scene) {\n        var _this$camera9, _this$camera10;\n        var color = 0x888888;\n        var multiplier = 3;\n        var size, divisions, maxLength, tick;\n        if (((_this$camera9 = _this.camera) === null || _this$camera9 === void 0 ? void 0 : _this$camera9.type) === 'OrthographicCamera') {\n          var width = _this.camera.right - _this.camera.left;\n          var height = _this.camera.bottom - _this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / _this.camera.zoom * multiplier;\n          divisions = size / tick * _this.camera.zoom;\n        } else if (((_this$camera10 = _this.camera) === null || _this$camera10 === void 0 ? void 0 : _this$camera10.type) === 'PerspectiveCamera') {\n          var distance = _this.camera.position.distanceTo(_this._gizmos.position);\n          var halfFovV = MathUtils.DEG2RAD * _this.camera.fov * 0.5;\n          var halfFovH = Math.atan(_this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n        if (_this._grid == null && _this.camera) {\n          _this._grid = new GridHelper(size, divisions, color, color);\n          _this._grid.position.copy(_this._gizmos.position);\n          _this._gridPosition.copy(_this._grid.position);\n          _this._grid.quaternion.copy(_this.camera.quaternion);\n          _this._grid.rotateX(Math.PI * 0.5);\n          _this.scene.add(_this._grid);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"connect\", function (domElement) {\n      // https://github.com/mrdoob/three.js/issues/20575\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n      _this.domElement = domElement; // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n\n      _this.domElement.style.touchAction = 'none';\n      _this.domElement.addEventListener('contextmenu', _this.onContextMenu);\n      _this.domElement.addEventListener('pointerdown', _this.onPointerDown);\n      _this.domElement.addEventListener('pointercancel', _this.onPointerCancel);\n      _this.domElement.addEventListener('wheel', _this.onWheel);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"dispose\", function () {\n      var _this$domElement, _this$domElement2, _this$domElement3, _this$domElement4, _this$scene;\n      if (_this._animationId != -1) {\n        window.cancelAnimationFrame(_this._animationId);\n      }\n      (_this$domElement = _this.domElement) === null || _this$domElement === void 0 ? void 0 : _this$domElement.removeEventListener('pointerdown', _this.onPointerDown);\n      (_this$domElement2 = _this.domElement) === null || _this$domElement2 === void 0 ? void 0 : _this$domElement2.removeEventListener('pointercancel', _this.onPointerCancel);\n      (_this$domElement3 = _this.domElement) === null || _this$domElement3 === void 0 ? void 0 : _this$domElement3.removeEventListener('wheel', _this.onWheel);\n      (_this$domElement4 = _this.domElement) === null || _this$domElement4 === void 0 ? void 0 : _this$domElement4.removeEventListener('contextmenu', _this.onContextMenu);\n      window.removeEventListener('pointermove', _this.onPointerMove);\n      window.removeEventListener('pointerup', _this.onPointerUp);\n      window.removeEventListener('resize', _this.onWindowResize);\n      (_this$scene = _this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(_this._gizmos);\n      _this.disposeGrid();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"disposeGrid\", function () {\n      if (_this._grid && _this.scene) {\n        _this.scene.remove(_this._grid);\n        _this._grid = null;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"easeOutCubic\", function (t) {\n      return 1 - Math.pow(1 - t, 3);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"activateGizmos\", function (isActive) {\n      var _iterator = _createForOfIteratorHelper(_this._gizmos.children),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var gizmo = _step.value;\n          gizmo.material.setValues({\n            opacity: isActive ? 1 : 0.6\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getCursorNDC\", function (cursorX, cursorY, canvas) {\n      var canvasRect = canvas.getBoundingClientRect();\n      _this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n      _this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n      return _this._v2_1.clone();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getCursorPosition\", function (cursorX, cursorY, canvas) {\n      var _this$camera11;\n      _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas));\n      if (((_this$camera11 = _this.camera) === null || _this$camera11 === void 0 ? void 0 : _this$camera11.type) === 'OrthographicCamera') {\n        _this._v2_1.x *= (_this.camera.right - _this.camera.left) * 0.5;\n        _this._v2_1.y *= (_this.camera.top - _this.camera.bottom) * 0.5;\n      }\n      return _this._v2_1.clone();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setCamera\", function (camera) {\n      if (camera) {\n        camera.lookAt(_this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera') {\n          _this._fov0 = camera.fov;\n          _this._fovState = camera.fov;\n        }\n        _this._cameraMatrixState0.copy(camera.matrix);\n        _this._cameraMatrixState.copy(_this._cameraMatrixState0);\n        _this._cameraProjectionState.copy(camera.projectionMatrix);\n        _this._zoom0 = camera.zoom;\n        _this._zoomState = _this._zoom0;\n        _this._initialNear = camera.near;\n        _this._nearPos0 = camera.position.distanceTo(_this.target) - camera.near;\n        _this._nearPos = _this._initialNear;\n        _this._initialFar = camera.far;\n        _this._farPos0 = camera.position.distanceTo(_this.target) - camera.far;\n        _this._farPos = _this._initialFar;\n        _this._up0.copy(camera.up);\n        _this._upState.copy(camera.up);\n        _this.camera = camera;\n        _this.camera.updateProjectionMatrix(); //making gizmos\n\n        var tbRadius = _this.calculateTbRadius(camera);\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n        _this.makeGizmos(_this.target, _this._tbRadius);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"makeGizmos\", function (tbCenter, tbRadius) {\n      // @ts-expect-error\n      var curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      var points = curve.getPoints(_this._curvePts); //geometry\n\n      var curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      var curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      var curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      var curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      var gizmoX = new Line(curveGeometry, curveMaterialX);\n      var gizmoY = new Line(curveGeometry, curveMaterialY);\n      var gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      var rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      _this._gizmoMatrixState0.identity().setPosition(tbCenter);\n      _this._gizmoMatrixState.copy(_this._gizmoMatrixState0);\n      if (_this.camera && _this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        var size = 1 / _this.camera.zoom;\n        _this._scaleMatrix.makeScale(size, size, size);\n        _this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix).premultiply(_this._scaleMatrix);\n        _this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix);\n      }\n      _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n      _this._gizmos.clear();\n      _this._gizmos.add(gizmoX);\n      _this._gizmos.add(gizmoY);\n      _this._gizmos.add(gizmoZ);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onFocusAnim\", function (time, point, cameraMatrix, gizmoMatrix) {\n      if (_this._timeStart == -1) {\n        //animation start\n        _this._timeStart = time;\n      }\n      if (_this._state == STATE.ANIMATION_FOCUS) {\n        var deltaTime = time - _this._timeStart;\n        var animTime = deltaTime / _this.focusAnimationTime;\n        _this._gizmoMatrixState.copy(gizmoMatrix);\n        if (animTime >= 1) {\n          //animation end\n          _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n          _this.focus(point, _this.scaleFactor);\n          _this._timeStart = -1;\n          _this.updateTbState(STATE.IDLE, false);\n          _this.activateGizmos(false);\n          _this.dispatchEvent(_changeEvent);\n        } else {\n          var amount = _this.easeOutCubic(animTime);\n          var size = 1 - amount + _this.scaleFactor * amount;\n          _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n          _this.focus(point, size, amount);\n          _this.dispatchEvent(_changeEvent);\n          var self = _assertThisInitialized(_this);\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        _this._animationId = -1;\n        _this._timeStart = -1;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onRotationAnim\", function (time, rotationAxis, w0) {\n      if (_this._timeStart == -1) {\n        //animation start\n        _this._anglePrev = 0;\n        _this._angleCurrent = 0;\n        _this._timeStart = time;\n      }\n      if (_this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        var deltaTime = (time - _this._timeStart) / 1000;\n        var w = w0 + -_this.dampingFactor * deltaTime;\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          _this._angleCurrent = 0.5 * -_this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          _this.applyTransformMatrix(_this.rotate(rotationAxis, _this._angleCurrent));\n          _this.dispatchEvent(_changeEvent);\n          var self = _assertThisInitialized(_this);\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          _this._animationId = -1;\n          _this._timeStart = -1;\n          _this.updateTbState(STATE.IDLE, false);\n          _this.activateGizmos(false);\n          _this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        _this._animationId = -1;\n        _this._timeStart = -1;\n        if (_this._state != STATE.ROTATE) {\n          _this.activateGizmos(false);\n          _this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"pan\", function (p0, p1) {\n      var adjust = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (_this.camera) {\n        var movement = p0.clone().sub(p1);\n        if (_this.camera.type === 'OrthographicCamera') {\n          //adjust movement amount\n          movement.multiplyScalar(1 / _this.camera.zoom);\n        }\n        if (_this.camera.type === 'PerspectiveCamera' && adjust) {\n          //adjust movement amount\n          _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0); //camera's initial position\n\n          _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0); //gizmo's initial position\n\n          var distanceFactor = _this._v3_1.distanceTo(_this._v3_2) / _this.camera.position.distanceTo(_this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n        _this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(_this.camera.quaternion);\n        _this._m4_1.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z);\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_1);\n      }\n      return _transformation;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"reset\", function () {\n      if (_this.camera) {\n        _this.camera.zoom = _this._zoom0;\n        if (_this.camera.type === 'PerspectiveCamera') {\n          _this.camera.fov = _this._fov0;\n        }\n        _this.camera.near = _this._nearPos;\n        _this.camera.far = _this._farPos;\n        _this._cameraMatrixState.copy(_this._cameraMatrixState0);\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale);\n        _this.camera.up.copy(_this._up0);\n        _this.camera.updateMatrix();\n        _this.camera.updateProjectionMatrix();\n        _this._gizmoMatrixState.copy(_this._gizmoMatrixState0);\n        _this._gizmoMatrixState0.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n        _this._gizmos.updateMatrix();\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n        _this.makeGizmos(_this._gizmos.position, _this._tbRadius);\n        _this.camera.lookAt(_this._gizmos.position);\n        _this.updateTbState(STATE.IDLE, false);\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"rotate\", function (axis, angle) {\n      var point = _this._gizmos.position; //rotation center\n\n      _this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      _this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n      _this._m4_1.makeTranslation(point.x, point.y, point.z);\n      _this._m4_1.multiply(_this._rotationMatrix);\n      _this._m4_1.multiply(_this._translationMatrix);\n      _this.setTransformationMatrices(_this._m4_1);\n      return _transformation;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"copyState\", function () {\n      if (_this.camera) {\n        var _this$camera12;\n        var state = JSON.stringify(((_this$camera12 = _this.camera) === null || _this$camera12 === void 0 ? void 0 : _this$camera12.type) === 'OrthographicCamera' ? {\n          arcballState: {\n            cameraFar: _this.camera.far,\n            cameraMatrix: _this.camera.matrix,\n            cameraNear: _this.camera.near,\n            cameraUp: _this.camera.up,\n            cameraZoom: _this.camera.zoom,\n            gizmoMatrix: _this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: _this.camera.far,\n            cameraFov: _this.camera.fov,\n            cameraMatrix: _this.camera.matrix,\n            cameraNear: _this.camera.near,\n            cameraUp: _this.camera.up,\n            cameraZoom: _this.camera.zoom,\n            gizmoMatrix: _this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"pasteState\", function () {\n      var self = _assertThisInitialized(_this);\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"saveState\", function () {\n      if (!_this.camera) return;\n      _this._cameraMatrixState0.copy(_this.camera.matrix);\n      _this._gizmoMatrixState0.copy(_this._gizmos.matrix);\n      _this._nearPos = _this.camera.near;\n      _this._farPos = _this.camera.far;\n      _this._zoom0 = _this.camera.zoom;\n      _this._up0.copy(_this.camera.up);\n      if (_this.camera.type === 'PerspectiveCamera') {\n        _this._fov0 = _this.camera.fov;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"applyScale\", function (size, point) {\n      var scaleGizmos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!_this.camera) return;\n      var scalePoint = point.clone();\n      var sizeInverse = 1 / size;\n      if (_this.camera.type === 'OrthographicCamera') {\n        //camera zoom\n        _this.camera.zoom = _this._zoomState;\n        _this.camera.zoom *= size; //check min and max zoom\n\n        if (_this.camera.zoom > _this.maxZoom) {\n          _this.camera.zoom = _this.maxZoom;\n          sizeInverse = _this._zoomState / _this.maxZoom;\n        } else if (_this.camera.zoom < _this.minZoom) {\n          _this.camera.zoom = _this.minZoom;\n          sizeInverse = _this._zoomState / _this.minZoom;\n        }\n        _this.camera.updateProjectionMatrix();\n        _this._v3_1.setFromMatrixPosition(_this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n        _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n        _this._translationMatrix.makeTranslation(-_this._v3_1.x, -_this._v3_1.y, -_this._v3_1.z);\n        _this._m4_2.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z).multiply(_this._scaleMatrix);\n        _this._m4_2.multiply(_this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n        scalePoint.sub(_this._v3_1);\n        var amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n        _this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n        _this._m4_2.premultiply(_this._m4_1);\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        return _transformation;\n      }\n      if (_this.camera.type === 'PerspectiveCamera') {\n        _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n        _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState); //move camera\n\n        var distance = _this._v3_1.distanceTo(scalePoint);\n        var _amount = distance - distance * sizeInverse; //check min and max distance\n\n        var newDistance = distance - _amount;\n        if (newDistance < _this.minDistance) {\n          sizeInverse = _this.minDistance / distance;\n          _amount = distance - distance * sizeInverse;\n        } else if (newDistance > _this.maxDistance) {\n          sizeInverse = _this.maxDistance / distance;\n          _amount = distance - distance * sizeInverse;\n        }\n        var direction = scalePoint.clone().sub(_this._v3_1).normalize().multiplyScalar(_amount);\n        _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          var pos = _this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          _amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(_this._v3_2).normalize().multiplyScalar(_amount);\n          _this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n          _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n          _this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(_this._translationMatrix);\n          _this._m4_2.multiply(_this._scaleMatrix);\n          _this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n          _this._m4_2.multiply(_this._translationMatrix);\n          _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        } else {\n          _this.setTransformationMatrices(_this._m4_1);\n        }\n        return _transformation;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setFov\", function (value) {\n      var _this$camera13;\n      if (((_this$camera13 = _this.camera) === null || _this$camera13 === void 0 ? void 0 : _this$camera13.type) === 'PerspectiveCamera') {\n        _this.camera.fov = MathUtils.clamp(value, _this.minFov, _this.maxFov);\n        _this.camera.updateProjectionMatrix();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setTarget\", function (x, y, z) {\n      if (_this.camera) {\n        _this.target.set(x, y, z);\n        _this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n        _this.makeGizmos(_this.target, _this._tbRadius);\n        _this.camera.lookAt(_this.target);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"zRotate\", function (point, angle) {\n      _this._rotationMatrix.makeRotationAxis(_this._rotationAxis, angle);\n      _this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      _this._m4_1.makeTranslation(point.x, point.y, point.z);\n      _this._m4_1.multiply(_this._rotationMatrix);\n      _this._m4_1.multiply(_this._translationMatrix);\n      _this._v3_1.setFromMatrixPosition(_this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n      _this._v3_2.copy(_this._v3_1).applyAxisAngle(_this._rotationAxis, angle); //apply rotation\n\n      _this._v3_2.sub(_this._v3_1);\n      _this._m4_2.makeTranslation(_this._v3_2.x, _this._v3_2.y, _this._v3_2.z);\n      _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n      return _transformation;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"unprojectOnObj\", function (cursor, camera) {\n      if (!_this.scene) return null;\n      var raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      var intersect = raycaster.intersectObjects(_this.scene.children, true);\n      for (var i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != _this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n      return null;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"unprojectOnTbSurface\", function (camera, cursorX, cursorY, canvas, tbRadius) {\n      if (camera.type == 'OrthographicCamera') {\n        _this._v2_1.copy(_this.getCursorPosition(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, 0);\n        var x2 = Math.pow(_this._v2_1.x, 2);\n        var y2 = Math.pow(_this._v2_1.y, 2);\n        var r2 = Math.pow(_this._tbRadius, 2);\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          _this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          _this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n        return _this._v3_1;\n      }\n      if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, -1);\n        _this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        var rayDir = _this._v3_1.clone().normalize(); //unprojected ray direction\n\n        var cameraGizmoDistance = camera.position.distanceTo(_this._gizmos.position);\n        var radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        var h = _this._v3_1.z;\n        var l = Math.sqrt(Math.pow(_this._v3_1.x, 2) + Math.pow(_this._v3_1.y, 2));\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(_this._v3_1.x, _this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n        var m = h / l;\n        var q = cameraGizmoDistance;\n        /*\n         * calculate intersection point between unprojected ray and trackball surface\n         *|y = m * x + q\n         *|x^2 + y^2 = r^2\n         *\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n         */\n\n        var a = Math.pow(m, 2) + 1;\n        var b = 2 * m * q;\n        var c = Math.pow(q, 2) - radius2;\n        var delta = Math.pow(b, 2) - 4 * a * c;\n        if (delta >= 0) {\n          //intersection with sphere\n          _this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n          _this._v2_1.setY(m * _this._v2_1.x + q);\n          var angle = MathUtils.RAD2DEG * _this._v2_1.angle();\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            var _rayLength = Math.sqrt(Math.pow(_this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - _this._v2_1.y, 2));\n            rayDir.multiplyScalar(_rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\n         *|y = m * x + q\n         *|y = (1 / x) * (r^2 / 2)\n         *\n         * m * x^2 + q * x - r^2 / 2 = 0\n         */\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n        _this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n        _this._v2_1.setY(m * _this._v2_1.x + q);\n        var rayLength = Math.sqrt(Math.pow(_this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - _this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"unprojectOnTbPlane\", function (camera, cursorX, cursorY, canvas) {\n      var initialDistance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (camera.type == 'OrthographicCamera') {\n        _this._v2_1.copy(_this.getCursorPosition(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, 0);\n        return _this._v3_1.clone();\n      }\n      if (camera.type == 'PerspectiveCamera') {\n        _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, -1);\n        _this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        var rayDir = _this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        var h = _this._v3_1.z;\n        var l = Math.sqrt(Math.pow(_this._v3_1.x, 2) + Math.pow(_this._v3_1.y, 2));\n        var cameraGizmoDistance;\n        if (initialDistance) {\n          cameraGizmoDistance = _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0).distanceTo(_this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(_this._gizmos.position);\n        }\n        /*\n         * calculate intersection point between unprojected ray and the plane\n         *|y = mx + q\n         *|y = 0\n         *\n         * x = -q/m\n         */\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n        var m = h / l;\n        var q = cameraGizmoDistance;\n        var x = -q / m;\n        var rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateMatrixState\", function () {\n      if (!_this.camera) return; //update camera and gizmos state\n\n      _this._cameraMatrixState.copy(_this.camera.matrix);\n      _this._gizmoMatrixState.copy(_this._gizmos.matrix);\n      if (_this.camera.type === 'OrthographicCamera') {\n        _this._cameraProjectionState.copy(_this.camera.projectionMatrix);\n        _this.camera.updateProjectionMatrix();\n        _this._zoomState = _this.camera.zoom;\n      }\n      if (_this.camera.type === 'PerspectiveCamera') {\n        _this._fovState = _this.camera.fov;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateTbState\", function (newState, updateMatrices) {\n      _this._state = newState;\n      if (updateMatrices) {\n        _this.updateMatrixState();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"update\", function () {\n      var EPS = 0.000001; // Update target and gizmos state\n\n      if (!_this.target.equals(_this._currentTarget) && _this.camera) {\n        _this._gizmos.position.set(_this.target.x, _this.target.y, _this.target.z); //for correct radius calculation\n\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n        _this.makeGizmos(_this.target, _this._tbRadius);\n        _this._currentTarget.copy(_this.target);\n      }\n      if (!_this.camera) return; //check min/max parameters\n\n      if (_this.camera.type === 'OrthographicCamera') {\n        //check zoom\n        if (_this.camera.zoom > _this.maxZoom || _this.camera.zoom < _this.minZoom) {\n          var newZoom = MathUtils.clamp(_this.camera.zoom, _this.minZoom, _this.maxZoom);\n          _this.applyTransformMatrix(_this.applyScale(newZoom / _this.camera.zoom, _this._gizmos.position, true));\n        }\n      }\n      if (_this.camera.type === 'PerspectiveCamera') {\n        //check distance\n        var distance = _this.camera.position.distanceTo(_this._gizmos.position);\n        if (distance > _this.maxDistance + EPS || distance < _this.minDistance - EPS) {\n          var newDistance = MathUtils.clamp(distance, _this.minDistance, _this.maxDistance);\n          _this.applyTransformMatrix(_this.applyScale(newDistance / distance, _this._gizmos.position));\n          _this.updateMatrixState();\n        } //check fov\n\n        if (_this.camera.fov < _this.minFov || _this.camera.fov > _this.maxFov) {\n          _this.camera.fov = MathUtils.clamp(_this.camera.fov, _this.minFov, _this.maxFov);\n          _this.camera.updateProjectionMatrix();\n        }\n        var oldRadius = _this._tbRadius;\n        var _tbRadius = _this.calculateTbRadius(_this.camera);\n        if (_tbRadius !== undefined) {\n          _this._tbRadius = _tbRadius;\n        }\n        if (oldRadius < _this._tbRadius - EPS || oldRadius > _this._tbRadius + EPS) {\n          var scale = (_this._gizmos.scale.x + _this._gizmos.scale.y + _this._gizmos.scale.z) / 3;\n          var newRadius = _this._tbRadius / scale; // @ts-expect-error\n\n          var curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          var points = curve.getPoints(_this._curvePts);\n          var curveGeometry = new BufferGeometry().setFromPoints(points);\n          for (var gizmo in _this._gizmos.children) {\n            var child = _this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n      _this.camera.lookAt(_this._gizmos.position);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setStateFromJSON\", function (json) {\n      var state = JSON.parse(json);\n      if (state.arcballState && _this.camera) {\n        _this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale);\n        _this.camera.up.copy(state.arcballState.cameraUp);\n        _this.camera.near = state.arcballState.cameraNear;\n        _this.camera.far = state.arcballState.cameraFar;\n        _this.camera.zoom = state.arcballState.cameraZoom;\n        if (_this.camera.type === 'PerspectiveCamera') {\n          _this.camera.fov = state.arcballState.cameraFov;\n        }\n        _this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n        _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n        _this.camera.updateMatrix();\n        _this.camera.updateProjectionMatrix();\n        _this._gizmos.updateMatrix();\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n        var gizmoTmp = new Matrix4().copy(_this._gizmoMatrixState0);\n        _this.makeGizmos(_this._gizmos.position, _this._tbRadius);\n        _this._gizmoMatrixState0.copy(gizmoTmp);\n        _this.camera.lookAt(_this._gizmos.position);\n        _this.updateTbState(STATE.IDLE, false);\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    _this.camera = null;\n    _this.domElement = _domElement;\n    _this.scene = scene;\n    _this.mouseActions = [];\n    _this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    _this._v2_1 = new Vector2();\n    _this._v3_1 = new Vector3();\n    _this._v3_2 = new Vector3();\n    _this._m4_1 = new Matrix4();\n    _this._m4_2 = new Matrix4();\n    _this._quat = new Quaternion(); //transformation matrices\n\n    _this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    _this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    _this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    _this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    _this._cameraMatrixState = new Matrix4();\n    _this._cameraProjectionState = new Matrix4();\n    _this._fovState = 1;\n    _this._upState = new Vector3();\n    _this._zoomState = 1;\n    _this._nearPos = 0;\n    _this._farPos = 0;\n    _this._gizmoMatrixState = new Matrix4(); //initial values\n\n    _this._up0 = new Vector3();\n    _this._zoom0 = 1;\n    _this._fov0 = 0;\n    _this._initialNear = 0;\n    _this._nearPos0 = 0;\n    _this._initialFar = 0;\n    _this._farPos0 = 0;\n    _this._cameraMatrixState0 = new Matrix4();\n    _this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    _this._button = -1;\n    _this._touchStart = [];\n    _this._touchCurrent = [];\n    _this._input = INPUT.NONE; //two fingers touch interaction\n\n    _this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    _this._startFingerDistance = 0; //distance between two fingers\n\n    _this._currentFingerDistance = 0;\n    _this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    _this._currentFingerRotation = 0; //double tap\n\n    _this._devPxRatio = 0;\n    _this._downValid = true;\n    _this._nclicks = 0;\n    _this._downEvents = [];\n    _this._clickStart = 0; //first click time\n\n    _this._maxDownTime = 250;\n    _this._maxInterval = 300;\n    _this._posThreshold = 24;\n    _this._movementThreshold = 24; //cursor positions\n\n    _this._currentCursorPosition = new Vector3();\n    _this._startCursorPosition = new Vector3(); //grid\n\n    _this._grid = null; //grid to be visualized during pan operation\n\n    _this._gridPosition = new Vector3(); //gizmos\n\n    _this._gizmos = new Group();\n    _this._curvePts = 128; //animations\n\n    _this._timeStart = -1; //initial time\n\n    _this._animationId = -1; //focus animation\n\n    _this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    _this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    _this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    _this._anglePrev = 0; //angle of previous rotation\n\n    _this._angleCurrent = 0; //angle of current rotation\n\n    _this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    _this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    _this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    _this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    _this.adjustNearFar = false;\n    _this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    _this.dampingFactor = 25;\n    _this.wMax = 20; //maximum angular velocity allowed\n\n    _this.enableAnimations = true; //if animations should be performed\n\n    _this.enableGrid = false; //if grid should be showed during pan operation\n\n    _this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    _this.minFov = 5;\n    _this.maxFov = 90;\n    _this.enabled = true;\n    _this.enablePan = true;\n    _this.enableRotate = true;\n    _this.enableZoom = true;\n    _this.minDistance = 0;\n    _this.maxDistance = Infinity;\n    _this.minZoom = 0;\n    _this.maxZoom = Infinity; //trackball parameters\n\n    _this.target = new Vector3(0, 0, 0);\n    _this._currentTarget = new Vector3(0, 0, 0);\n    _this._tbRadius = 1; //FSA\n\n    _this._state = STATE.IDLE;\n    _this.setCamera(_camera);\n    if (_this.scene) {\n      _this.scene.add(_this._gizmos);\n    }\n    _this._devPxRatio = window.devicePixelRatio;\n    _this.initializeMouseActions();\n    if (_this.domElement) _this.connect(_this.domElement);\n    window.addEventListener('resize', _this.onWindowResize);\n    return _this;\n  } //listeners\n\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  _createClass(ArcballControls, [{\n    key: \"applyTransformMatrix\",\n    value: function applyTransformMatrix(transformation) {\n      if (transformation !== null && transformation !== void 0 && transformation.camera && this.camera) {\n        this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n        this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.updateMatrix(); //update camera up vector\n\n        if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n          this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n        }\n      }\n      if (transformation !== null && transformation !== void 0 && transformation.gizmos) {\n        this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n        this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this._gizmos.updateMatrix();\n      }\n      if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n        var tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n        if (this.adjustNearFar) {\n          var cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n          var bb = new Box3();\n          bb.setFromObject(this._gizmos);\n          var sphere = new Sphere();\n          bb.getBoundingSphere(sphere);\n          var adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n          var regularNearPosition = cameraDistance - this._initialNear;\n          var minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n          this.camera.near = cameraDistance - minNearPos;\n          var adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n          var regularFarPosition = cameraDistance - this._initialFar;\n          var minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n          this.camera.far = cameraDistance - minFarPos;\n          this.camera.updateProjectionMatrix();\n        } else {\n          var update = false;\n          if (this.camera.near != this._initialNear) {\n            this.camera.near = this._initialNear;\n            update = true;\n          }\n          if (this.camera.far != this._initialFar) {\n            this.camera.far = this._initialFar;\n            update = true;\n          }\n          if (update) {\n            this.camera.updateProjectionMatrix();\n          }\n        }\n      }\n    }\n    /**\n     * Calculate the angular speed\n     * @param {Number} p0 Position at t0\n     * @param {Number} p1 Position at t1\n     * @param {Number} t0 Initial time in milliseconds\n     * @param {Number} t1 Ending time in milliseconds\n     */\n\n    /**\n     * Set gizmos visibility\n     * @param {Boolean} value Value of gizmos visibility\n     */\n  }, {\n    key: \"setGizmosVisible\",\n    value: function setGizmosVisible(value) {\n      this._gizmos.visible = value;\n      this.dispatchEvent(_changeEvent);\n    }\n    /**\n     * Creates the rotation gizmos matching trackball center and radius\n     * @param {Vector3} tbCenter The trackball center\n     * @param {number} tbRadius The trackball radius\n     */\n\n    /**\n     * Set values in transformation object\n     * @param {Matrix4} camera Transformation to be applied to the camera\n     * @param {Matrix4} gizmos Transformation to be applied to gizmos\n     */\n  }, {\n    key: \"setTransformationMatrices\",\n    value: function setTransformationMatrices() {\n      var camera = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var gizmos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (camera) {\n        if (_transformation.camera) {\n          _transformation.camera.copy(camera);\n        } else {\n          _transformation.camera = camera.clone();\n        }\n      } else {\n        _transformation.camera = null;\n      }\n      if (gizmos) {\n        if (_transformation.gizmos) {\n          _transformation.gizmos.copy(gizmos);\n        } else {\n          _transformation.gizmos = gizmos.clone();\n        }\n      } else {\n        _transformation.gizmos = null;\n      }\n    }\n    /**\n     * Rotate camera around its direction axis passing by a given point by a given angle\n     * @param {Vector3} point The point where the rotation axis is passing trough\n     * @param {Number} angle Angle in radians\n     * @returns The computed transormation matix\n     */\n  }]);\n  return ArcballControls;\n}(EventDispatcher);\nexport { ArcballControls };","map":{"version":3,"names":["_defineProperty","Matrix4","EventDispatcher","EllipseCurve","BufferGeometry","MathUtils","Vector3","GridHelper","LineBasicMaterial","Line","Raycaster","Vector2","Quaternion","Group","Box3","Sphere","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","ArcballControls","_camera","_domElement","scene","scale","_gizmos","z","tbRadius","calculateTbRadius","undefined","_tbRadius","newRadius","curve","points","getPoints","_curvePts","curveGeometry","setFromPoints","gizmo","children","child","geometry","dispatchEvent","event","enabled","i","mouseActions","length","mouse","preventDefault","_touchStart","splice","_touchCurrent","_input","button","isPrimary","_downValid","_downEvents","push","pointerType","onSinglePanStart","window","addEventListener","onPointerMove","onPointerUp","onRotateStart","onPinchStart","onDoublePanStart","onTriplePanStart","modifier","ctrlKey","metaKey","shiftKey","_mouseOp","getOpFromAction","_button","updateTouchEvent","onSinglePanMove","movement","calculatePointersDistance","_devPxRatio","_switchSensibility","onRotateMove","onPinchMove","onDoublePanMove","onTriplePanMove","mouseOpState","getOpStateFromAction","_movementThreshold","nTouch","pointerId","removeEventListener","onSinglePanEnd","onDoublePanEnd","onPinchEnd","onRotateEnd","onTriplePanEnd","downTime","timeStamp","_maxDownTime","_nclicks","_clickStart","performance","now","clickInterval","_maxInterval","_posThreshold","onDoubleTap","shift","_this$camera3","enableZoom","domElement","mouseOp","notchDeltaY","sgn","deltaY","size","scaleFactor","updateTbState","Math","pow","cursorZoom","enablePan","_this$camera","_this$camera2","scalePoint","_this$unprojectOnTbPl","unprojectOnTbPlane","clientX","clientY","applyQuaternion","quaternion","multiplyScalar","zoom","add","position","_this$unprojectOnTbPl2","applyTransformMatrix","applyScale","_grid","disposeGrid","drawGrid","deltaX","_v3_1","setFromMatrixPosition","_cameraMatrixState","distanceTo","xNew","clamp","minDistance","maxDistance","tan","DEG2RAD","fov","newFov","RAD2DEG","atan","maxFov","minFov","newDistance","setFov","operation","_this$camera4","setCenter","_animationId","cancelAnimationFrame","_timeStart","activateGizmos","rayDir","_startCursorPosition","copy","enableGrid","enableRotate","unprojectOnTbSurface","enableAnimations","_timePrev","_timeCurrent","_angleCurrent","_anglePrev","_cursorPosPrev","_cursorPosCurr","_wCurr","_wPrev","setY","getCursorNDC","_currentCursorPosition","opState","_this$camera5","restart","_state","pan","distance","angle","angleTo","amount","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","_fovState","_v3_2","_gizmoMatrixState","direction","clone","sub","normalize","_m4_1","makeTranslation","deltaTime","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","wMax","hitP","unprojectOnObj","onFocusAnim","focus","_this$camera6","_startFingerRotation","getAngle","_currentFingerRotation","getWorldDirection","_rotationAxis","rotationPoint","_this$unprojectOnTbPl3","zRotate","_startFingerDistance","_currentFingerDistance","_this$camera7","_this$camera8","_this$unprojectOnTbPl4","_this$unprojectOnTbPl5","nFingers","setMouseAction","key","operationInput","mouseInput","keyInput","state","includes","action","p1","p2","atan2","PI","p0","t0","t1","s","sqrt","vec1","vec2","_rotationMatrix","extractRotation","_quat","setFromRotationMatrix","crossVectors","factor","halfFovV","halfFovH","aspect","top","right","point","focusPoint","_translationMatrix","gizmoStateTemp","premultiply","decompose","cameraStateTemp","_this$camera9","_this$camera10","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","_gridPosition","rotateX","document","console","error","style","touchAction","onContextMenu","onPointerDown","onPointerCancel","onWheel","_this$domElement","_this$domElement2","_this$domElement3","_this$domElement4","_this$scene","onWindowResize","remove","isActive","material","setValues","opacity","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","_v2_1","setX","_this$camera11","lookAt","target","updateMatrix","_fov0","_cameraMatrixState0","matrix","_cameraProjectionState","projectionMatrix","_zoom0","_zoomState","_initialNear","near","_nearPos0","_nearPos","_initialFar","far","_farPos0","_farPos","_up0","up","_upState","updateProjectionMatrix","makeGizmos","tbCenter","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","gizmoX","gizmoY","gizmoZ","rotation","_gizmoMatrixState0","identity","setPosition","_scaleMatrix","makeScale","clear","time","cameraMatrix","gizmoMatrix","animTime","focusAnimationTime","easeOutCubic","w0","dampingFactor","adjust","distanceFactor","set","setTransformationMatrices","axis","makeRotationAxis","multiply","_this$camera12","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","readText","then","resolved","value","setStateFromJSON","scaleGizmos","sizeInverse","maxZoom","minZoom","_m4_2","pos","_this$camera13","applyAxisAngle","cursor","raycaster","setFromCamera","intersect","intersectObjects","object","uuid","face","getCursorPosition","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength","initialDistance","newState","updateMatrices","updateMatrixState","EPS","equals","_currentTarget","newZoom","oldRadius","json","parse","fromArray","elements","gizmoTmp","adjustNearFar","Infinity","setCamera","devicePixelRatio","initializeMouseActions","connect","transformation","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","adjustedFarPosition","regularFarPosition","minFarPos","update","visible"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/controls/ArcballControls.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, MathUtils, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three';\n\n//trackball state\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nconst _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nconst _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nconst _changeEvent = {\n  type: 'change'\n};\nconst _startEvent = {\n  type: 'start'\n};\nconst _endEvent = {\n  type: 'end'\n};\n/**\n *\n * @param {CamOrthographicCamera | PerspectiveCameraera} camera Virtual camera used in the scene\n * @param {HTMLElement=null} domElement Renderer's dom element\n * @param {Scene=null} scene The scene to be rendered\n */\n\nclass ArcballControls extends EventDispatcher {\n  constructor(_camera, _domElement = null, scene = null) {\n    super();\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"domElement\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mouseActions\", void 0);\n\n    _defineProperty(this, \"_mouseOp\", void 0);\n\n    _defineProperty(this, \"_v2_1\", void 0);\n\n    _defineProperty(this, \"_v3_1\", void 0);\n\n    _defineProperty(this, \"_v3_2\", void 0);\n\n    _defineProperty(this, \"_m4_1\", void 0);\n\n    _defineProperty(this, \"_m4_2\", void 0);\n\n    _defineProperty(this, \"_quat\", void 0);\n\n    _defineProperty(this, \"_translationMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationMatrix\", void 0);\n\n    _defineProperty(this, \"_scaleMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationAxis\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState\", void 0);\n\n    _defineProperty(this, \"_cameraProjectionState\", void 0);\n\n    _defineProperty(this, \"_fovState\", void 0);\n\n    _defineProperty(this, \"_upState\", void 0);\n\n    _defineProperty(this, \"_zoomState\", void 0);\n\n    _defineProperty(this, \"_nearPos\", void 0);\n\n    _defineProperty(this, \"_farPos\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState\", void 0);\n\n    _defineProperty(this, \"_up0\", void 0);\n\n    _defineProperty(this, \"_zoom0\", void 0);\n\n    _defineProperty(this, \"_fov0\", void 0);\n\n    _defineProperty(this, \"_initialNear\", void 0);\n\n    _defineProperty(this, \"_nearPos0\", void 0);\n\n    _defineProperty(this, \"_initialFar\", void 0);\n\n    _defineProperty(this, \"_farPos0\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState0\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState0\", void 0);\n\n    _defineProperty(this, \"_button\", void 0);\n\n    _defineProperty(this, \"_touchStart\", void 0);\n\n    _defineProperty(this, \"_touchCurrent\", void 0);\n\n    _defineProperty(this, \"_input\", void 0);\n\n    _defineProperty(this, \"_switchSensibility\", void 0);\n\n    _defineProperty(this, \"_startFingerDistance\", void 0);\n\n    _defineProperty(this, \"_currentFingerDistance\", void 0);\n\n    _defineProperty(this, \"_startFingerRotation\", void 0);\n\n    _defineProperty(this, \"_currentFingerRotation\", void 0);\n\n    _defineProperty(this, \"_devPxRatio\", void 0);\n\n    _defineProperty(this, \"_downValid\", void 0);\n\n    _defineProperty(this, \"_nclicks\", void 0);\n\n    _defineProperty(this, \"_downEvents\", void 0);\n\n    _defineProperty(this, \"_clickStart\", void 0);\n\n    _defineProperty(this, \"_maxDownTime\", void 0);\n\n    _defineProperty(this, \"_maxInterval\", void 0);\n\n    _defineProperty(this, \"_posThreshold\", void 0);\n\n    _defineProperty(this, \"_movementThreshold\", void 0);\n\n    _defineProperty(this, \"_currentCursorPosition\", void 0);\n\n    _defineProperty(this, \"_startCursorPosition\", void 0);\n\n    _defineProperty(this, \"_grid\", void 0);\n\n    _defineProperty(this, \"_gridPosition\", void 0);\n\n    _defineProperty(this, \"_gizmos\", void 0);\n\n    _defineProperty(this, \"_curvePts\", void 0);\n\n    _defineProperty(this, \"_timeStart\", void 0);\n\n    _defineProperty(this, \"_animationId\", void 0);\n\n    _defineProperty(this, \"focusAnimationTime\", void 0);\n\n    _defineProperty(this, \"_timePrev\", void 0);\n\n    _defineProperty(this, \"_timeCurrent\", void 0);\n\n    _defineProperty(this, \"_anglePrev\", void 0);\n\n    _defineProperty(this, \"_angleCurrent\", void 0);\n\n    _defineProperty(this, \"_cursorPosPrev\", void 0);\n\n    _defineProperty(this, \"_cursorPosCurr\", void 0);\n\n    _defineProperty(this, \"_wPrev\", void 0);\n\n    _defineProperty(this, \"_wCurr\", void 0);\n\n    _defineProperty(this, \"adjustNearFar\", void 0);\n\n    _defineProperty(this, \"scaleFactor\", void 0);\n\n    _defineProperty(this, \"dampingFactor\", void 0);\n\n    _defineProperty(this, \"wMax\", void 0);\n\n    _defineProperty(this, \"enableAnimations\", void 0);\n\n    _defineProperty(this, \"enableGrid\", void 0);\n\n    _defineProperty(this, \"cursorZoom\", void 0);\n\n    _defineProperty(this, \"minFov\", void 0);\n\n    _defineProperty(this, \"maxFov\", void 0);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"enablePan\", void 0);\n\n    _defineProperty(this, \"enableRotate\", void 0);\n\n    _defineProperty(this, \"enableZoom\", void 0);\n\n    _defineProperty(this, \"minDistance\", void 0);\n\n    _defineProperty(this, \"maxDistance\", void 0);\n\n    _defineProperty(this, \"minZoom\", void 0);\n\n    _defineProperty(this, \"maxZoom\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"_currentTarget\", void 0);\n\n    _defineProperty(this, \"_tbRadius\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n      }\n\n      const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n\n      this.dispatchEvent(_changeEvent);\n    });\n\n    _defineProperty(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n\n      this._input = INPUT.NONE;\n    });\n\n    _defineProperty(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n\n        this._touchCurrent.push(event);\n\n        switch (this._input) {\n          case INPUT.NONE:\n            //singleStart\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, 'ROTATE');\n            window.addEventListener('pointermove', this.onPointerMove);\n            window.addEventListener('pointerup', this.onPointerUp);\n            break;\n\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.NONE) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n\n        if (this._mouseOp) {\n          window.addEventListener('pointermove', this.onPointerMove);\n          window.addEventListener('pointerup', this.onPointerUp); //singleStart\n\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerMove\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n\n            if (movement >= this._switchSensibility) {\n              //singleMove\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, 'ROTATE');\n              break;\n            }\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n\n          case INPUT.MULT_FINGER:\n            //multMove\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerUp\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n\n            this._touchStart.splice(i, 1);\n\n            break;\n          }\n        }\n\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', this.onPointerMove);\n            window.removeEventListener('pointerup', this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd(); //switching to singleStart\n\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', this.onPointerMove);\n              window.removeEventListener('pointerup', this.onPointerUp); //multCancel\n\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', this.onPointerMove);\n        window.removeEventListener('pointerup', this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              //first valid click detected\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                this._nclicks = 0;\n\n                this._downEvents.splice(0, this._downEvents.length);\n\n                this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                this._nclicks = 1;\n\n                this._downEvents.shift();\n\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onWheel\", event => {\n      var _this$camera3;\n\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOp = this.getOpFromAction('WHEEL', modifier);\n\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n\n          switch (mouseOp) {\n            case 'ZOOM':\n              this.updateTbState(STATE.SCALE, true);\n\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n\n              if (this.cursorZoom && this.enablePan) {\n                var _this$camera, _this$camera2;\n\n                let scalePoint;\n\n                if (((_this$camera = this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.type) === 'OrthographicCamera') {\n                  var _this$unprojectOnTbPl;\n\n                  scalePoint = (_this$unprojectOnTbPl = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n\n                if (((_this$camera2 = this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.type) === 'PerspectiveCamera') {\n                  var _this$unprojectOnTbPl2;\n\n                  scalePoint = (_this$unprojectOnTbPl2 = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n\n                if (scalePoint !== undefined) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n\n            case 'FOV':\n              if (((_this$camera3 = this.camera) === null || _this$camera3 === void 0 ? void 0 : _this$camera3.type) === 'PerspectiveCamera') {\n                this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanStart\", (event, operation) => {\n      var _this$camera4;\n\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (operation) {\n          case 'PAN':\n            if (!this.enablePan) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n\n            break;\n\n          case 'ROTATE':\n            if (!this.enableRotate) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              this.activateGizmos(true);\n\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n\n                this._cursorPosPrev.copy(this._startCursorPosition);\n\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n\n            this.dispatchEvent(_changeEvent);\n            break;\n\n          case 'FOV':\n            if (!this.enableZoom) return;\n\n            if (((_this$camera4 = this.camera) === null || _this$camera4 === void 0 ? void 0 : _this$camera4.type) === 'PerspectiveCamera') {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n\n              this.updateTbState(STATE.FOV, true);\n\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n\n            break;\n\n          case 'ZOOM':\n            if (!this.enableZoom) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.SCALE, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanMove\", (event, opState) => {\n      var _this$camera5;\n\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                //switch to pan operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n\n            break;\n\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                //switch to rotate operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n\n                const amount = Math.max(distance / this._tbRadius, angle); //effective rotation angle\n\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n\n            break;\n\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n\n            break;\n\n          case STATE.FOV:\n            if (this.enableZoom && ((_this$camera5 = this.camera) === null || _this$camera5 === void 0 ? void 0 : _this$camera5.type) === 'PerspectiveCamera') {\n              if (restart) {\n                //switch to fov operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n\n            break;\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n\n        if (this.enableAnimations) {\n          //perform rotation animation\n          const deltaTime = performance.now() - this._timeCurrent;\n\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n\n        if (hitP && this.enableAnimations) {\n          const self = this;\n\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n\n        if (rayDir !== undefined) {\n          this._startCursorPosition.copy(rayDir);\n        }\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== undefined) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onRotateStart\", () => {\n      if (this.enabled && this.enableRotate) {\n        var _this$camera6;\n\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_this$camera6 = this.camera) === null || _this$camera6 === void 0 ? void 0 : _this$camera6.getWorldDirection(this._rotationAxis); //rotation axis\n\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onRotateMove\", () => {\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          var _this$unprojectOnTbPl3;\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n          rotationPoint = (_this$unprojectOnTbPl3 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n\n        if (rotationPoint !== undefined) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onPinchMove\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          var _this$camera7, _this$camera8;\n\n          if (((_this$camera7 = this.camera) === null || _this$camera7 === void 0 ? void 0 : _this$camera7.type) === 'OrthographicCamera') {\n            var _this$unprojectOnTbPl4;\n\n            scalePoint = (_this$unprojectOnTbPl4 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (((_this$camera8 = this.camera) === null || _this$camera8 === void 0 ? void 0 : _this$camera8.type) === 'PerspectiveCamera') {\n            var _this$unprojectOnTbPl5;\n\n            scalePoint = (_this$unprojectOnTbPl5 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n\n        if (scalePoint !== undefined) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n\n        let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n    });\n\n    _defineProperty(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n\n    _defineProperty(this, \"initializeMouseActions\", () => {\n      this.setMouseAction('PAN', 0, 'CTRL');\n      this.setMouseAction('PAN', 2);\n      this.setMouseAction('ROTATE', 0);\n      this.setMouseAction('ZOOM', 'WHEEL');\n      this.setMouseAction('ZOOM', 1);\n      this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n      this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n\n    _defineProperty(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      const mouseInput = [0, 1, 2, 'WHEEL'];\n      const keyInput = ['CTRL', 'SHIFT', null];\n      let state;\n\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n\n      const action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n\n      this.mouseActions.push(action);\n      return true;\n    });\n\n    _defineProperty(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n\n    _defineProperty(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1000;\n\n      if (t == 0) {\n        return 0;\n      }\n\n      return s / t;\n    });\n\n    _defineProperty(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n\n    _defineProperty(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n\n      return this._rotationAxis.normalize().clone();\n    });\n\n    _defineProperty(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n\n      if (camera.type == 'PerspectiveCamera') {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera') {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n\n    _defineProperty(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera) {\n        const focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        const cameraStateTemp = this._cameraMatrixState.clone();\n\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale); //apply zoom\n\n\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n\n    _defineProperty(this, \"drawGrid\", () => {\n      if (this.scene) {\n        var _this$camera9, _this$camera10;\n\n        const color = 0x888888;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n\n        if (((_this$camera9 = this.camera) === null || _this$camera9 === void 0 ? void 0 : _this$camera9.type) === 'OrthographicCamera') {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (((_this$camera10 = this.camera) === null || _this$camera10 === void 0 ? void 0 : _this$camera10.type) === 'PerspectiveCamera') {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n\n          this._grid.position.copy(this._gizmos.position);\n\n          this._gridPosition.copy(this._grid.position);\n\n          this._grid.quaternion.copy(this.camera.quaternion);\n\n          this._grid.rotateX(Math.PI * 0.5);\n\n          this.scene.add(this._grid);\n        }\n      }\n    });\n\n    _defineProperty(this, \"connect\", domElement => {\n      // https://github.com/mrdoob/three.js/issues/20575\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n\n      this.domElement = domElement; // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n\n      this.domElement.style.touchAction = 'none';\n      this.domElement.addEventListener('contextmenu', this.onContextMenu);\n      this.domElement.addEventListener('pointerdown', this.onPointerDown);\n      this.domElement.addEventListener('pointercancel', this.onPointerCancel);\n      this.domElement.addEventListener('wheel', this.onWheel);\n    });\n\n    _defineProperty(this, \"dispose\", () => {\n      var _this$domElement, _this$domElement2, _this$domElement3, _this$domElement4, _this$scene;\n\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n\n      (_this$domElement = this.domElement) === null || _this$domElement === void 0 ? void 0 : _this$domElement.removeEventListener('pointerdown', this.onPointerDown);\n      (_this$domElement2 = this.domElement) === null || _this$domElement2 === void 0 ? void 0 : _this$domElement2.removeEventListener('pointercancel', this.onPointerCancel);\n      (_this$domElement3 = this.domElement) === null || _this$domElement3 === void 0 ? void 0 : _this$domElement3.removeEventListener('wheel', this.onWheel);\n      (_this$domElement4 = this.domElement) === null || _this$domElement4 === void 0 ? void 0 : _this$domElement4.removeEventListener('contextmenu', this.onContextMenu);\n      window.removeEventListener('pointermove', this.onPointerMove);\n      window.removeEventListener('pointerup', this.onPointerUp);\n      window.removeEventListener('resize', this.onWindowResize);\n      (_this$scene = this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(this._gizmos);\n      this.disposeGrid();\n    });\n\n    _defineProperty(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n\n    _defineProperty(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n\n    _defineProperty(this, \"activateGizmos\", isActive => {\n      for (const gizmo of this._gizmos.children) {\n        gizmo.material.setValues({\n          opacity: isActive ? 1 : 0.6\n        });\n      }\n    });\n\n    _defineProperty(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      var _this$camera11;\n\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n      if (((_this$camera11 = this.camera) === null || _this$camera11 === void 0 ? void 0 : _this$camera11.type) === 'OrthographicCamera') {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"setCamera\", camera => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera') {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n\n        this._cameraMatrixState0.copy(camera.matrix);\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n\n        this._up0.copy(camera.up);\n\n        this._upState.copy(camera.up);\n\n        this.camera = camera;\n        this.camera.updateProjectionMatrix(); //making gizmos\n\n        const tbRadius = this.calculateTbRadius(camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n\n    _defineProperty(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      // @ts-expect-error\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts); //geometry\n\n      const curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      const curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n      if (this.camera && this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        const size = 1 / this.camera.zoom;\n\n        this._scaleMatrix.makeScale(size, size, size);\n\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.clear();\n\n      this._gizmos.add(gizmoX);\n\n      this._gizmos.add(gizmoY);\n\n      this._gizmos.add(gizmoZ);\n    });\n\n    _defineProperty(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n\n        this._gizmoMatrixState.copy(gizmoMatrix);\n\n        if (animTime >= 1) {\n          //animation end\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n\n    _defineProperty(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        const deltaTime = (time - this._timeStart) / 1000;\n        const w = w0 + -this.dampingFactor * deltaTime;\n\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera) {\n        const movement = p0.clone().sub(p1);\n\n        if (this.camera.type === 'OrthographicCamera') {\n          //adjust movement amount\n          movement.multiplyScalar(1 / this.camera.zoom);\n        }\n\n        if (this.camera.type === 'PerspectiveCamera' && adjust) {\n          //adjust movement amount\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0); //camera's initial position\n\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0); //gizmo's initial position\n\n\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n\n      return _transformation;\n    });\n\n    _defineProperty(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = this._fov0;\n        }\n\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position; //rotation center\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"copyState\", () => {\n      if (this.camera) {\n        var _this$camera12;\n\n        const state = JSON.stringify(((_this$camera12 = this.camera) === null || _this$camera12 === void 0 ? void 0 : _this$camera12.type) === 'OrthographicCamera' ? {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n\n    _defineProperty(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n\n    _defineProperty(this, \"saveState\", () => {\n      if (!this.camera) return;\n\n      this._cameraMatrixState0.copy(this.camera.matrix);\n\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n\n      this._up0.copy(this.camera.up);\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fov0 = this.camera.fov;\n      }\n    });\n\n    _defineProperty(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      if (!this.camera) return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //camera zoom\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size; //check min and max zoom\n\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n\n        this.camera.updateProjectionMatrix();\n\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n\n        this._m4_2.multiply(this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n\n        this._m4_2.premultiply(this._m4_1);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState); //move camera\n\n\n        let distance = this._v3_1.distanceTo(scalePoint);\n\n        let amount = distance - distance * sizeInverse; //check min and max distance\n\n        const newDistance = distance - amount;\n\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n\n          this._m4_2.multiply(this._scaleMatrix);\n\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n\n          this._m4_2.multiply(this._translationMatrix);\n\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n\n        return _transformation;\n      }\n    });\n\n    _defineProperty(this, \"setFov\", value => {\n      var _this$camera13;\n\n      if (((_this$camera13 = this.camera) === null || _this$camera13 === void 0 ? void 0 : _this$camera13.type) === 'PerspectiveCamera') {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n\n    _defineProperty(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n\n        this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n\n    _defineProperty(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle); //apply rotation\n\n\n      this._v3_2.sub(this._v3_1);\n\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene) return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n\n        return this._v3_1;\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\n\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        /*\n         * calculate intersection point between unprojected ray and trackball surface\n         *|y = m * x + q\n         *|x^2 + y^2 = r^2\n         *\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n         */\n\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n\n        if (delta >= 0) {\n          //intersection with sphere\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n          this._v2_1.setY(m * this._v2_1.x + q);\n\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\n         *|y = m * x + q\n         *|y = (1 / x) * (r^2 / 2)\n         *\n         * m * x^2 + q * x - r^2 / 2 = 0\n         */\n\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n        this._v2_1.setY(m * this._v2_1.x + q);\n\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        return this._v3_1.clone();\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        /*\n         * calculate intersection point between unprojected ray and the plane\n         *|y = mx + q\n         *|y = 0\n         *\n         * x = -q/m\n         */\n\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"updateMatrixState\", () => {\n      if (!this.camera) return; //update camera and gizmos state\n\n      this._cameraMatrixState.copy(this.camera.matrix);\n\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n\n      if (this.camera.type === 'OrthographicCamera') {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fovState = this.camera.fov;\n      }\n    });\n\n    _defineProperty(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n\n    _defineProperty(this, \"update\", () => {\n      const EPS = 0.000001; // Update target and gizmos state\n\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n\n        this._currentTarget.copy(this.target);\n      }\n\n      if (!this.camera) return; //check min/max parameters\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //check zoom\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        //check distance\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        } //check fov\n\n\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n\n      this.camera.lookAt(this._gizmos.position);\n    });\n\n    _defineProperty(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n\n        this._gizmoMatrixState0.copy(gizmoTmp);\n\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    this.camera = null;\n    this.domElement = _domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion(); //transformation matrices\n\n    this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4(); //initial values\n\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE; //two fingers touch interaction\n\n    this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    this._startFingerDistance = 0; //distance between two fingers\n\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    this._currentFingerRotation = 0; //double tap\n\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0; //first click time\n\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24; //cursor positions\n\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3(); //grid\n\n    this._grid = null; //grid to be visualized during pan operation\n\n    this._gridPosition = new Vector3(); //gizmos\n\n    this._gizmos = new Group();\n    this._curvePts = 128; //animations\n\n    this._timeStart = -1; //initial time\n\n    this._animationId = -1; //focus animation\n\n    this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    this._anglePrev = 0; //angle of previous rotation\n\n    this._angleCurrent = 0; //angle of current rotation\n\n    this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    this.dampingFactor = 25;\n    this.wMax = 20; //maximum angular velocity allowed\n\n    this.enableAnimations = true; //if animations should be performed\n\n    this.enableGrid = false; //if grid should be showed during pan operation\n\n    this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity; //trackball parameters\n\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1; //FSA\n\n    this._state = STATE.IDLE;\n    this.setCamera(_camera);\n\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement) this.connect(this.domElement);\n    window.addEventListener('resize', this.onWindowResize);\n  } //listeners\n\n\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if (transformation !== null && transformation !== void 0 && transformation.camera && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n      this.camera.updateMatrix(); //update camera up vector\n\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n\n    if (transformation !== null && transformation !== void 0 && transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.updateMatrix();\n    }\n\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n\n      if (tbRadius !== undefined) {\n        this._tbRadius = tbRadius;\n      }\n\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Calculate the angular speed\n   * @param {Number} p0 Position at t0\n   * @param {Number} p1 Position at t1\n   * @param {Number} t0 Initial time in milliseconds\n   * @param {Number} t1 Ending time in milliseconds\n   */\n\n\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Creates the rotation gizmos matching trackball center and radius\n   * @param {Vector3} tbCenter The trackball center\n   * @param {number} tbRadius The trackball radius\n   */\n\n\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n  /**\n   * Rotate camera around its direction axis passing by a given point by a given angle\n   * @param {Vector3} point The point where the rotation axis is passing trough\n   * @param {Number} angle Angle in radians\n   * @returns The computed transormation matix\n   */\n\n\n}\n\nexport { ArcballControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}