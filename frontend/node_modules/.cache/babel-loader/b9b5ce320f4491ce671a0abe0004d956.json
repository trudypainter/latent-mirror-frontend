{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nvar TOUCH_RADIUS = 0.01;\nvar POINTING_JOINT = 'index-finger-tip';\nvar OculusHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(OculusHandModel, _Object3D);\n  var _super = _createSuper(OculusHandModel);\n  function OculusHandModel(controller, leftModelPath, rightModelPath) {\n    var _this;\n    _classCallCheck(this, OculusHandModel);\n    _this = _super.call(this);\n    _defineProperty(_assertThisInitialized(_this), \"controller\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"motionController\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"envMap\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"mesh\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"xrInputSource\", void 0);\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    _this.xrInputSource = null;\n    controller.addEventListener('connected', function (event) {\n      var xrInputSource = event.data;\n      if (xrInputSource.hand && !_this.motionController) {\n        _this.xrInputSource = xrInputSource;\n        _this.motionController = new XRHandMeshModel(_assertThisInitialized(_this), controller, undefined, xrInputSource.handedness, xrInputSource.handedness === 'left' ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener('disconnected', function () {\n      _this.dispose();\n    });\n    return _this;\n  }\n  _createClass(OculusHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(OculusHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition() {\n      // @ts-ignore XRController needs to extend Group\n      var indexFingerTip = this.controller.joints[POINTING_JOINT];\n      if (indexFingerTip) {\n        return indexFingerTip.position;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"intersectBoxObject\",\n    value: function intersectBoxObject(boxObject) {\n      var pointerPosition = this.getPointerPosition();\n      if (pointerPosition) {\n        var indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n        var box = new Box3().setFromObject(boxObject);\n        return indexSphere.intersectsBox(box);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"checkButton\",\n    value: function checkButton(button) {\n      if (this.intersectBoxObject(button)) {\n        button.onPress();\n      } else {\n        button.onClear();\n      }\n      if (button.isPressed()) {\n        button.whilePressed();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.clear();\n      this.motionController = null;\n    }\n  }]);\n  return OculusHandModel;\n}(Object3D);\nexport { OculusHandModel };","map":{"version":3,"names":["_defineProperty","Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","controller","leftModelPath","rightModelPath","motionController","envMap","mesh","xrInputSource","addEventListener","event","data","hand","undefined","handedness","dispose","force","updateMesh","indexFingerTip","joints","position","boxObject","pointerPosition","getPointerPosition","indexSphere","box","setFromObject","intersectsBox","button","intersectBoxObject","onPress","onClear","isPressed","whilePressed","clear"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/webxr/OculusHandModel.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n\n    _defineProperty(this, \"controller\", void 0);\n\n    _defineProperty(this, \"motionController\", void 0);\n\n    _defineProperty(this, \"envMap\", void 0);\n\n    _defineProperty(this, \"mesh\", void 0);\n\n    _defineProperty(this, \"xrInputSource\", void 0);\n\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, undefined, xrInputSource.handedness, xrInputSource.handedness === 'left' ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.dispose();\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    // @ts-ignore XRController needs to extend Group\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n\n}\n\nexport { OculusHandModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}