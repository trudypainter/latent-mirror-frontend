{"ast":null,"code":"import _objectSpread from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Loader, FileLoader, ShapePath } from 'three';\nvar FontLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FontLoader, _Loader);\n  var _super = _createSuper(FontLoader);\n  function FontLoader(manager) {\n    _classCallCheck(this, FontLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(FontLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (response) {\n        if (typeof response !== 'string') throw new Error('unsupported data type');\n        var json = JSON.parse(response);\n        var font = _this.parse(json);\n        if (onLoad) onLoad(font);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(json) {\n      return new Font(json);\n    }\n  }]);\n  return FontLoader;\n}(Loader);\nvar Font = /*#__PURE__*/function () {\n  function Font(data) {\n    _classCallCheck(this, Font);\n    _defineProperty(this, \"data\", void 0);\n    this.data = data;\n  }\n  _createClass(Font, [{\n    key: \"generateShapes\",\n    value: function generateShapes(text) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      var _options = arguments.length > 2 ? arguments[2] : undefined;\n      var shapes = [];\n      var options = _objectSpread({\n        letterSpacing: 0,\n        lineHeight: 1\n      }, _options);\n      var paths = createPaths(text, size, this.data, options);\n      for (var p = 0, pl = paths.length; p < pl; p++) {\n        Array.prototype.push.apply(shapes, paths[p].toShapes(false));\n      }\n      return shapes;\n    }\n  }]);\n  return Font;\n}();\n_defineProperty(Font, \"isFont\", void 0);\n_defineProperty(Font, \"type\", void 0);\nfunction createPaths(text, size, data, options) {\n  var chars = Array.from(text);\n  var scale = size / data.resolution;\n  var line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  var paths = [];\n  var offsetX = 0,\n    offsetY = 0;\n  for (var i = 0; i < chars.length; i++) {\n    var char = chars[i];\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height * options.lineHeight;\n    } else {\n      var ret = createPath(char, scale, offsetX, offsetY, data);\n      if (ret) {\n        offsetX += ret.offsetX + options.letterSpacing;\n        paths.push(ret.path);\n      }\n    }\n  }\n  return paths;\n}\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  var glyph = data.glyphs[char] || data.glyphs['?'];\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n  var path = new ShapePath();\n  var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n  if (glyph.o) {\n    var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n    for (var i = 0, l = outline.length; i < l;) {\n      var action = outline[i++];\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n        case 'l':\n          // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n        case 'q':\n          // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n        case 'b':\n          // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          cpx2 = parseInt(outline[i++]) * scale + offsetX;\n          cpy2 = parseInt(outline[i++]) * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n  return {\n    offsetX: glyph.ha * scale,\n    path: path\n  };\n}\nexport { Font, FontLoader };","map":{"version":3,"names":["_defineProperty","Loader","FileLoader","ShapePath","FontLoader","manager","url","onLoad","onProgress","onError","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","response","Error","json","JSON","parse","font","Font","data","text","size","_options","shapes","options","letterSpacing","lineHeight","paths","createPaths","p","pl","length","Array","prototype","push","apply","toShapes","chars","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","glyph","glyphs","console","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","action","parseInt","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/FontLoader.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Loader, FileLoader, ShapePath } from 'three';\n\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, response => {\n      if (typeof response !== 'string') throw new Error('unsupported data type');\n      const json = JSON.parse(response);\n      const font = this.parse(json);\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n\n  parse(json) {\n    return new Font(json);\n  }\n\n}\nclass Font {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    this.data = data;\n  }\n\n  generateShapes(text, size = 100, _options) {\n    const shapes = [];\n    const options = {\n      letterSpacing: 0,\n      lineHeight: 1,\n      ..._options\n    };\n    const paths = createPaths(text, size, this.data, options);\n\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes(false));\n    }\n\n    return shapes;\n  }\n\n}\n\n_defineProperty(Font, \"isFont\", void 0);\n\n_defineProperty(Font, \"type\", void 0);\n\nfunction createPaths(text, size, data, options) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n      offsetY = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height * options.lineHeight;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n\n      if (ret) {\n        offsetX += ret.offsetX + options.letterSpacing;\n        paths.push(ret.path);\n      }\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          cpx2 = parseInt(outline[i++]) * scale + offsetX;\n          cpy2 = parseInt(outline[i++]) * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path\n  };\n}\n\nexport { Font, FontLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}