{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Mesh, BufferGeometry, Float32BufferAttribute, MeshStandardMaterial, DataTexture3D, RedFormat, NearestFilter, LinearFilter } from 'three';\nvar VOXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(VOXLoader, _Loader);\n  var _super = _createSuper(VOXLoader);\n  function VOXLoader() {\n    _classCallCheck(this, VOXLoader);\n    return _super.apply(this, arguments);\n  }\n  _createClass(VOXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buffer) {\n      var data = new DataView(buffer);\n      var id = data.getUint32(0, true);\n      var version = data.getUint32(4, true);\n      if (id !== 542658390 || version !== 150) {\n        console.error('Not a valid VOX file');\n        return;\n      }\n      var DEFAULT_PALETTE = [0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff, 0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff, 0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc, 0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc, 0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99, 0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699, 0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66, 0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666, 0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066, 0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933, 0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033, 0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00, 0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300, 0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044, 0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000, 0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111];\n      var i = 8;\n      var chunk;\n      var chunks = [];\n      while (i < data.byteLength) {\n        var _id = '';\n        for (var j = 0; j < 4; j++) {\n          _id += String.fromCharCode(data.getUint8(i++, true));\n        }\n        var chunkSize = data.getUint32(i, true);\n        i += 4;\n        data.getUint32(i, true);\n        i += 4; // childChunks\n\n        if (_id === 'SIZE') {\n          var x = data.getUint32(i, true);\n          i += 4;\n          var y = data.getUint32(i, true);\n          i += 4;\n          var z = data.getUint32(i, true);\n          i += 4;\n          chunk = {\n            palette: DEFAULT_PALETTE,\n            size: {\n              x: x,\n              y: y,\n              z: z\n            }\n          };\n          chunks.push(chunk);\n          i += chunkSize - 3 * 4;\n        } else if (_id === 'XYZI') {\n          var numVoxels = data.getUint32(i, true);\n          i += 4;\n          chunk.data = new Uint8Array(buffer, i, numVoxels * 4);\n          i += numVoxels * 4;\n        } else if (_id === 'RGBA') {\n          var palette = [0];\n          for (var _j = 0; _j < 256; _j++) {\n            palette[_j + 1] = data.getUint32(i, true);\n            i += 4;\n          }\n          chunk.palette = palette;\n        } else {\n          // console.log( id, chunkSize, childChunks );\n          i += chunkSize;\n        }\n      }\n      return chunks;\n    }\n  }]);\n  return VOXLoader;\n}(Loader);\nvar VOXMesh = /*#__PURE__*/function (_Mesh) {\n  _inherits(VOXMesh, _Mesh);\n  var _super2 = _createSuper(VOXMesh);\n  function VOXMesh(chunk) {\n    _classCallCheck(this, VOXMesh);\n    var data = chunk.data;\n    var size = chunk.size;\n    var palette = chunk.palette; //\n\n    var vertices = [];\n    var colors = [];\n    var nx = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1];\n    var px = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0];\n    var py = [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1];\n    var ny = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0];\n    var nz = [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0];\n    var pz = [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1];\n    function add(tile, x, y, z, r, g, b) {\n      x -= size.x / 2;\n      y -= size.z / 2;\n      z += size.y / 2;\n      for (var i = 0; i < 18; i += 3) {\n        vertices.push(tile[i + 0] + x, tile[i + 1] + y, tile[i + 2] + z);\n        colors.push(r, g, b);\n      }\n    } // Store data in a volume for sampling\n\n    var offsety = size.x;\n    var offsetz = size.x * size.y;\n    var array = new Uint8Array(size.x * size.y * size.z);\n    for (var j = 0; j < data.length; j += 4) {\n      var x = data[j + 0];\n      var y = data[j + 1];\n      var z = data[j + 2];\n      var index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    } // Construct geometry\n\n    var hasColors = false;\n    for (var _j2 = 0; _j2 < data.length; _j2 += 4) {\n      var _x = data[_j2 + 0];\n      var _y = data[_j2 + 1];\n      var _z = data[_j2 + 2];\n      var c = data[_j2 + 3];\n      var hex = palette[c];\n      var r = (hex >> 0 & 0xff) / 0xff;\n      var g = (hex >> 8 & 0xff) / 0xff;\n      var b = (hex >> 16 & 0xff) / 0xff;\n      if (r > 0 || g > 0 || b > 0) hasColors = true;\n      var _index = _x + _y * offsety + _z * offsetz;\n      if (array[_index + 1] === 0 || _x === size.x - 1) add(px, _x, _z, -_y, r, g, b);\n      if (array[_index - 1] === 0 || _x === 0) add(nx, _x, _z, -_y, r, g, b);\n      if (array[_index + offsety] === 0 || _y === size.y - 1) add(ny, _x, _z, -_y, r, g, b);\n      if (array[_index - offsety] === 0 || _y === 0) add(py, _x, _z, -_y, r, g, b);\n      if (array[_index + offsetz] === 0 || _z === size.z - 1) add(pz, _x, _z, -_y, r, g, b);\n      if (array[_index - offsetz] === 0 || _z === 0) add(nz, _x, _z, -_y, r, g, b);\n    }\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.computeVertexNormals();\n    var material = new MeshStandardMaterial();\n    if (hasColors) {\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      material.vertexColors = true;\n    }\n    return _super2.call(this, geometry, material);\n  }\n  return _createClass(VOXMesh);\n}(Mesh);\nvar VOXDataTexture3D = /*#__PURE__*/function (_DataTexture3D) {\n  _inherits(VOXDataTexture3D, _DataTexture3D);\n  var _super3 = _createSuper(VOXDataTexture3D);\n  function VOXDataTexture3D(chunk) {\n    var _this;\n    _classCallCheck(this, VOXDataTexture3D);\n    var data = chunk.data;\n    var size = chunk.size;\n    var offsety = size.x;\n    var offsetz = size.x * size.y;\n    var array = new Uint8Array(size.x * size.y * size.z);\n    for (var j = 0; j < data.length; j += 4) {\n      var x = data[j + 0];\n      var y = data[j + 1];\n      var z = data[j + 2];\n      var index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    }\n    _this = _super3.call(this, array, size.x, size.y, size.z);\n    _this.format = RedFormat;\n    _this.minFilter = NearestFilter;\n    _this.magFilter = LinearFilter;\n    _this.unpackAlignment = 1;\n    return _this;\n  }\n  return _createClass(VOXDataTexture3D);\n}(DataTexture3D);\nexport { VOXDataTexture3D, VOXLoader, VOXMesh };","map":{"version":3,"names":["Loader","FileLoader","Mesh","BufferGeometry","Float32BufferAttribute","MeshStandardMaterial","DataTexture3D","RedFormat","NearestFilter","LinearFilter","VOXLoader","url","onLoad","onProgress","onError","scope","loader","manager","setPath","path","setResponseType","setRequestHeader","requestHeader","load","buffer","parse","e","console","error","itemError","data","DataView","id","getUint32","version","DEFAULT_PALETTE","i","chunk","chunks","byteLength","j","String","fromCharCode","getUint8","chunkSize","x","y","z","palette","size","push","numVoxels","Uint8Array","VOXMesh","vertices","colors","nx","px","py","ny","nz","pz","add","tile","r","g","b","offsety","offsetz","array","length","index","hasColors","c","hex","geometry","setAttribute","computeVertexNormals","material","vertexColors","VOXDataTexture3D","format","minFilter","magFilter","unpackAlignment"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/loaders/VOXLoader.js"],"sourcesContent":["import { Loader, FileLoader, Mesh, BufferGeometry, Float32BufferAttribute, MeshStandardMaterial, DataTexture3D, RedFormat, NearestFilter, LinearFilter } from 'three';\n\nclass VOXLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(buffer) {\n    const data = new DataView(buffer);\n    const id = data.getUint32(0, true);\n    const version = data.getUint32(4, true);\n\n    if (id !== 542658390 || version !== 150) {\n      console.error('Not a valid VOX file');\n      return;\n    }\n\n    const DEFAULT_PALETTE = [0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff, 0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff, 0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc, 0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc, 0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99, 0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699, 0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66, 0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666, 0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066, 0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933, 0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033, 0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00, 0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300, 0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044, 0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000, 0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111];\n    let i = 8;\n    let chunk;\n    const chunks = [];\n\n    while (i < data.byteLength) {\n      let id = '';\n\n      for (let j = 0; j < 4; j++) {\n        id += String.fromCharCode(data.getUint8(i++, true));\n      }\n\n      const chunkSize = data.getUint32(i, true);\n      i += 4;\n      data.getUint32(i, true);\n      i += 4; // childChunks\n\n      if (id === 'SIZE') {\n        const x = data.getUint32(i, true);\n        i += 4;\n        const y = data.getUint32(i, true);\n        i += 4;\n        const z = data.getUint32(i, true);\n        i += 4;\n        chunk = {\n          palette: DEFAULT_PALETTE,\n          size: {\n            x: x,\n            y: y,\n            z: z\n          }\n        };\n        chunks.push(chunk);\n        i += chunkSize - 3 * 4;\n      } else if (id === 'XYZI') {\n        const numVoxels = data.getUint32(i, true);\n        i += 4;\n        chunk.data = new Uint8Array(buffer, i, numVoxels * 4);\n        i += numVoxels * 4;\n      } else if (id === 'RGBA') {\n        const palette = [0];\n\n        for (let j = 0; j < 256; j++) {\n          palette[j + 1] = data.getUint32(i, true);\n          i += 4;\n        }\n\n        chunk.palette = palette;\n      } else {\n        // console.log( id, chunkSize, childChunks );\n        i += chunkSize;\n      }\n    }\n\n    return chunks;\n  }\n\n}\n\nclass VOXMesh extends Mesh {\n  constructor(chunk) {\n    const data = chunk.data;\n    const size = chunk.size;\n    const palette = chunk.palette; //\n\n    const vertices = [];\n    const colors = [];\n    const nx = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1];\n    const px = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0];\n    const py = [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1];\n    const ny = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0];\n    const nz = [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0];\n    const pz = [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1];\n\n    function add(tile, x, y, z, r, g, b) {\n      x -= size.x / 2;\n      y -= size.z / 2;\n      z += size.y / 2;\n\n      for (let i = 0; i < 18; i += 3) {\n        vertices.push(tile[i + 0] + x, tile[i + 1] + y, tile[i + 2] + z);\n        colors.push(r, g, b);\n      }\n    } // Store data in a volume for sampling\n\n\n    const offsety = size.x;\n    const offsetz = size.x * size.y;\n    const array = new Uint8Array(size.x * size.y * size.z);\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    } // Construct geometry\n\n\n    let hasColors = false;\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const c = data[j + 3];\n      const hex = palette[c];\n      const r = (hex >> 0 & 0xff) / 0xff;\n      const g = (hex >> 8 & 0xff) / 0xff;\n      const b = (hex >> 16 & 0xff) / 0xff;\n      if (r > 0 || g > 0 || b > 0) hasColors = true;\n      const index = x + y * offsety + z * offsetz;\n      if (array[index + 1] === 0 || x === size.x - 1) add(px, x, z, -y, r, g, b);\n      if (array[index - 1] === 0 || x === 0) add(nx, x, z, -y, r, g, b);\n      if (array[index + offsety] === 0 || y === size.y - 1) add(ny, x, z, -y, r, g, b);\n      if (array[index - offsety] === 0 || y === 0) add(py, x, z, -y, r, g, b);\n      if (array[index + offsetz] === 0 || z === size.z - 1) add(pz, x, z, -y, r, g, b);\n      if (array[index - offsetz] === 0 || z === 0) add(nz, x, z, -y, r, g, b);\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.computeVertexNormals();\n    const material = new MeshStandardMaterial();\n\n    if (hasColors) {\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      material.vertexColors = true;\n    }\n\n    super(geometry, material);\n  }\n\n}\n\nclass VOXDataTexture3D extends DataTexture3D {\n  constructor(chunk) {\n    const data = chunk.data;\n    const size = chunk.size;\n    const offsety = size.x;\n    const offsetz = size.x * size.y;\n    const array = new Uint8Array(size.x * size.y * size.z);\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    }\n\n    super(array, size.x, size.y, size.z);\n    this.format = RedFormat;\n    this.minFilter = NearestFilter;\n    this.magFilter = LinearFilter;\n    this.unpackAlignment = 1;\n  }\n\n}\n\nexport { VOXDataTexture3D, VOXLoader, VOXMesh };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}