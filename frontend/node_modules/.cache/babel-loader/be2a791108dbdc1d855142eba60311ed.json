{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, TextureLoader, Points, LineSegments, Mesh, PointsMaterial, LineBasicMaterial, BufferAttribute, MeshPhongMaterial, BackSide, DoubleSide, FrontSide, Vector2, Color, AddOperation, EquirectangularRefractionMapping, EquirectangularReflectionMapping, ClampToEdgeWrapping, MirroredRepeatWrapping, RepeatWrapping, MeshPhysicalMaterial, MeshStandardMaterial, BufferGeometry, Float32BufferAttribute } from 'three';\nimport { IFFParser } from './lwo/IFFParser.js';\n\n/**\n * @version 1.1.1\n *\n * @desc Load files in LWO3 and LWO2 format on Three.js\n *\n * LWO3 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo3.html\n *\n * LWO2 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo2.html\n *\n **/\n\nvar _lwoTree;\nvar LWOLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LWOLoader, _Loader);\n  var _super = _createSuper(LWOLoader);\n  function LWOLoader(manager) {\n    var _this;\n    var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, LWOLoader);\n    _this = _super.call(this, manager);\n    _this.resourcePath = parameters.resourcePath !== undefined ? parameters.resourcePath : '';\n    return _this;\n  }\n  _createClass(LWOLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? extractParentUrl(url, 'Objects') : scope.path; // give the mesh a default name based on the filename\n\n      var modelName = url.split(path).pop().split('.')[0];\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (buffer) {\n        // console.time( 'Total parsing: ' );\n        try {\n          onLoad(scope.parse(buffer, path, modelName));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        } // console.timeEnd( 'Total parsing: ' );\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(iffBuffer, path, modelName) {\n      _lwoTree = new IFFParser().parse(iffBuffer); // console.log( 'lwoTree', lwoTree );\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new LWOTreeParser(textureLoader).parse(modelName);\n    }\n  }]);\n  return LWOLoader;\n}(Loader); // Parse the lwoTree object\nvar LWOTreeParser = /*#__PURE__*/function () {\n  function LWOTreeParser(textureLoader) {\n    _classCallCheck(this, LWOTreeParser);\n    this.textureLoader = textureLoader;\n  }\n  _createClass(LWOTreeParser, [{\n    key: \"parse\",\n    value: function parse(modelName) {\n      this.materials = new MaterialParser(this.textureLoader).parse();\n      this.defaultLayerName = modelName;\n      this.meshes = this.parseLayers();\n      return {\n        materials: this.materials,\n        meshes: this.meshes\n      };\n    }\n  }, {\n    key: \"parseLayers\",\n    value: function parseLayers() {\n      // array of all meshes for building hierarchy\n      var meshes = []; // final array containing meshes with scene graph hierarchy set up\n\n      var finalMeshes = [];\n      var geometryParser = new GeometryParser();\n      var scope = this;\n      _lwoTree.layers.forEach(function (layer) {\n        var geometry = geometryParser.parse(layer.geometry, layer);\n        var mesh = scope.parseMesh(geometry, layer);\n        meshes[layer.number] = mesh;\n        if (layer.parent === -1) finalMeshes.push(mesh);else meshes[layer.parent].add(mesh);\n      });\n      this.applyPivots(finalMeshes);\n      return finalMeshes;\n    }\n  }, {\n    key: \"parseMesh\",\n    value: function parseMesh(geometry, layer) {\n      var mesh;\n      var materials = this.getMaterials(geometry.userData.matNames, layer.geometry.type);\n      this.duplicateUVs(geometry, materials);\n      if (layer.geometry.type === 'points') mesh = new Points(geometry, materials);else if (layer.geometry.type === 'lines') mesh = new LineSegments(geometry, materials);else mesh = new Mesh(geometry, materials);\n      if (layer.name) mesh.name = layer.name;else mesh.name = this.defaultLayerName + '_layer_' + layer.number;\n      mesh.userData.pivot = layer.pivot;\n      return mesh;\n    } // TODO: may need to be reversed in z to convert LWO to three.js coordinates\n  }, {\n    key: \"applyPivots\",\n    value: function applyPivots(meshes) {\n      meshes.forEach(function (mesh) {\n        mesh.traverse(function (child) {\n          var pivot = child.userData.pivot;\n          child.position.x += pivot[0];\n          child.position.y += pivot[1];\n          child.position.z += pivot[2];\n          if (child.parent) {\n            var parentPivot = child.parent.userData.pivot;\n            child.position.x -= parentPivot[0];\n            child.position.y -= parentPivot[1];\n            child.position.z -= parentPivot[2];\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getMaterials\",\n    value: function getMaterials(namesArray, type) {\n      var materials = [];\n      var scope = this;\n      namesArray.forEach(function (name, i) {\n        materials[i] = scope.getMaterialByName(name);\n      }); // convert materials to line or point mats if required\n\n      if (type === 'points' || type === 'lines') {\n        materials.forEach(function (mat, i) {\n          var spec = {\n            color: mat.color\n          };\n          if (type === 'points') {\n            spec.size = 0.1;\n            spec.map = mat.map;\n            spec.morphTargets = mat.morphTargets;\n            materials[i] = new PointsMaterial(spec);\n          } else if (type === 'lines') {\n            materials[i] = new LineBasicMaterial(spec);\n          }\n        });\n      } // if there is only one material, return that directly instead of array\n\n      var filtered = materials.filter(Boolean);\n      if (filtered.length === 1) return filtered[0];\n      return materials;\n    }\n  }, {\n    key: \"getMaterialByName\",\n    value: function getMaterialByName(name) {\n      return this.materials.filter(function (m) {\n        return m.name === name;\n      })[0];\n    } // If the material has an aoMap, duplicate UVs\n  }, {\n    key: \"duplicateUVs\",\n    value: function duplicateUVs(geometry, materials) {\n      var duplicateUVs = false;\n      if (!Array.isArray(materials)) {\n        if (materials.aoMap) duplicateUVs = true;\n      } else {\n        materials.forEach(function (material) {\n          if (material.aoMap) duplicateUVs = true;\n        });\n      }\n      if (!duplicateUVs) return;\n      geometry.setAttribute('uv2', new BufferAttribute(geometry.attributes.uv.array, 2));\n    }\n  }]);\n  return LWOTreeParser;\n}();\nvar MaterialParser = /*#__PURE__*/function () {\n  function MaterialParser(textureLoader) {\n    _classCallCheck(this, MaterialParser);\n    this.textureLoader = textureLoader;\n  }\n  _createClass(MaterialParser, [{\n    key: \"parse\",\n    value: function parse() {\n      var materials = [];\n      this.textures = {};\n      for (var name in _lwoTree.materials) {\n        if (_lwoTree.format === 'LWO3') {\n          materials.push(this.parseMaterial(_lwoTree.materials[name], name, _lwoTree.textures));\n        } else if (_lwoTree.format === 'LWO2') {\n          materials.push(this.parseMaterialLwo2(_lwoTree.materials[name], name, _lwoTree.textures));\n        }\n      }\n      return materials;\n    }\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(materialData, name, textures) {\n      var params = {\n        name: name,\n        side: this.getSide(materialData.attributes),\n        flatShading: this.getSmooth(materialData.attributes)\n      };\n      var connections = this.parseConnections(materialData.connections, materialData.nodes);\n      var maps = this.parseTextureNodes(connections.maps);\n      this.parseAttributeImageMaps(connections.attributes, textures, maps, materialData.maps);\n      var attributes = this.parseAttributes(connections.attributes, maps);\n      this.parseEnvMap(connections, maps, attributes);\n      params = Object.assign(maps, params);\n      params = Object.assign(params, attributes);\n      var materialType = this.getMaterialType(connections.attributes);\n      return new materialType(params);\n    }\n  }, {\n    key: \"parseMaterialLwo2\",\n    value: function parseMaterialLwo2(materialData, name\n    /*, textures*/) {\n      var params = {\n        name: name,\n        side: this.getSide(materialData.attributes),\n        flatShading: this.getSmooth(materialData.attributes)\n      };\n      var attributes = this.parseAttributes(materialData.attributes, {});\n      params = Object.assign(params, attributes);\n      return new MeshPhongMaterial(params);\n    } // Note: converting from left to right handed coords by switching x -> -x in vertices, and\n    // then switching mat FrontSide -> BackSide\n    // NB: this means that FrontSide and BackSide have been switched!\n  }, {\n    key: \"getSide\",\n    value: function getSide(attributes) {\n      if (!attributes.side) return BackSide;\n      switch (attributes.side) {\n        case 0:\n        case 1:\n          return BackSide;\n        case 2:\n          return FrontSide;\n        case 3:\n          return DoubleSide;\n      }\n    }\n  }, {\n    key: \"getSmooth\",\n    value: function getSmooth(attributes) {\n      if (!attributes.smooth) return true;\n      return !attributes.smooth;\n    }\n  }, {\n    key: \"parseConnections\",\n    value: function parseConnections(connections, nodes) {\n      var materialConnections = {\n        maps: {}\n      };\n      var inputName = connections.inputName;\n      var inputNodeName = connections.inputNodeName;\n      var nodeName = connections.nodeName;\n      var scope = this;\n      inputName.forEach(function (name, index) {\n        if (name === 'Material') {\n          var matNode = scope.getNodeByRefName(inputNodeName[index], nodes);\n          materialConnections.attributes = matNode.attributes;\n          materialConnections.envMap = matNode.fileName;\n          materialConnections.name = inputNodeName[index];\n        }\n      });\n      nodeName.forEach(function (name, index) {\n        if (name === materialConnections.name) {\n          materialConnections.maps[inputName[index]] = scope.getNodeByRefName(inputNodeName[index], nodes);\n        }\n      });\n      return materialConnections;\n    }\n  }, {\n    key: \"getNodeByRefName\",\n    value: function getNodeByRefName(refName, nodes) {\n      for (var name in nodes) {\n        if (nodes[name].refName === refName) return nodes[name];\n      }\n    }\n  }, {\n    key: \"parseTextureNodes\",\n    value: function parseTextureNodes(textureNodes) {\n      var maps = {};\n      for (var name in textureNodes) {\n        var node = textureNodes[name];\n        var path = node.fileName;\n        if (!path) return;\n        var texture = this.loadTexture(path);\n        if (node.widthWrappingMode !== undefined) texture.wrapS = this.getWrappingType(node.widthWrappingMode);\n        if (node.heightWrappingMode !== undefined) texture.wrapT = this.getWrappingType(node.heightWrappingMode);\n        switch (name) {\n          case 'Color':\n            maps.map = texture;\n            break;\n          case 'Roughness':\n            maps.roughnessMap = texture;\n            maps.roughness = 0.5;\n            break;\n          case 'Specular':\n            maps.specularMap = texture;\n            maps.specular = 0xffffff;\n            break;\n          case 'Luminous':\n            maps.emissiveMap = texture;\n            maps.emissive = 0x808080;\n            break;\n          case 'Luminous Color':\n            maps.emissive = 0x808080;\n            break;\n          case 'Metallic':\n            maps.metalnessMap = texture;\n            maps.metalness = 0.5;\n            break;\n          case 'Transparency':\n          case 'Alpha':\n            maps.alphaMap = texture;\n            maps.transparent = true;\n            break;\n          case 'Normal':\n            maps.normalMap = texture;\n            if (node.amplitude !== undefined) maps.normalScale = new Vector2(node.amplitude, node.amplitude);\n            break;\n          case 'Bump':\n            maps.bumpMap = texture;\n            break;\n        }\n      } // LWO BSDF materials can have both spec and rough, but this is not valid in three\n\n      if (maps.roughnessMap && maps.specularMap) delete maps.specularMap;\n      return maps;\n    } // maps can also be defined on individual material attributes, parse those here\n    // This occurs on Standard (Phong) surfaces\n  }, {\n    key: \"parseAttributeImageMaps\",\n    value: function parseAttributeImageMaps(attributes, textures, maps) {\n      for (var name in attributes) {\n        var attribute = attributes[name];\n        if (attribute.maps) {\n          var mapData = attribute.maps[0];\n          var path = this.getTexturePathByIndex(mapData.imageIndex, textures);\n          if (!path) return;\n          var texture = this.loadTexture(path);\n          if (mapData.wrap !== undefined) texture.wrapS = this.getWrappingType(mapData.wrap.w);\n          if (mapData.wrap !== undefined) texture.wrapT = this.getWrappingType(mapData.wrap.h);\n          switch (name) {\n            case 'Color':\n              maps.map = texture;\n              break;\n            case 'Diffuse':\n              maps.aoMap = texture;\n              break;\n            case 'Roughness':\n              maps.roughnessMap = texture;\n              maps.roughness = 1;\n              break;\n            case 'Specular':\n              maps.specularMap = texture;\n              maps.specular = 0xffffff;\n              break;\n            case 'Luminosity':\n              maps.emissiveMap = texture;\n              maps.emissive = 0x808080;\n              break;\n            case 'Metallic':\n              maps.metalnessMap = texture;\n              maps.metalness = 1;\n              break;\n            case 'Transparency':\n            case 'Alpha':\n              maps.alphaMap = texture;\n              maps.transparent = true;\n              break;\n            case 'Normal':\n              maps.normalMap = texture;\n              break;\n            case 'Bump':\n              maps.bumpMap = texture;\n              break;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"parseAttributes\",\n    value: function parseAttributes(attributes, maps) {\n      var params = {}; // don't use color data if color map is present\n\n      if (attributes.Color && !maps.map) {\n        params.color = new Color().fromArray(attributes.Color.value);\n      } else {\n        params.color = new Color();\n      }\n      if (attributes.Transparency && attributes.Transparency.value !== 0) {\n        params.opacity = 1 - attributes.Transparency.value;\n        params.transparent = true;\n      }\n      if (attributes['Bump Height']) params.bumpScale = attributes['Bump Height'].value * 0.1;\n      if (attributes['Refraction Index']) params.refractionRatio = 1 / attributes['Refraction Index'].value;\n      this.parsePhysicalAttributes(params, attributes, maps);\n      this.parseStandardAttributes(params, attributes, maps);\n      this.parsePhongAttributes(params, attributes, maps);\n      return params;\n    }\n  }, {\n    key: \"parsePhysicalAttributes\",\n    value: function parsePhysicalAttributes(params, attributes\n    /*, maps*/) {\n      if (attributes.Clearcoat && attributes.Clearcoat.value > 0) {\n        params.clearcoat = attributes.Clearcoat.value;\n        if (attributes['Clearcoat Gloss']) {\n          params.clearcoatRoughness = 0.5 * (1 - attributes['Clearcoat Gloss'].value);\n        }\n      }\n    }\n  }, {\n    key: \"parseStandardAttributes\",\n    value: function parseStandardAttributes(params, attributes, maps) {\n      if (attributes.Luminous) {\n        params.emissiveIntensity = attributes.Luminous.value;\n        if (attributes['Luminous Color'] && !maps.emissive) {\n          params.emissive = new Color().fromArray(attributes['Luminous Color'].value);\n        } else {\n          params.emissive = new Color(0x808080);\n        }\n      }\n      if (attributes.Roughness && !maps.roughnessMap) params.roughness = attributes.Roughness.value;\n      if (attributes.Metallic && !maps.metalnessMap) params.metalness = attributes.Metallic.value;\n    }\n  }, {\n    key: \"parsePhongAttributes\",\n    value: function parsePhongAttributes(params, attributes, maps) {\n      if (attributes.Diffuse) params.color.multiplyScalar(attributes.Diffuse.value);\n      if (attributes.Reflection) {\n        params.reflectivity = attributes.Reflection.value;\n        params.combine = AddOperation;\n      }\n      if (attributes.Luminosity) {\n        params.emissiveIntensity = attributes.Luminosity.value;\n        if (!maps.emissiveMap && !maps.map) {\n          params.emissive = params.color;\n        } else {\n          params.emissive = new Color(0x808080);\n        }\n      } // parse specular if there is no roughness - we will interpret the material as 'Phong' in this case\n\n      if (!attributes.Roughness && attributes.Specular && !maps.specularMap) {\n        if (attributes['Color Highlight']) {\n          params.specular = new Color().setScalar(attributes.Specular.value).lerp(params.color.clone().multiplyScalar(attributes.Specular.value), attributes['Color Highlight'].value);\n        } else {\n          params.specular = new Color().setScalar(attributes.Specular.value);\n        }\n      }\n      if (params.specular && attributes.Glossiness) {\n        params.shininess = 7 + Math.pow(2, attributes.Glossiness.value * 12 + 2);\n      }\n    }\n  }, {\n    key: \"parseEnvMap\",\n    value: function parseEnvMap(connections, maps, attributes) {\n      if (connections.envMap) {\n        var envMap = this.loadTexture(connections.envMap);\n        if (attributes.transparent && attributes.opacity < 0.999) {\n          envMap.mapping = EquirectangularRefractionMapping; // Reflectivity and refraction mapping don't work well together in Phong materials\n\n          if (attributes.reflectivity !== undefined) {\n            delete attributes.reflectivity;\n            delete attributes.combine;\n          }\n          if (attributes.metalness !== undefined) {\n            delete attributes.metalness;\n          }\n        } else {\n          envMap.mapping = EquirectangularReflectionMapping;\n        }\n        maps.envMap = envMap;\n      }\n    } // get texture defined at top level by its index\n  }, {\n    key: \"getTexturePathByIndex\",\n    value: function getTexturePathByIndex(index) {\n      var fileName = '';\n      if (!_lwoTree.textures) return fileName;\n      _lwoTree.textures.forEach(function (texture) {\n        if (texture.index === index) fileName = texture.fileName;\n      });\n      return fileName;\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(path) {\n      if (!path) return null;\n      var texture = this.textureLoader.load(path, undefined, undefined, function () {\n        console.warn('LWOLoader: non-standard resource hierarchy. Use `resourcePath` parameter to specify root content directory.');\n      });\n      return texture;\n    } // 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n  }, {\n    key: \"getWrappingType\",\n    value: function getWrappingType(num) {\n      switch (num) {\n        case 0:\n          console.warn('LWOLoader: \"Reset\" texture wrapping type is not supported in three.js');\n          return ClampToEdgeWrapping;\n        case 1:\n          return RepeatWrapping;\n        case 2:\n          return MirroredRepeatWrapping;\n        case 3:\n          return ClampToEdgeWrapping;\n      }\n    }\n  }, {\n    key: \"getMaterialType\",\n    value: function getMaterialType(nodeData) {\n      if (nodeData.Clearcoat && nodeData.Clearcoat.value > 0) return MeshPhysicalMaterial;\n      if (nodeData.Roughness) return MeshStandardMaterial;\n      return MeshPhongMaterial;\n    }\n  }]);\n  return MaterialParser;\n}();\nvar GeometryParser = /*#__PURE__*/function () {\n  function GeometryParser() {\n    _classCallCheck(this, GeometryParser);\n  }\n  _createClass(GeometryParser, [{\n    key: \"parse\",\n    value: function parse(geoData, layer) {\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(geoData.points, 3));\n      var indices = this.splitIndices(geoData.vertexIndices, geoData.polygonDimensions);\n      geometry.setIndex(indices);\n      this.parseGroups(geometry, geoData);\n      geometry.computeVertexNormals();\n      this.parseUVs(geometry, layer, indices);\n      this.parseMorphTargets(geometry, layer, indices); // TODO: z may need to be reversed to account for coordinate system change\n\n      geometry.translate(-layer.pivot[0], -layer.pivot[1], -layer.pivot[2]); // let userData = geometry.userData;\n      // geometry = geometry.toNonIndexed()\n      // geometry.userData = userData;\n\n      return geometry;\n    } // split quads into tris\n  }, {\n    key: \"splitIndices\",\n    value: function splitIndices(indices, polygonDimensions) {\n      var remappedIndices = [];\n      var i = 0;\n      polygonDimensions.forEach(function (dim) {\n        if (dim < 4) {\n          for (var k = 0; k < dim; k++) {\n            remappedIndices.push(indices[i + k]);\n          }\n        } else if (dim === 4) {\n          remappedIndices.push(indices[i], indices[i + 1], indices[i + 2], indices[i], indices[i + 2], indices[i + 3]);\n        } else if (dim > 4) {\n          for (var _k = 1; _k < dim - 1; _k++) {\n            remappedIndices.push(indices[i], indices[i + _k], indices[i + _k + 1]);\n          }\n          console.warn('LWOLoader: polygons with greater than 4 sides are not supported');\n        }\n        i += dim;\n      });\n      return remappedIndices;\n    } // NOTE: currently ignoring poly indices and assuming that they are intelligently ordered\n  }, {\n    key: \"parseGroups\",\n    value: function parseGroups(geometry, geoData) {\n      var tags = _lwoTree.tags;\n      var matNames = [];\n      var elemSize = 3;\n      if (geoData.type === 'lines') elemSize = 2;\n      if (geoData.type === 'points') elemSize = 1;\n      var remappedIndices = this.splitMaterialIndices(geoData.polygonDimensions, geoData.materialIndices);\n      var indexNum = 0; // create new indices in numerical order\n\n      var indexPairs = {}; // original indices mapped to numerical indices\n\n      var prevMaterialIndex;\n      var materialIndex;\n      var prevStart = 0;\n      var currentCount = 0;\n      for (var i = 0; i < remappedIndices.length; i += 2) {\n        materialIndex = remappedIndices[i + 1];\n        if (i === 0) matNames[indexNum] = tags[materialIndex];\n        if (prevMaterialIndex === undefined) prevMaterialIndex = materialIndex;\n        if (materialIndex !== prevMaterialIndex) {\n          var currentIndex = void 0;\n          if (indexPairs[tags[prevMaterialIndex]]) {\n            currentIndex = indexPairs[tags[prevMaterialIndex]];\n          } else {\n            currentIndex = indexNum;\n            indexPairs[tags[prevMaterialIndex]] = indexNum;\n            matNames[indexNum] = tags[prevMaterialIndex];\n            indexNum++;\n          }\n          geometry.addGroup(prevStart, currentCount, currentIndex);\n          prevStart += currentCount;\n          prevMaterialIndex = materialIndex;\n          currentCount = 0;\n        }\n        currentCount += elemSize;\n      } // the loop above doesn't add the last group, do that here.\n\n      if (geometry.groups.length > 0) {\n        var _currentIndex;\n        if (indexPairs[tags[materialIndex]]) {\n          _currentIndex = indexPairs[tags[materialIndex]];\n        } else {\n          _currentIndex = indexNum;\n          indexPairs[tags[materialIndex]] = indexNum;\n          matNames[indexNum] = tags[materialIndex];\n        }\n        geometry.addGroup(prevStart, currentCount, _currentIndex);\n      } // Mat names from TAGS chunk, used to build up an array of materials for this geometry\n\n      geometry.userData.matNames = matNames;\n    }\n  }, {\n    key: \"splitMaterialIndices\",\n    value: function splitMaterialIndices(polygonDimensions, indices) {\n      var remappedIndices = [];\n      polygonDimensions.forEach(function (dim, i) {\n        if (dim <= 3) {\n          remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n        } else if (dim === 4) {\n          remappedIndices.push(indices[i * 2], indices[i * 2 + 1], indices[i * 2], indices[i * 2 + 1]);\n        } else {\n          // ignore > 4 for now\n          for (var k = 0; k < dim - 2; k++) {\n            remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n          }\n        }\n      });\n      return remappedIndices;\n    } // UV maps:\n    // 1: are defined via index into an array of points, not into a geometry\n    // - the geometry is also defined by an index into this array, but the indexes may not match\n    // 2: there can be any number of UV maps for a single geometry. Here these are combined,\n    // \twith preference given to the first map encountered\n    // 3: UV maps can be partial - that is, defined for only a part of the geometry\n    // 4: UV maps can be VMAP or VMAD (discontinuous, to allow for seams). In practice, most\n    // UV maps are defined as partially VMAP and partially VMAD\n    // VMADs are currently not supported\n  }, {\n    key: \"parseUVs\",\n    value: function parseUVs(geometry, layer) {\n      // start by creating a UV map set to zero for the whole geometry\n      var remappedUVs = Array.from(Array(geometry.attributes.position.count * 2), function () {\n        return 0;\n      });\n      var _loop = function _loop(name) {\n        var uvs = layer.uvs[name].uvs;\n        var uvIndices = layer.uvs[name].uvIndices;\n        uvIndices.forEach(function (i, j) {\n          remappedUVs[i * 2] = uvs[j * 2];\n          remappedUVs[i * 2 + 1] = uvs[j * 2 + 1];\n        });\n      };\n      for (var name in layer.uvs) {\n        _loop(name);\n      }\n      geometry.setAttribute('uv', new Float32BufferAttribute(remappedUVs, 2));\n    }\n  }, {\n    key: \"parseMorphTargets\",\n    value: function parseMorphTargets(geometry, layer) {\n      var num = 0;\n      var _loop2 = function _loop2(name) {\n        var remappedPoints = geometry.attributes.position.array.slice();\n        if (!geometry.morphAttributes.position) geometry.morphAttributes.position = [];\n        var morphPoints = layer.morphTargets[name].points;\n        var morphIndices = layer.morphTargets[name].indices;\n        var type = layer.morphTargets[name].type;\n        morphIndices.forEach(function (i, j) {\n          if (type === 'relative') {\n            remappedPoints[i * 3] += morphPoints[j * 3];\n            remappedPoints[i * 3 + 1] += morphPoints[j * 3 + 1];\n            remappedPoints[i * 3 + 2] += morphPoints[j * 3 + 2];\n          } else {\n            remappedPoints[i * 3] = morphPoints[j * 3];\n            remappedPoints[i * 3 + 1] = morphPoints[j * 3 + 1];\n            remappedPoints[i * 3 + 2] = morphPoints[j * 3 + 2];\n          }\n        });\n        geometry.morphAttributes.position[num] = new Float32BufferAttribute(remappedPoints, 3);\n        geometry.morphAttributes.position[num].name = name;\n        num++;\n      };\n      for (var name in layer.morphTargets) {\n        _loop2(name);\n      }\n      geometry.morphTargetsRelative = false;\n    }\n  }]);\n  return GeometryParser;\n}(); // ************** UTILITY FUNCTIONS **************\nfunction extractParentUrl(url, dir) {\n  var index = url.indexOf(dir);\n  if (index === -1) return './';\n  return url.substr(0, index);\n}\nexport { LWOLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","Points","LineSegments","Mesh","PointsMaterial","LineBasicMaterial","BufferAttribute","MeshPhongMaterial","BackSide","DoubleSide","FrontSide","Vector2","Color","AddOperation","EquirectangularRefractionMapping","EquirectangularReflectionMapping","ClampToEdgeWrapping","MirroredRepeatWrapping","RepeatWrapping","MeshPhysicalMaterial","MeshStandardMaterial","BufferGeometry","Float32BufferAttribute","IFFParser","_lwoTree","LWOLoader","manager","parameters","resourcePath","undefined","url","onLoad","onProgress","onError","scope","path","extractParentUrl","modelName","split","pop","loader","setPath","setResponseType","load","buffer","parse","e","console","error","itemError","iffBuffer","textureLoader","setCrossOrigin","crossOrigin","LWOTreeParser","materials","MaterialParser","defaultLayerName","meshes","parseLayers","finalMeshes","geometryParser","GeometryParser","layers","forEach","layer","geometry","mesh","parseMesh","number","parent","push","add","applyPivots","getMaterials","userData","matNames","type","duplicateUVs","name","pivot","traverse","child","position","x","y","z","parentPivot","namesArray","i","getMaterialByName","mat","spec","color","size","map","morphTargets","filtered","filter","Boolean","length","m","Array","isArray","aoMap","material","setAttribute","attributes","uv","array","textures","format","parseMaterial","parseMaterialLwo2","materialData","params","side","getSide","flatShading","getSmooth","connections","parseConnections","nodes","maps","parseTextureNodes","parseAttributeImageMaps","parseAttributes","parseEnvMap","Object","assign","materialType","getMaterialType","smooth","materialConnections","inputName","inputNodeName","nodeName","index","matNode","getNodeByRefName","envMap","fileName","refName","textureNodes","node","texture","loadTexture","widthWrappingMode","wrapS","getWrappingType","heightWrappingMode","wrapT","roughnessMap","roughness","specularMap","specular","emissiveMap","emissive","metalnessMap","metalness","alphaMap","transparent","normalMap","amplitude","normalScale","bumpMap","attribute","mapData","getTexturePathByIndex","imageIndex","wrap","w","h","fromArray","value","Transparency","opacity","bumpScale","refractionRatio","parsePhysicalAttributes","parseStandardAttributes","parsePhongAttributes","Clearcoat","clearcoat","clearcoatRoughness","Luminous","emissiveIntensity","Roughness","Metallic","Diffuse","multiplyScalar","Reflection","reflectivity","combine","Luminosity","Specular","setScalar","lerp","clone","Glossiness","shininess","Math","pow","mapping","warn","num","nodeData","geoData","points","indices","splitIndices","vertexIndices","polygonDimensions","setIndex","parseGroups","computeVertexNormals","parseUVs","parseMorphTargets","translate","remappedIndices","dim","k","tags","elemSize","splitMaterialIndices","materialIndices","indexNum","indexPairs","prevMaterialIndex","materialIndex","prevStart","currentCount","currentIndex","addGroup","groups","remappedUVs","from","count","uvs","uvIndices","j","remappedPoints","slice","morphAttributes","morphPoints","morphIndices","morphTargetsRelative","dir","indexOf","substr"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/LWOLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, Points, LineSegments, Mesh, PointsMaterial, LineBasicMaterial, BufferAttribute, MeshPhongMaterial, BackSide, DoubleSide, FrontSide, Vector2, Color, AddOperation, EquirectangularRefractionMapping, EquirectangularReflectionMapping, ClampToEdgeWrapping, MirroredRepeatWrapping, RepeatWrapping, MeshPhysicalMaterial, MeshStandardMaterial, BufferGeometry, Float32BufferAttribute } from 'three';\nimport { IFFParser } from './lwo/IFFParser.js';\n\n/**\n * @version 1.1.1\n *\n * @desc Load files in LWO3 and LWO2 format on Three.js\n *\n * LWO3 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo3.html\n *\n * LWO2 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo2.html\n *\n **/\n\nlet _lwoTree;\n\nclass LWOLoader extends Loader {\n  constructor(manager, parameters = {}) {\n    super(manager);\n    this.resourcePath = parameters.resourcePath !== undefined ? parameters.resourcePath : '';\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? extractParentUrl(url, 'Objects') : scope.path; // give the mesh a default name based on the filename\n\n    const modelName = url.split(path).pop().split('.')[0];\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (buffer) {\n      // console.time( 'Total parsing: ' );\n      try {\n        onLoad(scope.parse(buffer, path, modelName));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      } // console.timeEnd( 'Total parsing: ' );\n\n    }, onProgress, onError);\n  }\n\n  parse(iffBuffer, path, modelName) {\n    _lwoTree = new IFFParser().parse(iffBuffer); // console.log( 'lwoTree', lwoTree );\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new LWOTreeParser(textureLoader).parse(modelName);\n  }\n\n} // Parse the lwoTree object\n\n\nclass LWOTreeParser {\n  constructor(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n\n  parse(modelName) {\n    this.materials = new MaterialParser(this.textureLoader).parse();\n    this.defaultLayerName = modelName;\n    this.meshes = this.parseLayers();\n    return {\n      materials: this.materials,\n      meshes: this.meshes\n    };\n  }\n\n  parseLayers() {\n    // array of all meshes for building hierarchy\n    const meshes = []; // final array containing meshes with scene graph hierarchy set up\n\n    const finalMeshes = [];\n    const geometryParser = new GeometryParser();\n    const scope = this;\n\n    _lwoTree.layers.forEach(function (layer) {\n      const geometry = geometryParser.parse(layer.geometry, layer);\n      const mesh = scope.parseMesh(geometry, layer);\n      meshes[layer.number] = mesh;\n      if (layer.parent === -1) finalMeshes.push(mesh);else meshes[layer.parent].add(mesh);\n    });\n\n    this.applyPivots(finalMeshes);\n    return finalMeshes;\n  }\n\n  parseMesh(geometry, layer) {\n    let mesh;\n    const materials = this.getMaterials(geometry.userData.matNames, layer.geometry.type);\n    this.duplicateUVs(geometry, materials);\n    if (layer.geometry.type === 'points') mesh = new Points(geometry, materials);else if (layer.geometry.type === 'lines') mesh = new LineSegments(geometry, materials);else mesh = new Mesh(geometry, materials);\n    if (layer.name) mesh.name = layer.name;else mesh.name = this.defaultLayerName + '_layer_' + layer.number;\n    mesh.userData.pivot = layer.pivot;\n    return mesh;\n  } // TODO: may need to be reversed in z to convert LWO to three.js coordinates\n\n\n  applyPivots(meshes) {\n    meshes.forEach(function (mesh) {\n      mesh.traverse(function (child) {\n        const pivot = child.userData.pivot;\n        child.position.x += pivot[0];\n        child.position.y += pivot[1];\n        child.position.z += pivot[2];\n\n        if (child.parent) {\n          const parentPivot = child.parent.userData.pivot;\n          child.position.x -= parentPivot[0];\n          child.position.y -= parentPivot[1];\n          child.position.z -= parentPivot[2];\n        }\n      });\n    });\n  }\n\n  getMaterials(namesArray, type) {\n    const materials = [];\n    const scope = this;\n    namesArray.forEach(function (name, i) {\n      materials[i] = scope.getMaterialByName(name);\n    }); // convert materials to line or point mats if required\n\n    if (type === 'points' || type === 'lines') {\n      materials.forEach(function (mat, i) {\n        const spec = {\n          color: mat.color\n        };\n\n        if (type === 'points') {\n          spec.size = 0.1;\n          spec.map = mat.map;\n          spec.morphTargets = mat.morphTargets;\n          materials[i] = new PointsMaterial(spec);\n        } else if (type === 'lines') {\n          materials[i] = new LineBasicMaterial(spec);\n        }\n      });\n    } // if there is only one material, return that directly instead of array\n\n\n    const filtered = materials.filter(Boolean);\n    if (filtered.length === 1) return filtered[0];\n    return materials;\n  }\n\n  getMaterialByName(name) {\n    return this.materials.filter(function (m) {\n      return m.name === name;\n    })[0];\n  } // If the material has an aoMap, duplicate UVs\n\n\n  duplicateUVs(geometry, materials) {\n    let duplicateUVs = false;\n\n    if (!Array.isArray(materials)) {\n      if (materials.aoMap) duplicateUVs = true;\n    } else {\n      materials.forEach(function (material) {\n        if (material.aoMap) duplicateUVs = true;\n      });\n    }\n\n    if (!duplicateUVs) return;\n    geometry.setAttribute('uv2', new BufferAttribute(geometry.attributes.uv.array, 2));\n  }\n\n}\n\nclass MaterialParser {\n  constructor(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n\n  parse() {\n    const materials = [];\n    this.textures = {};\n\n    for (const name in _lwoTree.materials) {\n      if (_lwoTree.format === 'LWO3') {\n        materials.push(this.parseMaterial(_lwoTree.materials[name], name, _lwoTree.textures));\n      } else if (_lwoTree.format === 'LWO2') {\n        materials.push(this.parseMaterialLwo2(_lwoTree.materials[name], name, _lwoTree.textures));\n      }\n    }\n\n    return materials;\n  }\n\n  parseMaterial(materialData, name, textures) {\n    let params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    const connections = this.parseConnections(materialData.connections, materialData.nodes);\n    const maps = this.parseTextureNodes(connections.maps);\n    this.parseAttributeImageMaps(connections.attributes, textures, maps, materialData.maps);\n    const attributes = this.parseAttributes(connections.attributes, maps);\n    this.parseEnvMap(connections, maps, attributes);\n    params = Object.assign(maps, params);\n    params = Object.assign(params, attributes);\n    const materialType = this.getMaterialType(connections.attributes);\n    return new materialType(params);\n  }\n\n  parseMaterialLwo2(materialData, name\n  /*, textures*/\n  ) {\n    let params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    const attributes = this.parseAttributes(materialData.attributes, {});\n    params = Object.assign(params, attributes);\n    return new MeshPhongMaterial(params);\n  } // Note: converting from left to right handed coords by switching x -> -x in vertices, and\n  // then switching mat FrontSide -> BackSide\n  // NB: this means that FrontSide and BackSide have been switched!\n\n\n  getSide(attributes) {\n    if (!attributes.side) return BackSide;\n\n    switch (attributes.side) {\n      case 0:\n      case 1:\n        return BackSide;\n\n      case 2:\n        return FrontSide;\n\n      case 3:\n        return DoubleSide;\n    }\n  }\n\n  getSmooth(attributes) {\n    if (!attributes.smooth) return true;\n    return !attributes.smooth;\n  }\n\n  parseConnections(connections, nodes) {\n    const materialConnections = {\n      maps: {}\n    };\n    const inputName = connections.inputName;\n    const inputNodeName = connections.inputNodeName;\n    const nodeName = connections.nodeName;\n    const scope = this;\n    inputName.forEach(function (name, index) {\n      if (name === 'Material') {\n        const matNode = scope.getNodeByRefName(inputNodeName[index], nodes);\n        materialConnections.attributes = matNode.attributes;\n        materialConnections.envMap = matNode.fileName;\n        materialConnections.name = inputNodeName[index];\n      }\n    });\n    nodeName.forEach(function (name, index) {\n      if (name === materialConnections.name) {\n        materialConnections.maps[inputName[index]] = scope.getNodeByRefName(inputNodeName[index], nodes);\n      }\n    });\n    return materialConnections;\n  }\n\n  getNodeByRefName(refName, nodes) {\n    for (const name in nodes) {\n      if (nodes[name].refName === refName) return nodes[name];\n    }\n  }\n\n  parseTextureNodes(textureNodes) {\n    const maps = {};\n\n    for (const name in textureNodes) {\n      const node = textureNodes[name];\n      const path = node.fileName;\n      if (!path) return;\n      const texture = this.loadTexture(path);\n      if (node.widthWrappingMode !== undefined) texture.wrapS = this.getWrappingType(node.widthWrappingMode);\n      if (node.heightWrappingMode !== undefined) texture.wrapT = this.getWrappingType(node.heightWrappingMode);\n\n      switch (name) {\n        case 'Color':\n          maps.map = texture;\n          break;\n\n        case 'Roughness':\n          maps.roughnessMap = texture;\n          maps.roughness = 0.5;\n          break;\n\n        case 'Specular':\n          maps.specularMap = texture;\n          maps.specular = 0xffffff;\n          break;\n\n        case 'Luminous':\n          maps.emissiveMap = texture;\n          maps.emissive = 0x808080;\n          break;\n\n        case 'Luminous Color':\n          maps.emissive = 0x808080;\n          break;\n\n        case 'Metallic':\n          maps.metalnessMap = texture;\n          maps.metalness = 0.5;\n          break;\n\n        case 'Transparency':\n        case 'Alpha':\n          maps.alphaMap = texture;\n          maps.transparent = true;\n          break;\n\n        case 'Normal':\n          maps.normalMap = texture;\n          if (node.amplitude !== undefined) maps.normalScale = new Vector2(node.amplitude, node.amplitude);\n          break;\n\n        case 'Bump':\n          maps.bumpMap = texture;\n          break;\n      }\n    } // LWO BSDF materials can have both spec and rough, but this is not valid in three\n\n\n    if (maps.roughnessMap && maps.specularMap) delete maps.specularMap;\n    return maps;\n  } // maps can also be defined on individual material attributes, parse those here\n  // This occurs on Standard (Phong) surfaces\n\n\n  parseAttributeImageMaps(attributes, textures, maps) {\n    for (const name in attributes) {\n      const attribute = attributes[name];\n\n      if (attribute.maps) {\n        const mapData = attribute.maps[0];\n        const path = this.getTexturePathByIndex(mapData.imageIndex, textures);\n        if (!path) return;\n        const texture = this.loadTexture(path);\n        if (mapData.wrap !== undefined) texture.wrapS = this.getWrappingType(mapData.wrap.w);\n        if (mapData.wrap !== undefined) texture.wrapT = this.getWrappingType(mapData.wrap.h);\n\n        switch (name) {\n          case 'Color':\n            maps.map = texture;\n            break;\n\n          case 'Diffuse':\n            maps.aoMap = texture;\n            break;\n\n          case 'Roughness':\n            maps.roughnessMap = texture;\n            maps.roughness = 1;\n            break;\n\n          case 'Specular':\n            maps.specularMap = texture;\n            maps.specular = 0xffffff;\n            break;\n\n          case 'Luminosity':\n            maps.emissiveMap = texture;\n            maps.emissive = 0x808080;\n            break;\n\n          case 'Metallic':\n            maps.metalnessMap = texture;\n            maps.metalness = 1;\n            break;\n\n          case 'Transparency':\n          case 'Alpha':\n            maps.alphaMap = texture;\n            maps.transparent = true;\n            break;\n\n          case 'Normal':\n            maps.normalMap = texture;\n            break;\n\n          case 'Bump':\n            maps.bumpMap = texture;\n            break;\n        }\n      }\n    }\n  }\n\n  parseAttributes(attributes, maps) {\n    const params = {}; // don't use color data if color map is present\n\n    if (attributes.Color && !maps.map) {\n      params.color = new Color().fromArray(attributes.Color.value);\n    } else {\n      params.color = new Color();\n    }\n\n    if (attributes.Transparency && attributes.Transparency.value !== 0) {\n      params.opacity = 1 - attributes.Transparency.value;\n      params.transparent = true;\n    }\n\n    if (attributes['Bump Height']) params.bumpScale = attributes['Bump Height'].value * 0.1;\n    if (attributes['Refraction Index']) params.refractionRatio = 1 / attributes['Refraction Index'].value;\n    this.parsePhysicalAttributes(params, attributes, maps);\n    this.parseStandardAttributes(params, attributes, maps);\n    this.parsePhongAttributes(params, attributes, maps);\n    return params;\n  }\n\n  parsePhysicalAttributes(params, attributes\n  /*, maps*/\n  ) {\n    if (attributes.Clearcoat && attributes.Clearcoat.value > 0) {\n      params.clearcoat = attributes.Clearcoat.value;\n\n      if (attributes['Clearcoat Gloss']) {\n        params.clearcoatRoughness = 0.5 * (1 - attributes['Clearcoat Gloss'].value);\n      }\n    }\n  }\n\n  parseStandardAttributes(params, attributes, maps) {\n    if (attributes.Luminous) {\n      params.emissiveIntensity = attributes.Luminous.value;\n\n      if (attributes['Luminous Color'] && !maps.emissive) {\n        params.emissive = new Color().fromArray(attributes['Luminous Color'].value);\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    }\n\n    if (attributes.Roughness && !maps.roughnessMap) params.roughness = attributes.Roughness.value;\n    if (attributes.Metallic && !maps.metalnessMap) params.metalness = attributes.Metallic.value;\n  }\n\n  parsePhongAttributes(params, attributes, maps) {\n    if (attributes.Diffuse) params.color.multiplyScalar(attributes.Diffuse.value);\n\n    if (attributes.Reflection) {\n      params.reflectivity = attributes.Reflection.value;\n      params.combine = AddOperation;\n    }\n\n    if (attributes.Luminosity) {\n      params.emissiveIntensity = attributes.Luminosity.value;\n\n      if (!maps.emissiveMap && !maps.map) {\n        params.emissive = params.color;\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    } // parse specular if there is no roughness - we will interpret the material as 'Phong' in this case\n\n\n    if (!attributes.Roughness && attributes.Specular && !maps.specularMap) {\n      if (attributes['Color Highlight']) {\n        params.specular = new Color().setScalar(attributes.Specular.value).lerp(params.color.clone().multiplyScalar(attributes.Specular.value), attributes['Color Highlight'].value);\n      } else {\n        params.specular = new Color().setScalar(attributes.Specular.value);\n      }\n    }\n\n    if (params.specular && attributes.Glossiness) {\n      params.shininess = 7 + Math.pow(2, attributes.Glossiness.value * 12 + 2);\n    }\n  }\n\n  parseEnvMap(connections, maps, attributes) {\n    if (connections.envMap) {\n      const envMap = this.loadTexture(connections.envMap);\n\n      if (attributes.transparent && attributes.opacity < 0.999) {\n        envMap.mapping = EquirectangularRefractionMapping; // Reflectivity and refraction mapping don't work well together in Phong materials\n\n        if (attributes.reflectivity !== undefined) {\n          delete attributes.reflectivity;\n          delete attributes.combine;\n        }\n\n        if (attributes.metalness !== undefined) {\n          delete attributes.metalness;\n        }\n      } else {\n        envMap.mapping = EquirectangularReflectionMapping;\n      }\n\n      maps.envMap = envMap;\n    }\n  } // get texture defined at top level by its index\n\n\n  getTexturePathByIndex(index) {\n    let fileName = '';\n    if (!_lwoTree.textures) return fileName;\n\n    _lwoTree.textures.forEach(function (texture) {\n      if (texture.index === index) fileName = texture.fileName;\n    });\n\n    return fileName;\n  }\n\n  loadTexture(path) {\n    if (!path) return null;\n    const texture = this.textureLoader.load(path, undefined, undefined, function () {\n      console.warn('LWOLoader: non-standard resource hierarchy. Use `resourcePath` parameter to specify root content directory.');\n    });\n    return texture;\n  } // 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n\n\n  getWrappingType(num) {\n    switch (num) {\n      case 0:\n        console.warn('LWOLoader: \"Reset\" texture wrapping type is not supported in three.js');\n        return ClampToEdgeWrapping;\n\n      case 1:\n        return RepeatWrapping;\n\n      case 2:\n        return MirroredRepeatWrapping;\n\n      case 3:\n        return ClampToEdgeWrapping;\n    }\n  }\n\n  getMaterialType(nodeData) {\n    if (nodeData.Clearcoat && nodeData.Clearcoat.value > 0) return MeshPhysicalMaterial;\n    if (nodeData.Roughness) return MeshStandardMaterial;\n    return MeshPhongMaterial;\n  }\n\n}\n\nclass GeometryParser {\n  parse(geoData, layer) {\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(geoData.points, 3));\n    const indices = this.splitIndices(geoData.vertexIndices, geoData.polygonDimensions);\n    geometry.setIndex(indices);\n    this.parseGroups(geometry, geoData);\n    geometry.computeVertexNormals();\n    this.parseUVs(geometry, layer, indices);\n    this.parseMorphTargets(geometry, layer, indices); // TODO: z may need to be reversed to account for coordinate system change\n\n    geometry.translate(-layer.pivot[0], -layer.pivot[1], -layer.pivot[2]); // let userData = geometry.userData;\n    // geometry = geometry.toNonIndexed()\n    // geometry.userData = userData;\n\n    return geometry;\n  } // split quads into tris\n\n\n  splitIndices(indices, polygonDimensions) {\n    const remappedIndices = [];\n    let i = 0;\n    polygonDimensions.forEach(function (dim) {\n      if (dim < 4) {\n        for (let k = 0; k < dim; k++) remappedIndices.push(indices[i + k]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i], indices[i + 1], indices[i + 2], indices[i], indices[i + 2], indices[i + 3]);\n      } else if (dim > 4) {\n        for (let k = 1; k < dim - 1; k++) {\n          remappedIndices.push(indices[i], indices[i + k], indices[i + k + 1]);\n        }\n\n        console.warn('LWOLoader: polygons with greater than 4 sides are not supported');\n      }\n\n      i += dim;\n    });\n    return remappedIndices;\n  } // NOTE: currently ignoring poly indices and assuming that they are intelligently ordered\n\n\n  parseGroups(geometry, geoData) {\n    const tags = _lwoTree.tags;\n    const matNames = [];\n    let elemSize = 3;\n    if (geoData.type === 'lines') elemSize = 2;\n    if (geoData.type === 'points') elemSize = 1;\n    const remappedIndices = this.splitMaterialIndices(geoData.polygonDimensions, geoData.materialIndices);\n    let indexNum = 0; // create new indices in numerical order\n\n    const indexPairs = {}; // original indices mapped to numerical indices\n\n    let prevMaterialIndex;\n    let materialIndex;\n    let prevStart = 0;\n    let currentCount = 0;\n\n    for (let i = 0; i < remappedIndices.length; i += 2) {\n      materialIndex = remappedIndices[i + 1];\n      if (i === 0) matNames[indexNum] = tags[materialIndex];\n      if (prevMaterialIndex === undefined) prevMaterialIndex = materialIndex;\n\n      if (materialIndex !== prevMaterialIndex) {\n        let currentIndex;\n\n        if (indexPairs[tags[prevMaterialIndex]]) {\n          currentIndex = indexPairs[tags[prevMaterialIndex]];\n        } else {\n          currentIndex = indexNum;\n          indexPairs[tags[prevMaterialIndex]] = indexNum;\n          matNames[indexNum] = tags[prevMaterialIndex];\n          indexNum++;\n        }\n\n        geometry.addGroup(prevStart, currentCount, currentIndex);\n        prevStart += currentCount;\n        prevMaterialIndex = materialIndex;\n        currentCount = 0;\n      }\n\n      currentCount += elemSize;\n    } // the loop above doesn't add the last group, do that here.\n\n\n    if (geometry.groups.length > 0) {\n      let currentIndex;\n\n      if (indexPairs[tags[materialIndex]]) {\n        currentIndex = indexPairs[tags[materialIndex]];\n      } else {\n        currentIndex = indexNum;\n        indexPairs[tags[materialIndex]] = indexNum;\n        matNames[indexNum] = tags[materialIndex];\n      }\n\n      geometry.addGroup(prevStart, currentCount, currentIndex);\n    } // Mat names from TAGS chunk, used to build up an array of materials for this geometry\n\n\n    geometry.userData.matNames = matNames;\n  }\n\n  splitMaterialIndices(polygonDimensions, indices) {\n    const remappedIndices = [];\n    polygonDimensions.forEach(function (dim, i) {\n      if (dim <= 3) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1], indices[i * 2], indices[i * 2 + 1]);\n      } else {\n        // ignore > 4 for now\n        for (let k = 0; k < dim - 2; k++) {\n          remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n        }\n      }\n    });\n    return remappedIndices;\n  } // UV maps:\n  // 1: are defined via index into an array of points, not into a geometry\n  // - the geometry is also defined by an index into this array, but the indexes may not match\n  // 2: there can be any number of UV maps for a single geometry. Here these are combined,\n  // \twith preference given to the first map encountered\n  // 3: UV maps can be partial - that is, defined for only a part of the geometry\n  // 4: UV maps can be VMAP or VMAD (discontinuous, to allow for seams). In practice, most\n  // UV maps are defined as partially VMAP and partially VMAD\n  // VMADs are currently not supported\n\n\n  parseUVs(geometry, layer) {\n    // start by creating a UV map set to zero for the whole geometry\n    const remappedUVs = Array.from(Array(geometry.attributes.position.count * 2), function () {\n      return 0;\n    });\n\n    for (const name in layer.uvs) {\n      const uvs = layer.uvs[name].uvs;\n      const uvIndices = layer.uvs[name].uvIndices;\n      uvIndices.forEach(function (i, j) {\n        remappedUVs[i * 2] = uvs[j * 2];\n        remappedUVs[i * 2 + 1] = uvs[j * 2 + 1];\n      });\n    }\n\n    geometry.setAttribute('uv', new Float32BufferAttribute(remappedUVs, 2));\n  }\n\n  parseMorphTargets(geometry, layer) {\n    let num = 0;\n\n    for (const name in layer.morphTargets) {\n      const remappedPoints = geometry.attributes.position.array.slice();\n      if (!geometry.morphAttributes.position) geometry.morphAttributes.position = [];\n      const morphPoints = layer.morphTargets[name].points;\n      const morphIndices = layer.morphTargets[name].indices;\n      const type = layer.morphTargets[name].type;\n      morphIndices.forEach(function (i, j) {\n        if (type === 'relative') {\n          remappedPoints[i * 3] += morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] += morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] += morphPoints[j * 3 + 2];\n        } else {\n          remappedPoints[i * 3] = morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] = morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] = morphPoints[j * 3 + 2];\n        }\n      });\n      geometry.morphAttributes.position[num] = new Float32BufferAttribute(remappedPoints, 3);\n      geometry.morphAttributes.position[num].name = name;\n      num++;\n    }\n\n    geometry.morphTargetsRelative = false;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction extractParentUrl(url, dir) {\n  const index = url.indexOf(dir);\n  if (index === -1) return './';\n  return url.substr(0, index);\n}\n\nexport { LWOLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}