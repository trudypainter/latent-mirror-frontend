{"ast":null,"code":"import _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\nvar TessellateModifier = /*#__PURE__*/_createClass(function TessellateModifier() {\n  var _this = this;\n  var maxEdgeLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.1;\n  var _maxIterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  _classCallCheck(this, TessellateModifier);\n  _defineProperty(this, \"maxEdgeLength\", void 0);\n  _defineProperty(this, \"maxIterations\", void 0);\n  _defineProperty(this, \"modify\", function (geometry) {\n    if (geometry.index !== null) {\n      geometry = geometry.toNonIndexed();\n    } //\n\n    var maxIterations = _this.maxIterations;\n    var maxEdgeLengthSquared = _this.maxEdgeLength * _this.maxEdgeLength;\n    var va = new Vector3();\n    var vb = new Vector3();\n    var vc = new Vector3();\n    var vm = new Vector3();\n    var vs = [va, vb, vc, vm];\n    var na = new Vector3();\n    var nb = new Vector3();\n    var nc = new Vector3();\n    var nm = new Vector3();\n    var ns = [na, nb, nc, nm];\n    var ca = new Color();\n    var cb = new Color();\n    var cc = new Color();\n    var cm = new Color();\n    var cs = [ca, cb, cc, cm];\n    var ua = new Vector2();\n    var ub = new Vector2();\n    var uc = new Vector2();\n    var um = new Vector2();\n    var us = [ua, ub, uc, um];\n    var u2a = new Vector2();\n    var u2b = new Vector2();\n    var u2c = new Vector2();\n    var u2m = new Vector2();\n    var u2s = [u2a, u2b, u2c, u2m];\n    var attributes = geometry.attributes;\n    var hasNormals = attributes.normal !== undefined;\n    var hasColors = attributes.color !== undefined;\n    var hasUVs = attributes.uv !== undefined;\n    var hasUV2s = attributes.uv2 !== undefined;\n    var positions = attributes.position.array;\n    var normals = hasNormals ? attributes.normal.array : null;\n    var colors = hasColors ? attributes.color.array : null;\n    var uvs = hasUVs ? attributes.uv.array : null;\n    var uv2s = hasUV2s ? attributes.uv2.array : null;\n    var positions2 = positions;\n    var normals2 = normals;\n    var colors2 = colors;\n    var uvs2 = uvs;\n    var uv2s2 = uv2s;\n    var iteration = 0;\n    var tessellating = true;\n    function addTriangle(a, b, c) {\n      var v1 = vs[a];\n      var v2 = vs[b];\n      var v3 = vs[c];\n      positions2.push(v1.x, v1.y, v1.z);\n      positions2.push(v2.x, v2.y, v2.z);\n      positions2.push(v3.x, v3.y, v3.z);\n      if (hasNormals) {\n        var n1 = ns[a];\n        var n2 = ns[b];\n        var n3 = ns[c];\n        normals2.push(n1.x, n1.y, n1.z);\n        normals2.push(n2.x, n2.y, n2.z);\n        normals2.push(n3.x, n3.y, n3.z);\n      }\n      if (hasColors) {\n        var c1 = cs[a];\n        var c2 = cs[b];\n        var c3 = cs[c];\n        colors2.push(c1.r, c1.g, c1.b);\n        colors2.push(c2.r, c2.g, c2.b);\n        colors2.push(c3.r, c3.g, c3.b);\n      }\n      if (hasUVs) {\n        var u1 = us[a];\n        var u2 = us[b];\n        var u3 = us[c];\n        uvs2.push(u1.x, u1.y);\n        uvs2.push(u2.x, u2.y);\n        uvs2.push(u3.x, u3.y);\n      }\n      if (hasUV2s) {\n        var u21 = u2s[a];\n        var u22 = u2s[b];\n        var u23 = u2s[c];\n        uv2s2.push(u21.x, u21.y);\n        uv2s2.push(u22.x, u22.y);\n        uv2s2.push(u23.x, u23.y);\n      }\n    }\n    while (tessellating && iteration < maxIterations) {\n      iteration++;\n      tessellating = false;\n      positions = positions2;\n      positions2 = [];\n      if (hasNormals) {\n        normals = normals2;\n        normals2 = [];\n      }\n      if (hasColors) {\n        colors = colors2;\n        colors2 = [];\n      }\n      if (hasUVs) {\n        uvs = uvs2;\n        uvs2 = [];\n      }\n      if (hasUV2s) {\n        uv2s = uv2s2;\n        uv2s2 = [];\n      }\n      for (var i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n        va.fromArray(positions, i + 0);\n        vb.fromArray(positions, i + 3);\n        vc.fromArray(positions, i + 6);\n        if (hasNormals && normals) {\n          na.fromArray(normals, i + 0);\n          nb.fromArray(normals, i + 3);\n          nc.fromArray(normals, i + 6);\n        }\n        if (hasColors && colors) {\n          ca.fromArray(colors, i + 0);\n          cb.fromArray(colors, i + 3);\n          cc.fromArray(colors, i + 6);\n        }\n        if (hasUVs && uvs) {\n          ua.fromArray(uvs, i2 + 0);\n          ub.fromArray(uvs, i2 + 2);\n          uc.fromArray(uvs, i2 + 4);\n        }\n        if (hasUV2s && uv2s) {\n          u2a.fromArray(uv2s, i2 + 0);\n          u2b.fromArray(uv2s, i2 + 2);\n          u2c.fromArray(uv2s, i2 + 4);\n        }\n        var dab = va.distanceToSquared(vb);\n        var dbc = vb.distanceToSquared(vc);\n        var dac = va.distanceToSquared(vc);\n        if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n          tessellating = true;\n          if (dab >= dbc && dab >= dac) {\n            vm.lerpVectors(va, vb, 0.5);\n            if (hasNormals) nm.lerpVectors(na, nb, 0.5);\n            if (hasColors) cm.lerpColors(ca, cb, 0.5);\n            if (hasUVs) um.lerpVectors(ua, ub, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2a, u2b, 0.5);\n            addTriangle(0, 3, 2);\n            addTriangle(3, 1, 2);\n          } else if (dbc >= dab && dbc >= dac) {\n            vm.lerpVectors(vb, vc, 0.5);\n            if (hasNormals) nm.lerpVectors(nb, nc, 0.5);\n            if (hasColors) cm.lerpColors(cb, cc, 0.5);\n            if (hasUVs) um.lerpVectors(ub, uc, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2b, u2c, 0.5);\n            addTriangle(0, 1, 3);\n            addTriangle(3, 2, 0);\n          } else {\n            vm.lerpVectors(va, vc, 0.5);\n            if (hasNormals) nm.lerpVectors(na, nc, 0.5);\n            if (hasColors) cm.lerpColors(ca, cc, 0.5);\n            if (hasUVs) um.lerpVectors(ua, uc, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2a, u2c, 0.5);\n            addTriangle(0, 1, 3);\n            addTriangle(3, 1, 2);\n          }\n        } else {\n          addTriangle(0, 1, 2);\n        }\n      }\n    }\n    var geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    if (hasNormals) {\n      geometry2.setAttribute('normal', new Float32BufferAttribute(normals2, 3));\n    }\n    if (hasColors) {\n      geometry2.setAttribute('color', new Float32BufferAttribute(colors2, 3));\n    }\n    if (hasUVs) {\n      geometry2.setAttribute('uv', new Float32BufferAttribute(uvs2, 2));\n    }\n    if (hasUV2s) {\n      geometry2.setAttribute('uv2', new Float32BufferAttribute(uv2s2, 2));\n    }\n    return geometry2;\n  });\n  this.maxEdgeLength = maxEdgeLength;\n  this.maxIterations = _maxIterations;\n});\nexport { TessellateModifier };","map":{"version":3,"names":["_defineProperty","Vector3","Color","Vector2","BufferGeometry","Float32BufferAttribute","TessellateModifier","maxEdgeLength","_maxIterations","geometry","index","toNonIndexed","maxIterations","maxEdgeLengthSquared","va","vb","vc","vm","vs","na","nb","nc","nm","ns","ca","cb","cc","cm","cs","ua","ub","uc","um","us","u2a","u2b","u2c","u2m","u2s","attributes","hasNormals","normal","undefined","hasColors","color","hasUVs","uv","hasUV2s","uv2","positions","position","array","normals","colors","uvs","uv2s","positions2","normals2","colors2","uvs2","uv2s2","iteration","tessellating","addTriangle","a","b","c","v1","v2","v3","push","x","y","z","n1","n2","n3","c1","c2","c3","r","g","u1","u2","u3","u21","u22","u23","i","i2","il","length","fromArray","dab","distanceToSquared","dbc","dac","lerpVectors","lerpColors","geometry2","setAttribute"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/modifiers/TessellateModifier.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nclass TessellateModifier {\n  constructor(maxEdgeLength = 0.1, _maxIterations = 6) {\n    _defineProperty(this, \"maxEdgeLength\", void 0);\n\n    _defineProperty(this, \"maxIterations\", void 0);\n\n    _defineProperty(this, \"modify\", geometry => {\n      if (geometry.index !== null) {\n        geometry = geometry.toNonIndexed();\n      } //\n\n\n      const maxIterations = this.maxIterations;\n      const maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n      const va = new Vector3();\n      const vb = new Vector3();\n      const vc = new Vector3();\n      const vm = new Vector3();\n      const vs = [va, vb, vc, vm];\n      const na = new Vector3();\n      const nb = new Vector3();\n      const nc = new Vector3();\n      const nm = new Vector3();\n      const ns = [na, nb, nc, nm];\n      const ca = new Color();\n      const cb = new Color();\n      const cc = new Color();\n      const cm = new Color();\n      const cs = [ca, cb, cc, cm];\n      const ua = new Vector2();\n      const ub = new Vector2();\n      const uc = new Vector2();\n      const um = new Vector2();\n      const us = [ua, ub, uc, um];\n      const u2a = new Vector2();\n      const u2b = new Vector2();\n      const u2c = new Vector2();\n      const u2m = new Vector2();\n      const u2s = [u2a, u2b, u2c, u2m];\n      const attributes = geometry.attributes;\n      const hasNormals = attributes.normal !== undefined;\n      const hasColors = attributes.color !== undefined;\n      const hasUVs = attributes.uv !== undefined;\n      const hasUV2s = attributes.uv2 !== undefined;\n      let positions = attributes.position.array;\n      let normals = hasNormals ? attributes.normal.array : null;\n      let colors = hasColors ? attributes.color.array : null;\n      let uvs = hasUVs ? attributes.uv.array : null;\n      let uv2s = hasUV2s ? attributes.uv2.array : null;\n      let positions2 = positions;\n      let normals2 = normals;\n      let colors2 = colors;\n      let uvs2 = uvs;\n      let uv2s2 = uv2s;\n      let iteration = 0;\n      let tessellating = true;\n\n      function addTriangle(a, b, c) {\n        const v1 = vs[a];\n        const v2 = vs[b];\n        const v3 = vs[c];\n        positions2.push(v1.x, v1.y, v1.z);\n        positions2.push(v2.x, v2.y, v2.z);\n        positions2.push(v3.x, v3.y, v3.z);\n\n        if (hasNormals) {\n          const n1 = ns[a];\n          const n2 = ns[b];\n          const n3 = ns[c];\n          normals2.push(n1.x, n1.y, n1.z);\n          normals2.push(n2.x, n2.y, n2.z);\n          normals2.push(n3.x, n3.y, n3.z);\n        }\n\n        if (hasColors) {\n          const c1 = cs[a];\n          const c2 = cs[b];\n          const c3 = cs[c];\n          colors2.push(c1.r, c1.g, c1.b);\n          colors2.push(c2.r, c2.g, c2.b);\n          colors2.push(c3.r, c3.g, c3.b);\n        }\n\n        if (hasUVs) {\n          const u1 = us[a];\n          const u2 = us[b];\n          const u3 = us[c];\n          uvs2.push(u1.x, u1.y);\n          uvs2.push(u2.x, u2.y);\n          uvs2.push(u3.x, u3.y);\n        }\n\n        if (hasUV2s) {\n          const u21 = u2s[a];\n          const u22 = u2s[b];\n          const u23 = u2s[c];\n          uv2s2.push(u21.x, u21.y);\n          uv2s2.push(u22.x, u22.y);\n          uv2s2.push(u23.x, u23.y);\n        }\n      }\n\n      while (tessellating && iteration < maxIterations) {\n        iteration++;\n        tessellating = false;\n        positions = positions2;\n        positions2 = [];\n\n        if (hasNormals) {\n          normals = normals2;\n          normals2 = [];\n        }\n\n        if (hasColors) {\n          colors = colors2;\n          colors2 = [];\n        }\n\n        if (hasUVs) {\n          uvs = uvs2;\n          uvs2 = [];\n        }\n\n        if (hasUV2s) {\n          uv2s = uv2s2;\n          uv2s2 = [];\n        }\n\n        for (let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n          va.fromArray(positions, i + 0);\n          vb.fromArray(positions, i + 3);\n          vc.fromArray(positions, i + 6);\n\n          if (hasNormals && normals) {\n            na.fromArray(normals, i + 0);\n            nb.fromArray(normals, i + 3);\n            nc.fromArray(normals, i + 6);\n          }\n\n          if (hasColors && colors) {\n            ca.fromArray(colors, i + 0);\n            cb.fromArray(colors, i + 3);\n            cc.fromArray(colors, i + 6);\n          }\n\n          if (hasUVs && uvs) {\n            ua.fromArray(uvs, i2 + 0);\n            ub.fromArray(uvs, i2 + 2);\n            uc.fromArray(uvs, i2 + 4);\n          }\n\n          if (hasUV2s && uv2s) {\n            u2a.fromArray(uv2s, i2 + 0);\n            u2b.fromArray(uv2s, i2 + 2);\n            u2c.fromArray(uv2s, i2 + 4);\n          }\n\n          const dab = va.distanceToSquared(vb);\n          const dbc = vb.distanceToSquared(vc);\n          const dac = va.distanceToSquared(vc);\n\n          if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n            tessellating = true;\n\n            if (dab >= dbc && dab >= dac) {\n              vm.lerpVectors(va, vb, 0.5);\n              if (hasNormals) nm.lerpVectors(na, nb, 0.5);\n              if (hasColors) cm.lerpColors(ca, cb, 0.5);\n              if (hasUVs) um.lerpVectors(ua, ub, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2a, u2b, 0.5);\n              addTriangle(0, 3, 2);\n              addTriangle(3, 1, 2);\n            } else if (dbc >= dab && dbc >= dac) {\n              vm.lerpVectors(vb, vc, 0.5);\n              if (hasNormals) nm.lerpVectors(nb, nc, 0.5);\n              if (hasColors) cm.lerpColors(cb, cc, 0.5);\n              if (hasUVs) um.lerpVectors(ub, uc, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2b, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 2, 0);\n            } else {\n              vm.lerpVectors(va, vc, 0.5);\n              if (hasNormals) nm.lerpVectors(na, nc, 0.5);\n              if (hasColors) cm.lerpColors(ca, cc, 0.5);\n              if (hasUVs) um.lerpVectors(ua, uc, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2a, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 1, 2);\n            }\n          } else {\n            addTriangle(0, 1, 2);\n          }\n        }\n      }\n\n      const geometry2 = new BufferGeometry();\n      geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\n      if (hasNormals) {\n        geometry2.setAttribute('normal', new Float32BufferAttribute(normals2, 3));\n      }\n\n      if (hasColors) {\n        geometry2.setAttribute('color', new Float32BufferAttribute(colors2, 3));\n      }\n\n      if (hasUVs) {\n        geometry2.setAttribute('uv', new Float32BufferAttribute(uvs2, 2));\n      }\n\n      if (hasUV2s) {\n        geometry2.setAttribute('uv2', new Float32BufferAttribute(uv2s2, 2));\n      }\n\n      return geometry2;\n    });\n\n    this.maxEdgeLength = maxEdgeLength;\n    this.maxIterations = _maxIterations;\n  }\n\n}\n\nexport { TessellateModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}