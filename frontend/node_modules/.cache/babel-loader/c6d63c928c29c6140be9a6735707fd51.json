{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport TempNode from './TempNode.js';\nvar ExpressionNode = /*#__PURE__*/function (_TempNode) {\n  _inherits(ExpressionNode, _TempNode);\n  var _super = _createSuper(ExpressionNode);\n  function ExpressionNode() {\n    var _this;\n    var snipped = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'void';\n    _classCallCheck(this, ExpressionNode);\n    _this = _super.call(this, nodeType);\n    _this.snipped = snipped;\n    return _this;\n  }\n  _createClass(ExpressionNode, [{\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = this.getNodeType(builder);\n      var snipped = this.snipped;\n      if (type === 'void') {\n        builder.addFlowCode(snipped);\n      } else {\n        return \"( \".concat(snipped, \" )\");\n      }\n    }\n  }]);\n  return ExpressionNode;\n}(TempNode);\nexport default ExpressionNode;","map":{"version":3,"names":["TempNode","ExpressionNode","snipped","nodeType","builder","type","getNodeType","addFlowCode"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/nodes/core/ExpressionNode.js"],"sourcesContent":["import TempNode from './TempNode.js';\n\nclass ExpressionNode extends TempNode {\n  constructor(snipped = '', nodeType = 'void') {\n    super(nodeType);\n    this.snipped = snipped;\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const snipped = this.snipped;\n\n    if (type === 'void') {\n      builder.addFlowCode(snipped);\n    } else {\n      return `( ${snipped} )`;\n    }\n  }\n\n}\n\nexport default ExpressionNode;\n"],"mappings":";;;;AAAA,OAAOA,QAAQ,MAAM,eAAe;AAAC,IAE/BC,cAAc;EAAA;EAAA;EAClB,0BAA6C;IAAA;IAAA,IAAjCC,OAAO,uEAAG,EAAE;IAAA,IAAEC,QAAQ,uEAAG,MAAM;IAAA;IACzC,0BAAMA,QAAQ;IACd,MAAKD,OAAO,GAAGA,OAAO;IAAC;EACzB;EAAC;IAAA;IAAA,OAED,kBAASE,OAAO,EAAE;MAChB,IAAMC,IAAI,GAAG,IAAI,CAACC,WAAW,CAACF,OAAO,CAAC;MACtC,IAAMF,OAAO,GAAG,IAAI,CAACA,OAAO;MAE5B,IAAIG,IAAI,KAAK,MAAM,EAAE;QACnBD,OAAO,CAACG,WAAW,CAACL,OAAO,CAAC;MAC9B,CAAC,MAAM;QACL,mBAAYA,OAAO;MACrB;IACF;EAAC;EAAA;AAAA,EAf0BF,QAAQ;AAmBrC,eAAeC,cAAc"},"metadata":{},"sourceType":"module"}