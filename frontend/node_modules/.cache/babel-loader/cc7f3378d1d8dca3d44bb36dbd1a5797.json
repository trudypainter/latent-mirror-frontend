{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\nvar ThreeMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(ThreeMFLoader, _Loader);\n  var _super = _createSuper(ThreeMFLoader);\n  function ThreeMFLoader(manager) {\n    var _this;\n    _classCallCheck(this, ThreeMFLoader);\n    _this = _super.call(this, manager);\n    _this.availableExtensions = [];\n    return _this;\n  }\n  _createClass(ThreeMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var scope = this;\n      var textureLoader = new TextureLoader(this.manager);\n      function loadDocument(data) {\n        var zip = null;\n        var file = null;\n        var relsName;\n        var modelRelsName;\n        var modelPartNames = [];\n        var texturesPartNames = [];\n        var modelRels;\n        var modelParts = {};\n        var printTicketParts = {};\n        var texturesParts = {};\n        var otherParts = {};\n        try {\n          zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.match(/\\_rels\\/.rels$/)) {\n            relsName = file;\n          } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n            modelRelsName = file;\n          } else if (file.match(/^3D\\/.*\\.model$/)) {\n            modelPartNames.push(file);\n          } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ;else if (file.match(/^3D\\/Textures?\\/.*/)) {\n            texturesPartNames.push(file);\n          } else if (file.match(/^3D\\/Other\\/.*/)) ;\n        } //\n\n        var relsView = zip[relsName];\n        var relsFileText = LoaderUtils.decodeText(relsView);\n        var rels = parseRelsXml(relsFileText); //\n\n        if (modelRelsName) {\n          var _relsView = zip[modelRelsName];\n          var _relsFileText = LoaderUtils.decodeText(_relsView);\n          modelRels = parseRelsXml(_relsFileText);\n        } //\n\n        for (var i = 0; i < modelPartNames.length; i++) {\n          var modelPart = modelPartNames[i];\n          var view = zip[modelPart];\n          var fileText = LoaderUtils.decodeText(view);\n          var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n          if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n            console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n          }\n          var modelNode = xmlData.querySelector('model');\n          var extensions = {};\n          for (var _i = 0; _i < modelNode.attributes.length; _i++) {\n            var attr = modelNode.attributes[_i];\n            if (attr.name.match(/^xmlns:(.+)$/)) {\n              extensions[attr.value] = RegExp.$1;\n            }\n          }\n          var modelData = parseModelNode(modelNode);\n          modelData['xml'] = modelNode;\n          if (0 < Object.keys(extensions).length) {\n            modelData['extensions'] = extensions;\n          }\n          modelParts[modelPart] = modelData;\n        } //\n\n        for (var _i2 = 0; _i2 < texturesPartNames.length; _i2++) {\n          var texturesPartName = texturesPartNames[_i2];\n          texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n        }\n        return {\n          rels: rels,\n          modelRels: modelRels,\n          model: modelParts,\n          printTicket: printTicketParts,\n          texture: texturesParts,\n          other: otherParts\n        };\n      }\n      function parseRelsXml(relsFileText) {\n        var relationships = [];\n        var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n        var relsNodes = relsXmlData.querySelectorAll('Relationship');\n        for (var i = 0; i < relsNodes.length; i++) {\n          var relsNode = relsNodes[i];\n          var relationship = {\n            target: relsNode.getAttribute('Target'),\n            //required\n            id: relsNode.getAttribute('Id'),\n            //required\n            type: relsNode.getAttribute('Type') //required\n          };\n\n          relationships.push(relationship);\n        }\n        return relationships;\n      }\n      function parseMetadataNodes(metadataNodes) {\n        var metadataData = {};\n        for (var i = 0; i < metadataNodes.length; i++) {\n          var metadataNode = metadataNodes[i];\n          var name = metadataNode.getAttribute('name');\n          var validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n          if (0 <= validNames.indexOf(name)) {\n            metadataData[name] = metadataNode.textContent;\n          }\n        }\n        return metadataData;\n      }\n      function parseBasematerialsNode(basematerialsNode) {\n        var basematerialsData = {\n          id: basematerialsNode.getAttribute('id'),\n          // required\n          basematerials: []\n        };\n        var basematerialNodes = basematerialsNode.querySelectorAll('base');\n        for (var i = 0; i < basematerialNodes.length; i++) {\n          var basematerialNode = basematerialNodes[i];\n          var basematerialData = parseBasematerialNode(basematerialNode);\n          basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n          basematerialsData.basematerials.push(basematerialData);\n        }\n        return basematerialsData;\n      }\n      function parseTexture2DNode(texture2DNode) {\n        var texture2dData = {\n          id: texture2DNode.getAttribute('id'),\n          // required\n          path: texture2DNode.getAttribute('path'),\n          // required\n          contenttype: texture2DNode.getAttribute('contenttype'),\n          // required\n          tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n          tilestylev: texture2DNode.getAttribute('tilestylev'),\n          filter: texture2DNode.getAttribute('filter')\n        };\n        return texture2dData;\n      }\n      function parseTextures2DGroupNode(texture2DGroupNode) {\n        var texture2DGroupData = {\n          id: texture2DGroupNode.getAttribute('id'),\n          // required\n          texid: texture2DGroupNode.getAttribute('texid'),\n          // required\n          displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n        };\n        var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n        var uvs = [];\n        for (var i = 0; i < tex2coordNodes.length; i++) {\n          var tex2coordNode = tex2coordNodes[i];\n          var u = tex2coordNode.getAttribute('u');\n          var v = tex2coordNode.getAttribute('v');\n          uvs.push(parseFloat(u), parseFloat(v));\n        }\n        texture2DGroupData['uvs'] = new Float32Array(uvs);\n        return texture2DGroupData;\n      }\n      function parseColorGroupNode(colorGroupNode) {\n        var colorGroupData = {\n          id: colorGroupNode.getAttribute('id'),\n          // required\n          displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n        };\n        var colorNodes = colorGroupNode.querySelectorAll('color');\n        var colors = [];\n        var colorObject = new Color();\n        for (var i = 0; i < colorNodes.length; i++) {\n          var colorNode = colorNodes[i];\n          var color = colorNode.getAttribute('color');\n          colorObject.setStyle(color.substring(0, 7));\n          colorObject.convertSRGBToLinear(); // color is in sRGB\n\n          colors.push(colorObject.r, colorObject.g, colorObject.b);\n        }\n        colorGroupData['colors'] = new Float32Array(colors);\n        return colorGroupData;\n      }\n      function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n        var metallicDisplaypropertiesData = {\n          id: metallicDisplaypropetiesNode.getAttribute('id') // required\n        };\n\n        var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n        var metallicData = [];\n        for (var i = 0; i < metallicNodes.length; i++) {\n          var metallicNode = metallicNodes[i];\n          metallicData.push({\n            name: metallicNode.getAttribute('name'),\n            // required\n            metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n            // required\n            roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n          });\n        }\n\n        metallicDisplaypropertiesData.data = metallicData;\n        return metallicDisplaypropertiesData;\n      }\n      function parseBasematerialNode(basematerialNode) {\n        var basematerialData = {};\n        basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n        basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n        basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n        return basematerialData;\n      }\n      function parseMeshNode(meshNode) {\n        var meshData = {};\n        var vertices = [];\n        var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n        for (var i = 0; i < vertexNodes.length; i++) {\n          var vertexNode = vertexNodes[i];\n          var x = vertexNode.getAttribute('x');\n          var y = vertexNode.getAttribute('y');\n          var z = vertexNode.getAttribute('z');\n          vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n        }\n        meshData['vertices'] = new Float32Array(vertices);\n        var triangleProperties = [];\n        var triangles = [];\n        var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n        for (var _i3 = 0; _i3 < triangleNodes.length; _i3++) {\n          var triangleNode = triangleNodes[_i3];\n          var v1 = triangleNode.getAttribute('v1');\n          var v2 = triangleNode.getAttribute('v2');\n          var v3 = triangleNode.getAttribute('v3');\n          var p1 = triangleNode.getAttribute('p1');\n          var p2 = triangleNode.getAttribute('p2');\n          var p3 = triangleNode.getAttribute('p3');\n          var pid = triangleNode.getAttribute('pid');\n          var triangleProperty = {};\n          triangleProperty['v1'] = parseInt(v1, 10);\n          triangleProperty['v2'] = parseInt(v2, 10);\n          triangleProperty['v3'] = parseInt(v3, 10);\n          triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n          if (p1) {\n            triangleProperty['p1'] = parseInt(p1, 10);\n          }\n          if (p2) {\n            triangleProperty['p2'] = parseInt(p2, 10);\n          }\n          if (p3) {\n            triangleProperty['p3'] = parseInt(p3, 10);\n          }\n          if (pid) {\n            triangleProperty['pid'] = pid;\n          }\n          if (0 < Object.keys(triangleProperty).length) {\n            triangleProperties.push(triangleProperty);\n          }\n        }\n        meshData['triangleProperties'] = triangleProperties;\n        meshData['triangles'] = new Uint32Array(triangles);\n        return meshData;\n      }\n      function parseComponentsNode(componentsNode) {\n        var components = [];\n        var componentNodes = componentsNode.querySelectorAll('component');\n        for (var i = 0; i < componentNodes.length; i++) {\n          var componentNode = componentNodes[i];\n          var componentData = parseComponentNode(componentNode);\n          components.push(componentData);\n        }\n        return components;\n      }\n      function parseComponentNode(componentNode) {\n        var componentData = {};\n        componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n        var transform = componentNode.getAttribute('transform');\n        if (transform) {\n          componentData['transform'] = parseTransform(transform);\n        }\n        return componentData;\n      }\n      function parseTransform(transform) {\n        var t = [];\n        transform.split(' ').forEach(function (s) {\n          t.push(parseFloat(s));\n        });\n        var matrix = new Matrix4();\n        matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n        return matrix;\n      }\n      function parseObjectNode(objectNode) {\n        var objectData = {\n          type: objectNode.getAttribute('type')\n        };\n        var id = objectNode.getAttribute('id');\n        if (id) {\n          objectData['id'] = id;\n        }\n        var pid = objectNode.getAttribute('pid');\n        if (pid) {\n          objectData['pid'] = pid;\n        }\n        var pindex = objectNode.getAttribute('pindex');\n        if (pindex) {\n          objectData['pindex'] = pindex;\n        }\n        var thumbnail = objectNode.getAttribute('thumbnail');\n        if (thumbnail) {\n          objectData['thumbnail'] = thumbnail;\n        }\n        var partnumber = objectNode.getAttribute('partnumber');\n        if (partnumber) {\n          objectData['partnumber'] = partnumber;\n        }\n        var name = objectNode.getAttribute('name');\n        if (name) {\n          objectData['name'] = name;\n        }\n        var meshNode = objectNode.querySelector('mesh');\n        if (meshNode) {\n          objectData['mesh'] = parseMeshNode(meshNode);\n        }\n        var componentsNode = objectNode.querySelector('components');\n        if (componentsNode) {\n          objectData['components'] = parseComponentsNode(componentsNode);\n        }\n        return objectData;\n      }\n      function parseResourcesNode(resourcesNode) {\n        var resourcesData = {};\n        resourcesData['basematerials'] = {};\n        var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n        for (var i = 0; i < basematerialsNodes.length; i++) {\n          var basematerialsNode = basematerialsNodes[i];\n          var basematerialsData = parseBasematerialsNode(basematerialsNode);\n          resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n        } //\n\n        resourcesData['texture2d'] = {};\n        var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n        for (var _i4 = 0; _i4 < textures2DNodes.length; _i4++) {\n          var textures2DNode = textures2DNodes[_i4];\n          var texture2DData = parseTexture2DNode(textures2DNode);\n          resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n        } //\n\n        resourcesData['colorgroup'] = {};\n        var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n        for (var _i5 = 0; _i5 < colorGroupNodes.length; _i5++) {\n          var colorGroupNode = colorGroupNodes[_i5];\n          var colorGroupData = parseColorGroupNode(colorGroupNode);\n          resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n        } //\n\n        resourcesData['pbmetallicdisplayproperties'] = {};\n        var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n        for (var _i6 = 0; _i6 < pbmetallicdisplaypropertiesNodes.length; _i6++) {\n          var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[_i6];\n          var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n          resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n        } //\n\n        resourcesData['texture2dgroup'] = {};\n        var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n        for (var _i7 = 0; _i7 < textures2DGroupNodes.length; _i7++) {\n          var textures2DGroupNode = textures2DGroupNodes[_i7];\n          var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n          resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n        } //\n\n        resourcesData['object'] = {};\n        var objectNodes = resourcesNode.querySelectorAll('object');\n        for (var _i8 = 0; _i8 < objectNodes.length; _i8++) {\n          var objectNode = objectNodes[_i8];\n          var objectData = parseObjectNode(objectNode);\n          resourcesData['object'][objectData['id']] = objectData;\n        }\n        return resourcesData;\n      }\n      function parseBuildNode(buildNode) {\n        var buildData = [];\n        var itemNodes = buildNode.querySelectorAll('item');\n        for (var i = 0; i < itemNodes.length; i++) {\n          var itemNode = itemNodes[i];\n          var buildItem = {\n            objectId: itemNode.getAttribute('objectid')\n          };\n          var transform = itemNode.getAttribute('transform');\n          if (transform) {\n            buildItem['transform'] = parseTransform(transform);\n          }\n          buildData.push(buildItem);\n        }\n        return buildData;\n      }\n      function parseModelNode(modelNode) {\n        var modelData = {\n          unit: modelNode.getAttribute('unit') || 'millimeter'\n        };\n        var metadataNodes = modelNode.querySelectorAll('metadata');\n        if (metadataNodes) {\n          modelData['metadata'] = parseMetadataNodes(metadataNodes);\n        }\n        var resourcesNode = modelNode.querySelector('resources');\n        if (resourcesNode) {\n          modelData['resources'] = parseResourcesNode(resourcesNode);\n        }\n        var buildNode = modelNode.querySelector('build');\n        if (buildNode) {\n          modelData['build'] = parseBuildNode(buildNode);\n        }\n        return modelData;\n      }\n      function buildTexture(texture2dgroup, objects, modelData, textureData) {\n        var texid = texture2dgroup.texid;\n        var texture2ds = modelData.resources.texture2d;\n        var texture2d = texture2ds[texid];\n        if (texture2d) {\n          var _data = textureData[texture2d.path];\n          var type = texture2d.contenttype;\n          var blob = new Blob([_data], {\n            type: type\n          });\n          var sourceURI = URL.createObjectURL(blob);\n          var texture = textureLoader.load(sourceURI, function () {\n            URL.revokeObjectURL(sourceURI);\n          });\n          texture.encoding = sRGBEncoding; // texture parameters\n\n          switch (texture2d.tilestyleu) {\n            case 'wrap':\n              texture.wrapS = RepeatWrapping;\n              break;\n            case 'mirror':\n              texture.wrapS = MirroredRepeatWrapping;\n              break;\n            case 'none':\n            case 'clamp':\n              texture.wrapS = ClampToEdgeWrapping;\n              break;\n            default:\n              texture.wrapS = RepeatWrapping;\n          }\n          switch (texture2d.tilestylev) {\n            case 'wrap':\n              texture.wrapT = RepeatWrapping;\n              break;\n            case 'mirror':\n              texture.wrapT = MirroredRepeatWrapping;\n              break;\n            case 'none':\n            case 'clamp':\n              texture.wrapT = ClampToEdgeWrapping;\n              break;\n            default:\n              texture.wrapT = RepeatWrapping;\n          }\n          switch (texture2d.filter) {\n            case 'auto':\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n              break;\n            case 'linear':\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearFilter;\n              break;\n            case 'nearest':\n              texture.magFilter = NearestFilter;\n              texture.minFilter = NearestFilter;\n              break;\n            default:\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n          }\n          return texture;\n        } else {\n          return null;\n        }\n      }\n      function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n        var objectPindex = objectData.pindex;\n        var materialMap = {};\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n          if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n          materialMap[pindex].push(triangleProperty);\n        } //\n\n        var keys = Object.keys(materialMap);\n        var meshes = [];\n        for (var _i9 = 0, _l = keys.length; _i9 < _l; _i9++) {\n          var materialIndex = keys[_i9];\n          var trianglePropertiesProps = materialMap[materialIndex];\n          var basematerialData = basematerials.basematerials[materialIndex];\n          var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n          var geometry = new BufferGeometry();\n          var positionData = [];\n          var vertices = meshData.vertices;\n          for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n            var _triangleProperty = trianglePropertiesProps[j];\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 2]);\n          }\n          geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n          var mesh = new Mesh(geometry, material);\n          meshes.push(mesh);\n        }\n        return meshes;\n      }\n      function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n        // geometry\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var uvData = [];\n        var vertices = meshData.vertices;\n        var uvs = texture2dgroup.uvs;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n          uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n        var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n        var material = new MeshPhongMaterial({\n          map: texture,\n          flatShading: true\n        }); // mesh\n\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n        // geometry\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var colorData = [];\n        var vertices = meshData.vertices;\n        var colors = colorgroup.colors;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var v1 = triangleProperty.v1;\n          var v2 = triangleProperty.v2;\n          var v3 = triangleProperty.v3;\n          positionData.push(vertices[v1 * 3 + 0]);\n          positionData.push(vertices[v1 * 3 + 1]);\n          positionData.push(vertices[v1 * 3 + 2]);\n          positionData.push(vertices[v2 * 3 + 0]);\n          positionData.push(vertices[v2 * 3 + 1]);\n          positionData.push(vertices[v2 * 3 + 2]);\n          positionData.push(vertices[v3 * 3 + 0]);\n          positionData.push(vertices[v3 * 3 + 1]);\n          positionData.push(vertices[v3 * 3 + 2]); //\n\n          var p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n          var p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n          var p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n          colorData.push(colors[p1 * 3 + 0]);\n          colorData.push(colors[p1 * 3 + 1]);\n          colorData.push(colors[p1 * 3 + 2]);\n          colorData.push(colors[p2 * 3 + 0]);\n          colorData.push(colors[p2 * 3 + 1]);\n          colorData.push(colors[p2 * 3 + 2]);\n          colorData.push(colors[p3 * 3 + 0]);\n          colorData.push(colors[p3 * 3 + 1]);\n          colorData.push(colors[p3 * 3 + 2]);\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n        var material = new MeshPhongMaterial({\n          vertexColors: true,\n          flatShading: true\n        }); // mesh\n\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildDefaultMesh(meshData) {\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n        geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n        var material = new MeshPhongMaterial({\n          color: 0xaaaaff,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n        var keys = Object.keys(resourceMap);\n        var meshes = [];\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var resourceId = keys[i];\n          var triangleProperties = resourceMap[resourceId];\n          var resourceType = getResourceType(resourceId, modelData);\n          switch (resourceType) {\n            case 'material':\n              var basematerials = modelData.resources.basematerials[resourceId];\n              var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n              for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                meshes.push(newMeshes[j]);\n              }\n              break;\n            case 'texture':\n              var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n              meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n              break;\n            case 'vertexColors':\n              var colorgroup = modelData.resources.colorgroup[resourceId];\n              meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\n              break;\n            case 'default':\n              meshes.push(buildDefaultMesh(meshData));\n              break;\n            default:\n              console.error('THREE.3MFLoader: Unsupported resource type.');\n          }\n        }\n        return meshes;\n      }\n      function getResourceType(pid, modelData) {\n        if (modelData.resources.texture2dgroup[pid] !== undefined) {\n          return 'texture';\n        } else if (modelData.resources.basematerials[pid] !== undefined) {\n          return 'material';\n        } else if (modelData.resources.colorgroup[pid] !== undefined) {\n          return 'vertexColors';\n        } else if (pid === 'default') {\n          return 'default';\n        } else {\n          return undefined;\n        }\n      }\n      function analyzeObject(modelData, meshData, objectData) {\n        var resourceMap = {};\n        var triangleProperties = meshData['triangleProperties'];\n        var objectPid = objectData.pid;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n          if (pid === undefined) pid = 'default';\n          if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n          resourceMap[pid].push(triangleProperty);\n        }\n        return resourceMap;\n      }\n      function buildGroup(meshData, objects, modelData, textureData, objectData) {\n        var group = new Group();\n        var resourceMap = analyzeObject(modelData, meshData, objectData);\n        var meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n        for (var i = 0, l = meshes.length; i < l; i++) {\n          group.add(meshes[i]);\n        }\n        return group;\n      }\n      function applyExtensions(extensions, meshData, modelXml) {\n        if (!extensions) {\n          return;\n        }\n        var availableExtensions = [];\n        var keys = Object.keys(extensions);\n        for (var i = 0; i < keys.length; i++) {\n          var ns = keys[i];\n          for (var j = 0; j < scope.availableExtensions.length; j++) {\n            var extension = scope.availableExtensions[j];\n            if (extension.ns === ns) {\n              availableExtensions.push(extension);\n            }\n          }\n        }\n        for (var _i10 = 0; _i10 < availableExtensions.length; _i10++) {\n          var _extension = availableExtensions[_i10];\n          _extension.apply(modelXml, extensions[_extension['ns']], meshData);\n        }\n      }\n      function getBuild(data, objects, modelData, textureData, objectData, builder) {\n        if (data.build !== undefined) return data.build;\n        data.build = builder(data, objects, modelData, textureData, objectData);\n        return data.build;\n      }\n      function buildBasematerial(materialData, objects, modelData) {\n        var material;\n        var displaypropertiesid = materialData.displaypropertiesid;\n        var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n        if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n          // metallic display property, use StandardMaterial\n          var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n          var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n          material = new MeshStandardMaterial({\n            flatShading: true,\n            roughness: metallicData.roughness,\n            metalness: metallicData.metallicness\n          });\n        } else {\n          // otherwise use PhongMaterial\n          material = new MeshPhongMaterial({\n            flatShading: true\n          });\n        }\n        material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n        var displaycolor = materialData.displaycolor;\n        var color = displaycolor.substring(0, 7);\n        material.color.setStyle(color);\n        material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n        // process alpha if set\n\n        if (displaycolor.length === 9) {\n          material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n        }\n        return material;\n      }\n      function buildComposite(compositeData, objects, modelData, textureData) {\n        var composite = new Group();\n        for (var j = 0; j < compositeData.length; j++) {\n          var component = compositeData[j];\n          var _build = objects[component.objectId];\n          if (_build === undefined) {\n            buildObject(component.objectId, objects, modelData, textureData);\n            _build = objects[component.objectId];\n          }\n          var object3D = _build.clone(); // apply component transform\n\n          var transform = component.transform;\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n          composite.add(object3D);\n        }\n        return composite;\n      }\n      function buildObject(objectId, objects, modelData, textureData) {\n        var objectData = modelData['resources']['object'][objectId];\n        if (objectData['mesh']) {\n          var meshData = objectData['mesh'];\n          var extensions = modelData['extensions'];\n          var modelXml = modelData['xml'];\n          applyExtensions(extensions, meshData, modelXml);\n          objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n        } else {\n          var compositeData = objectData['components'];\n          objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n        }\n      }\n      function buildObjects(data3mf) {\n        var modelsData = data3mf.model;\n        var modelRels = data3mf.modelRels;\n        var objects = {};\n        var modelsKeys = Object.keys(modelsData);\n        var textureData = {}; // evaluate model relationships to textures\n\n        if (modelRels) {\n          for (var i = 0, l = modelRels.length; i < l; i++) {\n            var modelRel = modelRels[i];\n            var textureKey = modelRel.target.substring(1);\n            if (data3mf.texture[textureKey]) {\n              textureData[modelRel.target] = data3mf.texture[textureKey];\n            }\n          }\n        } // start build\n\n        for (var _i11 = 0; _i11 < modelsKeys.length; _i11++) {\n          var modelsKey = modelsKeys[_i11];\n          var modelData = modelsData[modelsKey];\n          var objectIds = Object.keys(modelData['resources']['object']);\n          for (var j = 0; j < objectIds.length; j++) {\n            var objectId = objectIds[j];\n            buildObject(objectId, objects, modelData, textureData);\n          }\n        }\n        return objects;\n      }\n      function fetch3DModelPart(rels) {\n        for (var i = 0; i < rels.length; i++) {\n          var rel = rels[i];\n          var extension = rel.target.split('.').pop();\n          if (extension.toLowerCase() === 'model') return rel;\n        }\n      }\n      function build(objects, data3mf) {\n        var group = new Group();\n        var relationship = fetch3DModelPart(data3mf['rels']);\n        var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n        for (var i = 0; i < buildData.length; i++) {\n          var buildItem = buildData[i];\n          var object3D = objects[buildItem['objectId']]; // apply transform\n\n          var transform = buildItem['transform'];\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n          group.add(object3D);\n        }\n        return group;\n      }\n      var data3mf = loadDocument(data);\n      var objects = buildObjects(data3mf);\n      return build(objects, data3mf);\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extension) {\n      this.availableExtensions.push(extension);\n    }\n  }]);\n  return ThreeMFLoader;\n}(Loader);\nexport { ThreeMFLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","LoaderUtils","Group","Color","Matrix4","BufferGeometry","Float32BufferAttribute","Mesh","MeshPhongMaterial","BufferAttribute","MeshStandardMaterial","sRGBEncoding","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","LinearFilter","LinearMipmapLinearFilter","NearestFilter","unzipSync","ThreeMFLoader","manager","availableExtensions","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","zip","file","relsName","modelRelsName","modelPartNames","texturesPartNames","modelRels","modelParts","printTicketParts","texturesParts","otherParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","rels","parseRelsXml","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/loaders/3MFLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n\n    function loadDocument(data) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const texturesPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ; else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        const relsView = zip[modelRelsName];\n        const relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n\n        const modelNode = xmlData.querySelector('model');\n        const extensions = {};\n\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          const attr = modelNode.attributes[i];\n\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n\n        const modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n\n        modelParts[modelPart] = modelData;\n      } //\n\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      const relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n\n        };\n        relationships.push(relationship);\n      }\n\n      return relationships;\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute('name');\n        const validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n\n      return metadataData;\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n\n      return basematerialsData;\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      const uvs = [];\n\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute('u');\n        const v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      const colorNodes = colorGroupNode.querySelectorAll('color');\n      const colors = [];\n      const colorObject = new Color();\n\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      const metallicData = [];\n\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute('x');\n        const y = vertexNode.getAttribute('y');\n        const z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n\n      meshData['vertices'] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute('v1');\n        const v2 = triangleNode.getAttribute('v2');\n        const v3 = triangleNode.getAttribute('v3');\n        const p1 = triangleNode.getAttribute('p1');\n        const p2 = triangleNode.getAttribute('p2');\n        const p3 = triangleNode.getAttribute('p3');\n        const pid = triangleNode.getAttribute('pid');\n        const triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll('component');\n\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n\n      return components;\n    }\n\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      const transform = componentNode.getAttribute('transform');\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n\n      return componentData;\n    }\n\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      const id = objectNode.getAttribute('id');\n\n      if (id) {\n        objectData['id'] = id;\n      }\n\n      const pid = objectNode.getAttribute('pid');\n\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n\n      const pindex = objectNode.getAttribute('pindex');\n\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n\n      const thumbnail = objectNode.getAttribute('thumbnail');\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n\n      const partnumber = objectNode.getAttribute('partnumber');\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n\n      const name = objectNode.getAttribute('name');\n\n      if (name) {\n        objectData['name'] = name;\n      }\n\n      const meshNode = objectNode.querySelector('mesh');\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n\n      const componentsNode = objectNode.querySelector('components');\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n\n      return objectData;\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData['basematerials'] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n\n      resourcesData['texture2d'] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n\n      resourcesData['colorgroup'] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n\n      resourcesData['texture2dgroup'] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n\n      resourcesData['object'] = {};\n      const objectNodes = resourcesNode.querySelectorAll('object');\n\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n\n      return resourcesData;\n    }\n\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll('item');\n\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        const transform = itemNode.getAttribute('transform');\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n\n        buildData.push(buildItem);\n      }\n\n      return buildData;\n    }\n\n    function parseModelNode(modelNode) {\n      const modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      const metadataNodes = modelNode.querySelectorAll('metadata');\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n\n      const resourcesNode = modelNode.querySelector('resources');\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n\n      const buildNode = modelNode.querySelector('build');\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n\n      return modelData;\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n\n      if (texture2d) {\n        const data = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data], {\n          type: type\n        });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n\n        return texture;\n      } else {\n        return null;\n      }\n    }\n\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n\n      return meshes;\n    }\n\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      const texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        const p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      const material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      const material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n\n        switch (resourceType) {\n          case 'material':\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n\n            break;\n\n          case 'texture':\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n            break;\n\n          case 'vertexColors':\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\n            break;\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n\n      return meshes;\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData['triangleProperties'];\n      const objectPid = objectData.pid;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n\n      return resourceMap;\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n\n      return group;\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n\n      return material;\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      const composite = new Group();\n\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build = objects[component.objectId];\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n\n        const object3D = build.clone(); // apply component transform\n\n        const transform = component.transform;\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        composite.add(object3D);\n      }\n\n      return composite;\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      const objectData = modelData['resources']['object'][objectId];\n\n      if (objectData['mesh']) {\n        const meshData = objectData['mesh'];\n        const extensions = modelData['extensions'];\n        const modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n\n    function buildObjects(data3mf) {\n      const modelsData = data3mf.model;\n      const modelRels = data3mf.modelRels;\n      const objects = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData['resources']['object']);\n\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n\n      return objects;\n    }\n\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n\n    function build(objects, data3mf) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf['rels']);\n      const buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects[buildItem['objectId']]; // apply transform\n\n        const transform = buildItem['transform'];\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        group.add(object3D);\n      }\n\n      return group;\n    }\n\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n\n}\n\nexport { ThreeMFLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}