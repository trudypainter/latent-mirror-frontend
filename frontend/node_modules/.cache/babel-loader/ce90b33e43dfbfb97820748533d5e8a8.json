{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Matrix4, Vector3, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, Mesh, Line, Quaternion, BufferGeometry, BufferAttribute } from 'three';\nvar CCDIKHelper = /*#__PURE__*/function (_Object3D) {\n  _inherits(CCDIKHelper, _Object3D);\n  var _super = _createSuper(CCDIKHelper);\n  function CCDIKHelper(mesh) {\n    var _this;\n    var iks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    _classCallCheck(this, CCDIKHelper);\n    _this = _super.call(this);\n    _defineProperty(_assertThisInitialized(_this), \"_m\", new Matrix4());\n    _defineProperty(_assertThisInitialized(_this), \"_v\", new Vector3());\n    _this.root = mesh;\n    _this.iks = iks;\n    _this.matrix.copy(mesh.matrixWorld);\n    _this.matrixAutoUpdate = false;\n    _this.sphereGeometry = new SphereGeometry(0.25, 16, 8);\n    _this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.lineMaterial = new LineBasicMaterial({\n      color: new Color(0xff0000),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    function createLineGeometry(ik) {\n      var geometry = new BufferGeometry();\n      var vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n    for (var i = 0, il = iks.length; i < il; i++) {\n      var ik = iks[i];\n      _this.add(createTargetMesh());\n      _this.add(createEffectorMesh());\n      for (var j = 0, jl = ik.links.length; j < jl; j++) {\n        _this.add(createLinkMesh());\n      }\n      _this.add(createLine(ik));\n    }\n    return _this;\n  }\n  _createClass(CCDIKHelper, [{\n    key: \"_getPosition\",\n    value: function _getPosition(bone, matrixWorldInv) {\n      return this._v.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n    }\n  }, {\n    key: \"_setPositionOfBoneToAttributeArray\",\n    value: function _setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n      var v = this._getPosition(bone, matrixWorldInv);\n      array[index * 3 + 0] = v.x;\n      array[index * 3 + 1] = v.y;\n      array[index * 3 + 2] = v.z;\n    }\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      var mesh = this.root;\n      if (this.visible) {\n        var offset = 0;\n        var iks = this.iks;\n        var bones = mesh.skeleton.bones;\n        this._m.copy(mesh.matrixWorld).invert();\n        for (var i = 0, il = iks.length; i < il; i++) {\n          var ik = iks[i];\n          var targetBone = bones[ik.target];\n          var effectorBone = bones[ik.effector];\n          var targetMesh = this.children[offset++];\n          var effectorMesh = this.children[offset++];\n          targetMesh.position.copy(this._getPosition(targetBone, this._m));\n          effectorMesh.position.copy(this._getPosition(effectorBone, this._m));\n          for (var j = 0, jl = ik.links.length; j < jl; j++) {\n            var link = ik.links[j];\n            var linkBone = bones[link.index];\n            var linkMesh = this.children[offset++];\n            linkMesh.position.copy(this._getPosition(linkBone, this._m));\n          }\n          var line = this.children[offset++];\n          var array = line.geometry.attributes.position.array;\n          this._setPositionOfBoneToAttributeArray(array, 0, targetBone, this._m);\n          this._setPositionOfBoneToAttributeArray(array, 1, effectorBone, this._m);\n          for (var _j = 0, _jl = ik.links.length; _j < _jl; _j++) {\n            var _link = ik.links[_j];\n            var _linkBone = bones[_link.index];\n            this._setPositionOfBoneToAttributeArray(array, _j + 2, _linkBone, this._m);\n          }\n          line.geometry.attributes.position.needsUpdate = true;\n        }\n      }\n      this.matrix.copy(mesh.matrixWorld);\n      _get(_getPrototypeOf(CCDIKHelper.prototype), \"updateMatrixWorld\", this).call(this, force);\n    }\n  }]);\n  return CCDIKHelper;\n}(Object3D); /**\n              * CCD Algorithm\n              *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n              *\n              * // ik parameter example\n              * //\n              * // target, effector, index in links are bone index in skeleton.bones.\n              * // the bones relation should be\n              * // <-- parent                                  child -->\n              * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n              * iks = [ {\n              *\ttarget: 1,\n              *\teffector: 2,\n              *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n              *\titeration: 10,\n              *\tminAngle: 0.0,\n              *\tmaxAngle: 1.0,\n              * } ];\n              */\nvar CCDIKSolver = /*#__PURE__*/function () {\n  function CCDIKSolver(mesh, iks) {\n    _classCallCheck(this, CCDIKSolver);\n    _defineProperty(this, \"q\", new Quaternion());\n    _defineProperty(this, \"targetPos\", new Vector3());\n    _defineProperty(this, \"targetVec\", new Vector3());\n    _defineProperty(this, \"effectorPos\", new Vector3());\n    _defineProperty(this, \"effectorVec\", new Vector3());\n    _defineProperty(this, \"linkPos\", new Vector3());\n    _defineProperty(this, \"invLinkQ\", new Quaternion());\n    _defineProperty(this, \"linkScale\", new Vector3());\n    _defineProperty(this, \"axis\", new Vector3());\n    _defineProperty(this, \"vector\", new Vector3());\n    this.mesh = mesh;\n    this.iks = iks;\n    var bones = this.mesh.skeleton.bones;\n    for (var i = 0, il = this.iks.length; i < il; i++) {\n      var ik = this.iks[i];\n      var effector = bones[ik.effector];\n      var links = ik.links;\n      var link0 = void 0,\n        link1 = void 0;\n      link0 = effector;\n      for (var j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n        if (link0.parent !== link1) {\n          console.warn(\"THREE.CCDIKSolver: bone \".concat(link0.name, \" is not the child of bone \").concat(link1.name));\n        }\n        link0 = link1;\n      }\n    }\n  }\n  _createClass(CCDIKSolver, [{\n    key: \"update\",\n    value: function update() {\n      var bones = this.mesh.skeleton.bones;\n      var iks = this.iks; // for reference overhead reduction in loop\n\n      var math = Math;\n      for (var i = 0, il = iks.length; i < il; i++) {\n        var ik = iks[i];\n        var effector = bones[ik.effector];\n        var target = bones[ik.target]; // don't use getWorldPosition() here for the performance\n        // because it calls updateMatrixWorld( true ) inside.\n\n        this.targetPos.setFromMatrixPosition(target.matrixWorld);\n        var links = ik.links;\n        var iteration = ik.iteration !== undefined ? ik.iteration : 1;\n        for (var j = 0; j < iteration; j++) {\n          var rotated = false;\n          for (var k = 0, kl = links.length; k < kl; k++) {\n            var link = bones[links[k].index]; // skip this link and following links.\n            // this skip is used for MMD performance optimization.\n\n            if (links[k].enabled === false) break;\n            var limitation = links[k].limitation;\n            var rotationMin = links[k].rotationMin;\n            var rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\n            // because they call updateMatrixWorld( true ) inside.\n\n            link.matrixWorld.decompose(this.linkPos, this.invLinkQ, this.linkScale);\n            this.invLinkQ.invert();\n            this.effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\n\n            this.effectorVec.subVectors(this.effectorPos, this.linkPos);\n            this.effectorVec.applyQuaternion(this.invLinkQ);\n            this.effectorVec.normalize();\n            this.targetVec.subVectors(this.targetPos, this.linkPos);\n            this.targetVec.applyQuaternion(this.invLinkQ);\n            this.targetVec.normalize();\n            var angle = this.targetVec.dot(this.effectorVec);\n            if (angle > 1.0) {\n              angle = 1.0;\n            } else if (angle < -1.0) {\n              angle = -1.0;\n            }\n            angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\n            // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\n            if (angle < 1e-5) continue;\n            if (ik.minAngle !== undefined && angle < ik.minAngle) {\n              angle = ik.minAngle;\n            }\n            if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n              angle = ik.maxAngle;\n            }\n            this.axis.crossVectors(this.effectorVec, this.targetVec);\n            this.axis.normalize();\n            this.q.setFromAxisAngle(this.axis, angle);\n            link.quaternion.multiply(this.q); // TODO: re-consider the limitation specification\n\n            if (limitation !== undefined) {\n              var c = link.quaternion.w;\n              if (c > 1.0) c = 1.0;\n              var c2 = math.sqrt(1 - c * c);\n              link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n            }\n            if (rotationMin !== undefined) {\n              link.rotation.setFromVector3(link.rotation.toVector3(this.vector).max(rotationMin));\n            }\n            if (rotationMax !== undefined) {\n              link.rotation.setFromVector3(link.rotation.toVector3(this.vector).min(rotationMax));\n            }\n            link.updateMatrixWorld(true);\n            rotated = true;\n          }\n          if (!rotated) break;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"createHelper\",\n    value: function createHelper() {\n      return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n    }\n  }]);\n  return CCDIKSolver;\n}();\nexport { CCDIKHelper, CCDIKSolver };","map":{"version":3,"names":["_defineProperty","Object3D","Matrix4","Vector3","SphereGeometry","MeshBasicMaterial","Color","LineBasicMaterial","Mesh","Line","Quaternion","BufferGeometry","BufferAttribute","CCDIKHelper","mesh","iks","root","matrix","copy","matrixWorld","matrixAutoUpdate","sphereGeometry","targetSphereMaterial","color","depthTest","depthWrite","transparent","effectorSphereMaterial","linkSphereMaterial","lineMaterial","createLineGeometry","ik","geometry","vertices","Float32Array","links","length","setAttribute","createTargetMesh","scope","createEffectorMesh","createLinkMesh","createLine","i","il","add","j","jl","bone","matrixWorldInv","_v","setFromMatrixPosition","applyMatrix4","array","index","v","_getPosition","x","y","z","force","visible","offset","bones","skeleton","_m","invert","targetBone","target","effectorBone","effector","targetMesh","children","effectorMesh","position","link","linkBone","linkMesh","line","attributes","_setPositionOfBoneToAttributeArray","needsUpdate","CCDIKSolver","link0","link1","parent","console","warn","name","math","Math","targetPos","iteration","undefined","rotated","k","kl","enabled","limitation","rotationMin","rotationMax","decompose","linkPos","invLinkQ","linkScale","effectorPos","effectorVec","subVectors","applyQuaternion","normalize","targetVec","angle","dot","acos","minAngle","maxAngle","axis","crossVectors","q","setFromAxisAngle","quaternion","multiply","c","w","c2","sqrt","set","rotation","setFromVector3","toVector3","vector","max","min","updateMatrixWorld","userData","MMD"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/animation/CCDIKSolver.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Matrix4, Vector3, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, Mesh, Line, Quaternion, BufferGeometry, BufferAttribute } from 'three';\n\nclass CCDIKHelper extends Object3D {\n  constructor(mesh, iks = []) {\n    super();\n\n    _defineProperty(this, \"_m\", new Matrix4());\n\n    _defineProperty(this, \"_v\", new Vector3());\n\n    this.root = mesh;\n    this.iks = iks;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(0.25, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(0xff0000),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n\n    function createLineGeometry(ik) {\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      this.add(createTargetMesh());\n      this.add(createEffectorMesh());\n\n      for (let j = 0, jl = ik.links.length; j < jl; j++) {\n        this.add(createLinkMesh());\n      }\n\n      this.add(createLine(ik));\n    }\n  }\n\n  _getPosition(bone, matrixWorldInv) {\n    return this._v.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n  }\n\n  _setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n    const v = this._getPosition(bone, matrixWorldInv);\n\n    array[index * 3 + 0] = v.x;\n    array[index * 3 + 1] = v.y;\n    array[index * 3 + 2] = v.z;\n  }\n\n  updateMatrixWorld(force) {\n    const mesh = this.root;\n\n    if (this.visible) {\n      let offset = 0;\n      const iks = this.iks;\n      const bones = mesh.skeleton.bones;\n\n      this._m.copy(mesh.matrixWorld).invert();\n\n      for (let i = 0, il = iks.length; i < il; i++) {\n        const ik = iks[i];\n        const targetBone = bones[ik.target];\n        const effectorBone = bones[ik.effector];\n        const targetMesh = this.children[offset++];\n        const effectorMesh = this.children[offset++];\n        targetMesh.position.copy(this._getPosition(targetBone, this._m));\n        effectorMesh.position.copy(this._getPosition(effectorBone, this._m));\n\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          const linkMesh = this.children[offset++];\n          linkMesh.position.copy(this._getPosition(linkBone, this._m));\n        }\n\n        const line = this.children[offset++];\n        const array = line.geometry.attributes.position.array;\n\n        this._setPositionOfBoneToAttributeArray(array, 0, targetBone, this._m);\n\n        this._setPositionOfBoneToAttributeArray(array, 1, effectorBone, this._m);\n\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n\n          this._setPositionOfBoneToAttributeArray(array, j + 2, linkBone, this._m);\n        }\n\n        line.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n\n    this.matrix.copy(mesh.matrixWorld);\n    super.updateMatrixWorld(force);\n  }\n\n}\n/**\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\n\n\nclass CCDIKSolver {\n  constructor(mesh, iks) {\n    _defineProperty(this, \"q\", new Quaternion());\n\n    _defineProperty(this, \"targetPos\", new Vector3());\n\n    _defineProperty(this, \"targetVec\", new Vector3());\n\n    _defineProperty(this, \"effectorPos\", new Vector3());\n\n    _defineProperty(this, \"effectorVec\", new Vector3());\n\n    _defineProperty(this, \"linkPos\", new Vector3());\n\n    _defineProperty(this, \"invLinkQ\", new Quaternion());\n\n    _defineProperty(this, \"linkScale\", new Vector3());\n\n    _defineProperty(this, \"axis\", new Vector3());\n\n    _defineProperty(this, \"vector\", new Vector3());\n\n    this.mesh = mesh;\n    this.iks = iks;\n    const bones = this.mesh.skeleton.bones;\n\n    for (let i = 0, il = this.iks.length; i < il; i++) {\n      const ik = this.iks[i];\n      const effector = bones[ik.effector];\n      const links = ik.links;\n      let link0, link1;\n      link0 = effector;\n\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n\n        if (link0.parent !== link1) {\n          console.warn(`THREE.CCDIKSolver: bone ${link0.name} is not the child of bone ${link1.name}`);\n        }\n\n        link0 = link1;\n      }\n    }\n  }\n\n  update() {\n    const bones = this.mesh.skeleton.bones;\n    const iks = this.iks; // for reference overhead reduction in loop\n\n    const math = Math;\n\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const effector = bones[ik.effector];\n      const target = bones[ik.target]; // don't use getWorldPosition() here for the performance\n      // because it calls updateMatrixWorld( true ) inside.\n\n      this.targetPos.setFromMatrixPosition(target.matrixWorld);\n      const links = ik.links;\n      const iteration = ik.iteration !== undefined ? ik.iteration : 1;\n\n      for (let j = 0; j < iteration; j++) {\n        let rotated = false;\n\n        for (let k = 0, kl = links.length; k < kl; k++) {\n          const link = bones[links[k].index]; // skip this link and following links.\n          // this skip is used for MMD performance optimization.\n\n          if (links[k].enabled === false) break;\n          const limitation = links[k].limitation;\n          const rotationMin = links[k].rotationMin;\n          const rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\n          // because they call updateMatrixWorld( true ) inside.\n\n          link.matrixWorld.decompose(this.linkPos, this.invLinkQ, this.linkScale);\n          this.invLinkQ.invert();\n          this.effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\n\n          this.effectorVec.subVectors(this.effectorPos, this.linkPos);\n          this.effectorVec.applyQuaternion(this.invLinkQ);\n          this.effectorVec.normalize();\n          this.targetVec.subVectors(this.targetPos, this.linkPos);\n          this.targetVec.applyQuaternion(this.invLinkQ);\n          this.targetVec.normalize();\n          let angle = this.targetVec.dot(this.effectorVec);\n\n          if (angle > 1.0) {\n            angle = 1.0;\n          } else if (angle < -1.0) {\n            angle = -1.0;\n          }\n\n          angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\n          // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\n          if (angle < 1e-5) continue;\n\n          if (ik.minAngle !== undefined && angle < ik.minAngle) {\n            angle = ik.minAngle;\n          }\n\n          if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n            angle = ik.maxAngle;\n          }\n\n          this.axis.crossVectors(this.effectorVec, this.targetVec);\n          this.axis.normalize();\n          this.q.setFromAxisAngle(this.axis, angle);\n          link.quaternion.multiply(this.q); // TODO: re-consider the limitation specification\n\n          if (limitation !== undefined) {\n            let c = link.quaternion.w;\n            if (c > 1.0) c = 1.0;\n            const c2 = math.sqrt(1 - c * c);\n            link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n          }\n\n          if (rotationMin !== undefined) {\n            link.rotation.setFromVector3(link.rotation.toVector3(this.vector).max(rotationMin));\n          }\n\n          if (rotationMax !== undefined) {\n            link.rotation.setFromVector3(link.rotation.toVector3(this.vector).min(rotationMax));\n          }\n\n          link.updateMatrixWorld(true);\n          rotated = true;\n        }\n\n        if (!rotated) break;\n      }\n    }\n\n    return this;\n  }\n\n  createHelper() {\n    return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n  }\n\n}\n\nexport { CCDIKHelper, CCDIKSolver };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}