{"ast":null,"code":"import { Box3, InstancedInterleavedBuffer, InterleavedBufferAttribute, Line3, MathUtils, Matrix4, Mesh, Sphere, Vector3, Vector4 } from 'three';\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\nimport { LineMaterial } from '../lines/LineMaterial.js';\nconst _start = new Vector3();\nconst _end = new Vector3();\nconst _start4 = new Vector4();\nconst _end4 = new Vector4();\nconst _ssOrigin = new Vector4();\nconst _ssOrigin3 = new Vector3();\nconst _mvMatrix = new Matrix4();\nconst _line = new Line3();\nconst _closestPoint = new Vector3();\nconst _box = new Box3();\nconst _sphere = new Sphere();\nconst _clipToWorldVector = new Vector4();\nlet _ray, _instanceStart, _instanceEnd, _lineWidth;\n\n// Returns the margin required to expand by in world space given the distance from the camera,\n// line width, resolution, and camera projection\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n  // transform into clip space, adjust the x and y values by the pixel width offset, then\n  // transform back into world space to get world offset. Note clip space is [-1, 1] so full\n  // width does not need to be halved.\n  _clipToWorldVector.set(0, 0, -distance, 1.0).applyMatrix4(camera.projectionMatrix);\n  _clipToWorldVector.multiplyScalar(1.0 / _clipToWorldVector.w);\n  _clipToWorldVector.x = _lineWidth / resolution.width;\n  _clipToWorldVector.y = _lineWidth / resolution.height;\n  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n  _clipToWorldVector.multiplyScalar(1.0 / _clipToWorldVector.w);\n  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\nfunction raycastWorldUnits(lineSegments, intersects) {\n  for (let i = 0, l = _instanceStart.count; i < l; i++) {\n    _line.start.fromBufferAttribute(_instanceStart, i);\n    _line.end.fromBufferAttribute(_instanceEnd, i);\n    const pointOnLine = new Vector3();\n    const point = new Vector3();\n    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n    if (isInside) {\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n  const projectionMatrix = camera.projectionMatrix;\n  const material = lineSegments.material;\n  const resolution = material.resolution;\n  const matrixWorld = lineSegments.matrixWorld;\n  const geometry = lineSegments.geometry;\n  const instanceStart = geometry.attributes.instanceStart;\n  const instanceEnd = geometry.attributes.instanceEnd;\n  const near = -camera.near;\n\n  //\n\n  // pick a point 1 unit out along the ray to avoid the ray origin\n  // sitting at the camera origin which will cause \"w\" to be 0 when\n  // applying the projection matrix.\n  _ray.at(1, _ssOrigin);\n\n  // ndc space [ - 1.0, 1.0 ]\n  _ssOrigin.w = 1;\n  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n  _ssOrigin.applyMatrix4(projectionMatrix);\n  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n\n  // screen space\n  _ssOrigin.x *= resolution.x / 2;\n  _ssOrigin.y *= resolution.y / 2;\n  _ssOrigin.z = 0;\n  _ssOrigin3.copy(_ssOrigin);\n  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n  for (let i = 0, l = instanceStart.count; i < l; i++) {\n    _start4.fromBufferAttribute(instanceStart, i);\n    _end4.fromBufferAttribute(instanceEnd, i);\n    _start4.w = 1;\n    _end4.w = 1;\n\n    // camera space\n    _start4.applyMatrix4(_mvMatrix);\n    _end4.applyMatrix4(_mvMatrix);\n\n    // skip the segment if it's entirely behind the camera\n    const isBehindCameraNear = _start4.z > near && _end4.z > near;\n    if (isBehindCameraNear) {\n      continue;\n    }\n\n    // trim the segment if it extends behind camera near\n    if (_start4.z > near) {\n      const deltaDist = _start4.z - _end4.z;\n      const t = (_start4.z - near) / deltaDist;\n      _start4.lerp(_end4, t);\n    } else if (_end4.z > near) {\n      const deltaDist = _end4.z - _start4.z;\n      const t = (_end4.z - near) / deltaDist;\n      _end4.lerp(_start4, t);\n    }\n\n    // clip space\n    _start4.applyMatrix4(projectionMatrix);\n    _end4.applyMatrix4(projectionMatrix);\n\n    // ndc space [ - 1.0, 1.0 ]\n    _start4.multiplyScalar(1 / _start4.w);\n    _end4.multiplyScalar(1 / _end4.w);\n\n    // screen space\n    _start4.x *= resolution.x / 2;\n    _start4.y *= resolution.y / 2;\n    _end4.x *= resolution.x / 2;\n    _end4.y *= resolution.y / 2;\n\n    // create 2d segment\n    _line.start.copy(_start4);\n    _line.start.z = 0;\n    _line.end.copy(_end4);\n    _line.end.z = 0;\n\n    // get closest point on ray to segment\n    const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n    _line.at(param, _closestPoint);\n\n    // check if the intersection point is within clip space\n    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);\n    const isInClipSpace = zPos >= -1 && zPos <= 1;\n    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n    if (isInClipSpace && isInside) {\n      _line.start.fromBufferAttribute(instanceStart, i);\n      _line.end.fromBufferAttribute(instanceEnd, i);\n      _line.start.applyMatrix4(matrixWorld);\n      _line.end.applyMatrix4(matrixWorld);\n      const pointOnLine = new Vector3();\n      const point = new Vector3();\n      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n      intersects.push({\n        point: point,\n        pointOnLine: pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nclass LineSegments2 extends Mesh {\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new LineSegmentsGeometry();\n    let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineMaterial({\n      color: Math.random() * 0xffffff\n    });\n    super(geometry, material);\n    this.isLineSegments2 = true;\n    this.type = 'LineSegments2';\n  }\n\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n    geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n    geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    const worldUnits = this.material.worldUnits;\n    const camera = raycaster.camera;\n    if (camera === null && !worldUnits) {\n      console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');\n    }\n    const threshold = raycaster.params.Line2 !== undefined ? raycaster.params.Line2.threshold || 0 : 0;\n    _ray = raycaster.ray;\n    const matrixWorld = this.matrixWorld;\n    const geometry = this.geometry;\n    const material = this.material;\n    _lineWidth = material.linewidth + threshold;\n    _instanceStart = geometry.attributes.instanceStart;\n    _instanceEnd = geometry.attributes.instanceEnd;\n\n    // check if we intersect the sphere bounds\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n\n    // increase the sphere bounds by the worst case line screen space width\n    let sphereMargin;\n    if (worldUnits) {\n      sphereMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n      sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n    }\n    _sphere.radius += sphereMargin;\n    if (_ray.intersectsSphere(_sphere) === false) {\n      return;\n    }\n\n    // check if we intersect the box bounds\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n\n    // increase the box bounds by the worst case line width\n    let boxMargin;\n    if (worldUnits) {\n      boxMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n      boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n    }\n    _box.expandByScalar(boxMargin);\n    if (_ray.intersectsBox(_box) === false) {\n      return;\n    }\n    if (worldUnits) {\n      raycastWorldUnits(this, intersects);\n    } else {\n      raycastScreenSpace(this, camera, intersects);\n    }\n  }\n}\nexport { LineSegments2 };","map":{"version":3,"names":["Box3","InstancedInterleavedBuffer","InterleavedBufferAttribute","Line3","MathUtils","Matrix4","Mesh","Sphere","Vector3","Vector4","LineSegmentsGeometry","LineMaterial","_start","_end","_start4","_end4","_ssOrigin","_ssOrigin3","_mvMatrix","_line","_closestPoint","_box","_sphere","_clipToWorldVector","_ray","_instanceStart","_instanceEnd","_lineWidth","getWorldSpaceHalfWidth","camera","distance","resolution","set","applyMatrix4","projectionMatrix","multiplyScalar","w","x","width","y","height","projectionMatrixInverse","Math","abs","max","raycastWorldUnits","lineSegments","intersects","i","l","count","start","fromBufferAttribute","end","pointOnLine","point","distanceSqToSegment","isInside","distanceTo","push","origin","object","face","faceIndex","uv","uv2","raycastScreenSpace","material","matrixWorld","geometry","instanceStart","attributes","instanceEnd","near","at","matrixWorldInverse","z","copy","multiplyMatrices","isBehindCameraNear","deltaDist","t","lerp","param","closestPointToPointParameter","zPos","isInClipSpace","LineSegments2","constructor","color","random","isLineSegments2","type","computeLineDistances","lineDistances","Float32Array","j","instanceDistanceBuffer","setAttribute","raycast","raycaster","worldUnits","console","error","threshold","params","Line2","undefined","ray","linewidth","boundingSphere","computeBoundingSphere","sphereMargin","distanceToSphere","distanceToPoint","radius","intersectsSphere","boundingBox","computeBoundingBox","boxMargin","distanceToBox","expandByScalar","intersectsBox"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three/examples/jsm/lines/LineSegments2.js"],"sourcesContent":["import {\n\tBox3,\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tLine3,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tSphere,\n\tVector3,\n\tVector4\n} from 'three';\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\nimport { LineMaterial } from '../lines/LineMaterial.js';\n\nconst _start = new Vector3();\nconst _end = new Vector3();\n\nconst _start4 = new Vector4();\nconst _end4 = new Vector4();\n\nconst _ssOrigin = new Vector4();\nconst _ssOrigin3 = new Vector3();\nconst _mvMatrix = new Matrix4();\nconst _line = new Line3();\nconst _closestPoint = new Vector3();\n\nconst _box = new Box3();\nconst _sphere = new Sphere();\nconst _clipToWorldVector = new Vector4();\n\nlet _ray, _instanceStart, _instanceEnd, _lineWidth;\n\n// Returns the margin required to expand by in world space given the distance from the camera,\n// line width, resolution, and camera projection\nfunction getWorldSpaceHalfWidth( camera, distance, resolution ) {\n\n\t// transform into clip space, adjust the x and y values by the pixel width offset, then\n\t// transform back into world space to get world offset. Note clip space is [-1, 1] so full\n\t// width does not need to be halved.\n\t_clipToWorldVector.set( 0, 0, - distance, 1.0 ).applyMatrix4( camera.projectionMatrix );\n\t_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );\n\t_clipToWorldVector.x = _lineWidth / resolution.width;\n\t_clipToWorldVector.y = _lineWidth / resolution.height;\n\t_clipToWorldVector.applyMatrix4( camera.projectionMatrixInverse );\n\t_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );\n\n\treturn Math.abs( Math.max( _clipToWorldVector.x, _clipToWorldVector.y ) );\n\n}\n\nfunction raycastWorldUnits( lineSegments, intersects ) {\n\n\tfor ( let i = 0, l = _instanceStart.count; i < l; i ++ ) {\n\n\t\t_line.start.fromBufferAttribute( _instanceStart, i );\n\t\t_line.end.fromBufferAttribute( _instanceEnd, i );\n\n\t\tconst pointOnLine = new Vector3();\n\t\tconst point = new Vector3();\n\n\t\t_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );\n\t\tconst isInside = point.distanceTo( pointOnLine ) < _lineWidth * 0.5;\n\n\t\tif ( isInside ) {\n\n\t\t\tintersects.push( {\n\t\t\t\tpoint,\n\t\t\t\tpointOnLine,\n\t\t\t\tdistance: _ray.origin.distanceTo( point ),\n\t\t\t\tobject: lineSegments,\n\t\t\t\tface: null,\n\t\t\t\tfaceIndex: i,\n\t\t\t\tuv: null,\n\t\t\t\tuv2: null,\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nfunction raycastScreenSpace( lineSegments, camera, intersects ) {\n\n\tconst projectionMatrix = camera.projectionMatrix;\n\tconst material = lineSegments.material;\n\tconst resolution = material.resolution;\n\tconst matrixWorld = lineSegments.matrixWorld;\n\n\tconst geometry = lineSegments.geometry;\n\tconst instanceStart = geometry.attributes.instanceStart;\n\tconst instanceEnd = geometry.attributes.instanceEnd;\n\n\tconst near = - camera.near;\n\n\t//\n\n\t// pick a point 1 unit out along the ray to avoid the ray origin\n\t// sitting at the camera origin which will cause \"w\" to be 0 when\n\t// applying the projection matrix.\n\t_ray.at( 1, _ssOrigin );\n\n\t// ndc space [ - 1.0, 1.0 ]\n\t_ssOrigin.w = 1;\n\t_ssOrigin.applyMatrix4( camera.matrixWorldInverse );\n\t_ssOrigin.applyMatrix4( projectionMatrix );\n\t_ssOrigin.multiplyScalar( 1 / _ssOrigin.w );\n\n\t// screen space\n\t_ssOrigin.x *= resolution.x / 2;\n\t_ssOrigin.y *= resolution.y / 2;\n\t_ssOrigin.z = 0;\n\n\t_ssOrigin3.copy( _ssOrigin );\n\n\t_mvMatrix.multiplyMatrices( camera.matrixWorldInverse, matrixWorld );\n\n\tfor ( let i = 0, l = instanceStart.count; i < l; i ++ ) {\n\n\t\t_start4.fromBufferAttribute( instanceStart, i );\n\t\t_end4.fromBufferAttribute( instanceEnd, i );\n\n\t\t_start4.w = 1;\n\t\t_end4.w = 1;\n\n\t\t// camera space\n\t\t_start4.applyMatrix4( _mvMatrix );\n\t\t_end4.applyMatrix4( _mvMatrix );\n\n\t\t// skip the segment if it's entirely behind the camera\n\t\tconst isBehindCameraNear = _start4.z > near && _end4.z > near;\n\t\tif ( isBehindCameraNear ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\t// trim the segment if it extends behind camera near\n\t\tif ( _start4.z > near ) {\n\n\t\t\tconst deltaDist = _start4.z - _end4.z;\n\t\t\tconst t = ( _start4.z - near ) / deltaDist;\n\t\t\t_start4.lerp( _end4, t );\n\n\t\t} else if ( _end4.z > near ) {\n\n\t\t\tconst deltaDist = _end4.z - _start4.z;\n\t\t\tconst t = ( _end4.z - near ) / deltaDist;\n\t\t\t_end4.lerp( _start4, t );\n\n\t\t}\n\n\t\t// clip space\n\t\t_start4.applyMatrix4( projectionMatrix );\n\t\t_end4.applyMatrix4( projectionMatrix );\n\n\t\t// ndc space [ - 1.0, 1.0 ]\n\t\t_start4.multiplyScalar( 1 / _start4.w );\n\t\t_end4.multiplyScalar( 1 / _end4.w );\n\n\t\t// screen space\n\t\t_start4.x *= resolution.x / 2;\n\t\t_start4.y *= resolution.y / 2;\n\n\t\t_end4.x *= resolution.x / 2;\n\t\t_end4.y *= resolution.y / 2;\n\n\t\t// create 2d segment\n\t\t_line.start.copy( _start4 );\n\t\t_line.start.z = 0;\n\n\t\t_line.end.copy( _end4 );\n\t\t_line.end.z = 0;\n\n\t\t// get closest point on ray to segment\n\t\tconst param = _line.closestPointToPointParameter( _ssOrigin3, true );\n\t\t_line.at( param, _closestPoint );\n\n\t\t// check if the intersection point is within clip space\n\t\tconst zPos = MathUtils.lerp( _start4.z, _end4.z, param );\n\t\tconst isInClipSpace = zPos >= - 1 && zPos <= 1;\n\n\t\tconst isInside = _ssOrigin3.distanceTo( _closestPoint ) < _lineWidth * 0.5;\n\n\t\tif ( isInClipSpace && isInside ) {\n\n\t\t\t_line.start.fromBufferAttribute( instanceStart, i );\n\t\t\t_line.end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\t_line.start.applyMatrix4( matrixWorld );\n\t\t\t_line.end.applyMatrix4( matrixWorld );\n\n\t\t\tconst pointOnLine = new Vector3();\n\t\t\tconst point = new Vector3();\n\n\t\t\t_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );\n\n\t\t\tintersects.push( {\n\t\t\t\tpoint: point,\n\t\t\t\tpointOnLine: pointOnLine,\n\t\t\t\tdistance: _ray.origin.distanceTo( point ),\n\t\t\t\tobject: lineSegments,\n\t\t\t\tface: null,\n\t\t\t\tfaceIndex: i,\n\t\t\t\tuv: null,\n\t\t\t\tuv2: null,\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nclass LineSegments2 extends Mesh {\n\n\tconstructor( geometry = new LineSegmentsGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineSegments2 = true;\n\n\t\tthis.type = 'LineSegments2';\n\n\t}\n\n\t// for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst instanceStart = geometry.attributes.instanceStart;\n\t\tconst instanceEnd = geometry.attributes.instanceEnd;\n\t\tconst lineDistances = new Float32Array( 2 * instanceStart.count );\n\n\t\tfor ( let i = 0, j = 0, l = instanceStart.count; i < l; i ++, j += 2 ) {\n\n\t\t\t_start.fromBufferAttribute( instanceStart, i );\n\t\t\t_end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + _start.distanceTo( _end );\n\n\t\t}\n\n\t\tconst instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst worldUnits = this.material.worldUnits;\n\t\tconst camera = raycaster.camera;\n\n\t\tif ( camera === null && ! worldUnits ) {\n\n\t\t\tconsole.error( 'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.' );\n\n\t\t}\n\n\t\tconst threshold = ( raycaster.params.Line2 !== undefined ) ? raycaster.params.Line2.threshold || 0 : 0;\n\n\t\t_ray = raycaster.ray;\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\t_lineWidth = material.linewidth + threshold;\n\n\t\t_instanceStart = geometry.attributes.instanceStart;\n\t\t_instanceEnd = geometry.attributes.instanceEnd;\n\n\t\t// check if we intersect the sphere bounds\n\t\tif ( geometry.boundingSphere === null ) {\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t}\n\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( matrixWorld );\n\n\t\t// increase the sphere bounds by the worst case line screen space width\n\t\tlet sphereMargin;\n\t\tif ( worldUnits ) {\n\n\t\t\tsphereMargin = _lineWidth * 0.5;\n\n\t\t} else {\n\n\t\t\tconst distanceToSphere = Math.max( camera.near, _sphere.distanceToPoint( _ray.origin ) );\n\t\t\tsphereMargin = getWorldSpaceHalfWidth( camera, distanceToSphere, material.resolution );\n\n\t\t}\n\n\t\t_sphere.radius += sphereMargin;\n\n\t\tif ( _ray.intersectsSphere( _sphere ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// check if we intersect the box bounds\n\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\n\t\t}\n\n\t\t_box.copy( geometry.boundingBox ).applyMatrix4( matrixWorld );\n\n\t\t// increase the box bounds by the worst case line width\n\t\tlet boxMargin;\n\t\tif ( worldUnits ) {\n\n\t\t\tboxMargin = _lineWidth * 0.5;\n\n\t\t} else {\n\n\t\t\tconst distanceToBox = Math.max( camera.near, _box.distanceToPoint( _ray.origin ) );\n\t\t\tboxMargin = getWorldSpaceHalfWidth( camera, distanceToBox, material.resolution );\n\n\t\t}\n\n\t\t_box.expandByScalar( boxMargin );\n\n\t\tif ( _ray.intersectsBox( _box ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( worldUnits ) {\n\n\t\t\traycastWorldUnits( this, intersects );\n\n\t\t} else {\n\n\t\t\traycastScreenSpace( this, camera, intersects );\n\n\t\t}\n\n\t}\n\n}\n\nexport { LineSegments2 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}