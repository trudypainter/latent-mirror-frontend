{"ast":null,"code":"import _construct from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _toConsumableArray from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"points\", \"closed\", \"curveType\", \"tension\", \"segments\", \"vertexColors\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\nvar CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine(_ref, ref) {\n  var points = _ref.points,\n    _ref$closed = _ref.closed,\n    closed = _ref$closed === void 0 ? false : _ref$closed,\n    _ref$curveType = _ref.curveType,\n    curveType = _ref$curveType === void 0 ? 'centripetal' : _ref$curveType,\n    _ref$tension = _ref.tension,\n    tension = _ref$tension === void 0 ? 0.5 : _ref$tension,\n    _ref$segments = _ref.segments,\n    segments = _ref$segments === void 0 ? 20 : _ref$segments,\n    vertexColors = _ref.vertexColors,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var curve = React.useMemo(function () {\n    var mappedPoints = points.map(function (pt) {\n      return pt instanceof Vector3 ? pt : _construct(Vector3, _toConsumableArray(pt));\n    });\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  var segmentedPoints = React.useMemo(function () {\n    return curve.getPoints(segments);\n  }, [curve, segments]);\n  var interpolatedVertexColors = React.useMemo(function () {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    var mappedColors = vertexColors.map(function (color) {\n      return color instanceof Color ? color : _construct(Color, _toConsumableArray(color));\n    });\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    var iColors = [mappedColors[0]];\n    var divisions = segments / (mappedColors.length - 1);\n    for (var i = 1; i < segments; i++) {\n      var alpha = i % divisions / divisions;\n      var colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\nexport { CatmullRomLine };","map":{"version":3,"names":["_extends","React","Vector3","CatmullRomCurve3","Color","Line","CatmullRomLine","forwardRef","ref","points","closed","curveType","tension","segments","vertexColors","rest","curve","useMemo","mappedPoints","map","pt","segmentedPoints","getPoints","interpolatedVertexColors","length","undefined","mappedColors","color","push","clone","iColors","divisions","i","alpha","colorIndex","Math","floor","lerp","createElement"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@react-three/drei/core/CatmullRomLine.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\n\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine({\n  points,\n  closed = false,\n  curveType = 'centripetal',\n  tension = 0.5,\n  segments = 20,\n  vertexColors,\n  ...rest\n}, ref) {\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\n\nexport { CatmullRomLine };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}