{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompressedTextureLoader } from 'three';\n\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\nvar KTXLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(KTXLoader, _CompressedTextureLoa);\n  var _super = _createSuper(KTXLoader);\n  function KTXLoader(manager) {\n    _classCallCheck(this, KTXLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(KTXLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var ktx = new KhronosTextureContainer(buffer, 1);\n      return {\n        mipmaps: ktx.mipmaps(loadMipmaps),\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        format: ktx.glInternalFormat,\n        isCubemap: ktx.numberOfFaces === 6,\n        mipmapCount: ktx.numberOfMipmapLevels\n      };\n    }\n  }]);\n  return KTXLoader;\n}(CompressedTextureLoader);\nvar HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\n\nvar COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\nvar KhronosTextureContainer = /*#__PURE__*/function () {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  function KhronosTextureContainer(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */) {\n    _classCallCheck(this, KhronosTextureContainer);\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n    this.loadType = COMPRESSED_2D;\n  }\n  _createClass(KhronosTextureContainer, [{\n    key: \"mipmaps\",\n    value: function mipmaps(loadMipmaps) {\n      var mipmaps = []; // initialize width & height for level 1\n\n      var dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n      var width = this.pixelWidth;\n      var height = this.pixelHeight;\n      var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n      for (var level = 0; level < mipmapCount; level++) {\n        var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n        dataOffset += 4; // size of the image + 4 for the imageSize field\n\n        for (var face = 0; face < this.numberOfFaces; face++) {\n          var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n          mipmaps.push({\n            data: byteArray,\n            width: width,\n            height: height\n          });\n          dataOffset += imageSize;\n          dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n        }\n\n        width = Math.max(1.0, width * 0.5);\n        height = Math.max(1.0, height * 0.5);\n      }\n      return mipmaps;\n    }\n  }]);\n  return KhronosTextureContainer;\n}();\nexport { KTXLoader };","map":{"version":3,"names":["CompressedTextureLoader","KTXLoader","manager","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","HEADER_LEN","COMPRESSED_2D","arrayBuffer","facesExpected","identifier","Uint8Array","console","error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","endianness","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","warn","Math","max","loadType","dataOffset","level","imageSize","Int32Array","face","byteArray","push","data"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/loaders/KTXLoader.js"],"sourcesContent":["import { CompressedTextureLoader } from 'three';\n\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nclass KTXLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer, loadMipmaps) {\n    const ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n\n}\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n// load types\n\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\n\nclass KhronosTextureContainer {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  constructor(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */\n  ) {\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    const identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = COMPRESSED_2D;\n  }\n\n  mipmaps(loadMipmaps) {\n    const mipmaps = []; // initialize width & height for level 1\n\n    let dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n    let width = this.pixelWidth;\n    let height = this.pixelHeight;\n    const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (let level = 0; level < mipmapCount; level++) {\n      const imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; // size of the image + 4 for the imageSize field\n\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        const byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          data: byteArray,\n          width: width,\n          height: height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n\n    return mipmaps;\n  }\n\n}\n\nexport { KTXLoader };\n"],"mappings":";;;;AAAA,SAASA,uBAAuB,QAAQ,OAAO;;AAE/C;AACA;AACA;AACA;AACA;AACA;AALA,IAOMC,SAAS;EAAA;EAAA;EACb,mBAAYC,OAAO,EAAE;IAAA;IAAA,yBACbA,OAAO;EACf;EAAC;IAAA;IAAA,OAED,eAAMC,MAAM,EAAEC,WAAW,EAAE;MACzB,IAAMC,GAAG,GAAG,IAAIC,uBAAuB,CAACH,MAAM,EAAE,CAAC,CAAC;MAClD,OAAO;QACLI,OAAO,EAAEF,GAAG,CAACE,OAAO,CAACH,WAAW,CAAC;QACjCI,KAAK,EAAEH,GAAG,CAACI,UAAU;QACrBC,MAAM,EAAEL,GAAG,CAACM,WAAW;QACvBC,MAAM,EAAEP,GAAG,CAACQ,gBAAgB;QAC5BC,SAAS,EAAET,GAAG,CAACU,aAAa,KAAK,CAAC;QAClCC,WAAW,EAAEX,GAAG,CAACY;MACnB,CAAC;IACH;EAAC;EAAA;AAAA,EAfqBjB,uBAAuB;AAmB/C,IAAMkB,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAChC;;AAEA,IAAMC,aAAa,GAAG,CAAC,CAAC,CAAC;AACzB;AACA;AACA;AAAA,IAEMb,uBAAuB;EAC3B;AACF;AACA;AACA;AACA;AACA;EACE,iCAAYc,WAAW,EAAEC;EACzB,6CACE;IAAA;IACA,IAAI,CAACD,WAAW,GAAGA,WAAW,CAAC,CAAC;IAChC;IACA;;IAEA,IAAME,UAAU,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACH,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;IAE1D,IAAIE,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,EAAE,CAAC,KAAK,IAAI,IAAIA,UAAU,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;MAC1TE,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C;IACF,CAAC,CAAC;;IAGF,IAAMC,QAAQ,GAAGC,WAAW,CAACC,iBAAiB;IAC9C,IAAMC,cAAc,GAAG,IAAIC,QAAQ,CAAC,IAAI,CAACV,WAAW,EAAE,EAAE,EAAE,EAAE,GAAGM,QAAQ,CAAC;IACxE,IAAMK,UAAU,GAAGF,cAAc,CAACG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC;IACpD,IAAMC,YAAY,GAAGF,UAAU,KAAK,UAAU;IAC9C,IAAI,CAACG,MAAM,GAAGL,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAEpE,IAAI,CAACE,UAAU,GAAGN,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAExE,IAAI,CAACG,QAAQ,GAAGP,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAEtE,IAAI,CAACpB,gBAAgB,GAAGgB,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAE9E,IAAI,CAACI,oBAAoB,GAAGR,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAElF,IAAI,CAACxB,UAAU,GAAGoB,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAExE,IAAI,CAACtB,WAAW,GAAGkB,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAEzE,IAAI,CAACK,UAAU,GAAGT,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAExE,IAAI,CAACM,qBAAqB,GAAGV,cAAc,CAACG,SAAS,CAAC,CAAC,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAEnF,IAAI,CAAClB,aAAa,GAAGc,cAAc,CAACG,SAAS,CAAC,EAAE,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAE5E,IAAI,CAAChB,oBAAoB,GAAGY,cAAc,CAACG,SAAS,CAAC,EAAE,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;;IAEnF,IAAI,CAACO,mBAAmB,GAAGX,cAAc,CAACG,SAAS,CAAC,EAAE,GAAGN,QAAQ,EAAEO,YAAY,CAAC,CAAC,CAAC;IAClF;;IAEA,IAAI,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MACrBV,OAAO,CAACiB,IAAI,CAAC,6CAA6C,CAAC;MAC3D;IACF,CAAC,MAAM;MACL;MACA,IAAI,CAACxB,oBAAoB,GAAGyB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC1B,oBAAoB,CAAC;IACpE;IAEA,IAAI,IAAI,CAACN,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC2B,UAAU,KAAK,CAAC,EAAE;MACnDd,OAAO,CAACiB,IAAI,CAAC,sCAAsC,CAAC;MACpD;IACF;IAEA,IAAI,IAAI,CAACF,qBAAqB,KAAK,CAAC,EAAE;MACpCf,OAAO,CAACiB,IAAI,CAAC,wCAAwC,CAAC;MACtD;IACF;IAEA,IAAI,IAAI,CAAC1B,aAAa,KAAKM,aAAa,EAAE;MACxCG,OAAO,CAACiB,IAAI,CAAC,0BAA0B,GAAGpB,aAAa,GAAG,cAAc,GAAG,IAAI,CAACN,aAAa,CAAC;MAC9F;IACF,CAAC,CAAC;IACF;;IAGA,IAAI,CAAC6B,QAAQ,GAAGzB,aAAa;EAC/B;EAAC;IAAA;IAAA,OAED,iBAAQf,WAAW,EAAE;MACnB,IAAMG,OAAO,GAAG,EAAE,CAAC,CAAC;;MAEpB,IAAIsC,UAAU,GAAG3B,UAAU,GAAG,IAAI,CAACsB,mBAAmB;MACtD,IAAIhC,KAAK,GAAG,IAAI,CAACC,UAAU;MAC3B,IAAIC,MAAM,GAAG,IAAI,CAACC,WAAW;MAC7B,IAAMK,WAAW,GAAGZ,WAAW,GAAG,IAAI,CAACa,oBAAoB,GAAG,CAAC;MAE/D,KAAK,IAAI6B,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG9B,WAAW,EAAE8B,KAAK,EAAE,EAAE;QAChD,IAAMC,SAAS,GAAG,IAAIC,UAAU,CAAC,IAAI,CAAC5B,WAAW,EAAEyB,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEtEA,UAAU,IAAI,CAAC,CAAC,CAAC;;QAEjB,KAAK,IAAII,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,IAAI,CAAClC,aAAa,EAAEkC,IAAI,EAAE,EAAE;UACpD,IAAMC,SAAS,GAAG,IAAI3B,UAAU,CAAC,IAAI,CAACH,WAAW,EAAEyB,UAAU,EAAEE,SAAS,CAAC;UACzExC,OAAO,CAAC4C,IAAI,CAAC;YACXC,IAAI,EAAEF,SAAS;YACf1C,KAAK,EAAEA,KAAK;YACZE,MAAM,EAAEA;UACV,CAAC,CAAC;UACFmC,UAAU,IAAIE,SAAS;UACvBF,UAAU,IAAI,CAAC,GAAG,CAACE,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QACzC;;QAEAvC,KAAK,GAAGkC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEnC,KAAK,GAAG,GAAG,CAAC;QAClCE,MAAM,GAAGgC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEjC,MAAM,GAAG,GAAG,CAAC;MACtC;MAEA,OAAOH,OAAO;IAChB;EAAC;EAAA;AAAA;AAIH,SAASN,SAAS"},"metadata":{},"sourceType":"module"}