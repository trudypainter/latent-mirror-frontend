{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Box3, Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\nexport var OrientedBox = /*#__PURE__*/function (_Box) {\n  _inherits(OrientedBox, _Box);\n  var _super = _createSuper(OrientedBox);\n  function OrientedBox() {\n    var _this;\n    _classCallCheck(this, OrientedBox);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isOrientedBox = true;\n    _this.matrix = new Matrix4();\n    _this.invMatrix = new Matrix4();\n    _this.points = new Array(8).fill().map(function () {\n      return new Vector3();\n    });\n    _this.satAxes = new Array(3).fill().map(function () {\n      return new Vector3();\n    });\n    _this.satBounds = new Array(3).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    _this.alignedSatBounds = new Array(3).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    _this.needsUpdate = false;\n    return _this;\n  }\n  _createClass(OrientedBox, [{\n    key: \"set\",\n    value: function set(min, max, matrix) {\n      _get(_getPrototypeOf(OrientedBox.prototype), \"set\", this).call(this, min, max);\n      this.matrix.copy(matrix);\n      this.needsUpdate = true;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(other) {\n      _get(_getPrototypeOf(OrientedBox.prototype), \"copy\", this).call(this, other);\n      this.matrix.copy(other.matrix);\n      this.needsUpdate = true;\n    }\n  }]);\n  return OrientedBox;\n}(Box3);\nOrientedBox.prototype.update = function () {\n  return function update() {\n    var matrix = this.matrix;\n    var min = this.min;\n    var max = this.max;\n    var points = this.points;\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          var i = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;\n          var v = points[i];\n          v.x = x ? max.x : min.x;\n          v.y = y ? max.y : min.y;\n          v.z = z ? max.z : min.z;\n          v.applyMatrix4(matrix);\n        }\n      }\n    }\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    var minVec = points[0];\n    for (var _i = 0; _i < 3; _i++) {\n      var axis = satAxes[_i];\n      var sb = satBounds[_i];\n      var index = 1 << _i;\n      var pi = points[index];\n      axis.subVectors(minVec, pi);\n      sb.setFromPoints(axis, points);\n    }\n    var alignedSatBounds = this.alignedSatBounds;\n    alignedSatBounds[0].setFromPointsField(points, 'x');\n    alignedSatBounds[1].setFromPointsField(points, 'y');\n    alignedSatBounds[2].setFromPointsField(points, 'z');\n    this.invMatrix.copy(this.matrix).invert();\n    this.needsUpdate = false;\n  };\n}();\nOrientedBox.prototype.intersectsBox = function () {\n  var aabbBounds = new SeparatingAxisBounds();\n  return function intersectsBox(box) {\n    // TODO: should this be doing SAT against the AABB?\n    if (this.needsUpdate) {\n      this.update();\n    }\n    var min = box.min;\n    var max = box.max;\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    var alignedSatBounds = this.alignedSatBounds;\n    aabbBounds.min = min.x;\n    aabbBounds.max = max.x;\n    if (alignedSatBounds[0].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.y;\n    aabbBounds.max = max.y;\n    if (alignedSatBounds[1].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.z;\n    aabbBounds.max = max.z;\n    if (alignedSatBounds[2].isSeparated(aabbBounds)) return false;\n    for (var i = 0; i < 3; i++) {\n      var axis = satAxes[i];\n      var sb = satBounds[i];\n      aabbBounds.setFromBox(axis, box);\n      if (sb.isSeparated(aabbBounds)) return false;\n    }\n    return true;\n  };\n}();\nOrientedBox.prototype.intersectsTriangle = function () {\n  var saTri = new ExtendedTriangle();\n  var pointsArr = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  return function intersectsTriangle(triangle) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (!triangle.isExtendedTriangle) {\n      saTri.copy(triangle);\n      saTri.update();\n      triangle = saTri;\n    } else if (triangle.needsUpdate) {\n      triangle.update();\n    }\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    pointsArr[0] = triangle.a;\n    pointsArr[1] = triangle.b;\n    pointsArr[2] = triangle.c;\n    for (var i = 0; i < 3; i++) {\n      var sb = satBounds[i];\n      var sa = satAxes[i];\n      cachedSatBounds.setFromPoints(sa, pointsArr);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n    var triSatBounds = triangle.satBounds;\n    var triSatAxes = triangle.satAxes;\n    var points = this.points;\n    for (var _i2 = 0; _i2 < 3; _i2++) {\n      var _sb = triSatBounds[_i2];\n      var _sa = triSatAxes[_i2];\n      cachedSatBounds.setFromPoints(_sa, points);\n      if (_sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    // check crossed axes\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      var sa1 = satAxes[_i3];\n      for (var i2 = 0; i2 < 4; i2++) {\n        var sa2 = triSatAxes[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);\n        cachedSatBounds2.setFromPoints(cachedAxis, points);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n    return true;\n  };\n}();\nOrientedBox.prototype.closestPointToPoint = function () {\n  return function closestPointToPoint(point, target1) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);\n    return target1;\n  };\n}();\nOrientedBox.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\nOrientedBox.prototype.distanceToBox = function () {\n  var xyzFields = ['x', 'y', 'z'];\n  var segments1 = new Array(12).fill().map(function () {\n    return new Line3();\n  });\n  var segments2 = new Array(12).fill().map(function () {\n    return new Line3();\n  });\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n\n  // early out if we find a value below threshold\n  return function distanceToBox(box) {\n    var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var target1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var target2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (this.intersectsBox(box)) {\n      if (target1 || target2) {\n        box.getCenter(point2);\n        this.closestPointToPoint(point2, point1);\n        box.closestPointToPoint(point1, point2);\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n      return 0;\n    }\n    var threshold2 = threshold * threshold;\n    var min = box.min;\n    var max = box.max;\n    var points = this.points;\n\n    // iterate over every edge and compare distances\n    var closestDistanceSq = Infinity;\n\n    // check over all these points\n    for (var i = 0; i < 8; i++) {\n      var p = points[i];\n      point2.copy(p).clamp(min, max);\n      var dist = p.distanceToSquared(point2);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(p);\n        if (target2) target2.copy(point2);\n        if (dist < threshold2) return Math.sqrt(dist);\n      }\n    }\n\n    // generate and check all line segment distances\n    var count = 0;\n    for (var _i4 = 0; _i4 < 3; _i4++) {\n      for (var i1 = 0; i1 <= 1; i1++) {\n        for (var i2 = 0; i2 <= 1; i2++) {\n          var nextIndex = (_i4 + 1) % 3;\n          var nextIndex2 = (_i4 + 2) % 3;\n\n          // get obb line segments\n          var index = i1 << nextIndex | i2 << nextIndex2;\n          var index2 = 1 << _i4 | i1 << nextIndex | i2 << nextIndex2;\n          var p1 = points[index];\n          var p2 = points[index2];\n          var line1 = segments1[count];\n          line1.set(p1, p2);\n\n          // get aabb line segments\n          var f1 = xyzFields[_i4];\n          var f2 = xyzFields[nextIndex];\n          var f3 = xyzFields[nextIndex2];\n          var line2 = segments2[count];\n          var start = line2.start;\n          var end = line2.end;\n          start[f1] = min[f1];\n          start[f2] = i1 ? min[f2] : max[f2];\n          start[f3] = i2 ? min[f3] : max[f2];\n          end[f1] = max[f1];\n          end[f2] = i1 ? min[f2] : max[f2];\n          end[f3] = i2 ? min[f3] : max[f2];\n          count++;\n        }\n      }\n    }\n\n    // check all the other boxes point\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          point2.x = x ? max.x : min.x;\n          point2.y = y ? max.y : min.y;\n          point2.z = z ? max.z : min.z;\n          this.closestPointToPoint(point2, point1);\n          var _dist = point2.distanceToSquared(point1);\n          if (_dist < closestDistanceSq) {\n            closestDistanceSq = _dist;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(point2);\n            if (_dist < threshold2) return Math.sqrt(_dist);\n          }\n        }\n      }\n    }\n    for (var _i5 = 0; _i5 < 12; _i5++) {\n      var l1 = segments1[_i5];\n      for (var _i6 = 0; _i6 < 12; _i6++) {\n        var l2 = segments2[_i6];\n        closestPointsSegmentToSegment(l1, l2, point1, point2);\n        var _dist2 = point1.distanceToSquared(point2);\n        if (_dist2 < closestDistanceSq) {\n          closestDistanceSq = _dist2;\n          if (target1) target1.copy(point1);\n          if (target2) target2.copy(point2);\n          if (_dist2 < threshold2) return Math.sqrt(_dist2);\n        }\n      }\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Box3","Vector3","Matrix4","Line3","SeparatingAxisBounds","ExtendedTriangle","closestPointsSegmentToSegment","OrientedBox","args","isOrientedBox","matrix","invMatrix","points","Array","fill","map","satAxes","satBounds","alignedSatBounds","needsUpdate","min","max","copy","other","prototype","update","x","y","z","i","v","applyMatrix4","minVec","axis","sb","index","pi","subVectors","setFromPoints","setFromPointsField","invert","intersectsBox","aabbBounds","box","isSeparated","setFromBox","intersectsTriangle","saTri","pointsArr","cachedSatBounds","cachedSatBounds2","cachedAxis","triangle","isExtendedTriangle","a","b","c","sa","triSatBounds","triSatAxes","sa1","i2","sa2","crossVectors","closestPointToPoint","point","target1","clamp","distanceToPoint","target","distanceTo","distanceToBox","xyzFields","segments1","segments2","point1","point2","threshold","target2","getCenter","threshold2","closestDistanceSq","Infinity","p","dist","distanceToSquared","Math","sqrt","count","i1","nextIndex","nextIndex2","index2","p1","p2","line1","set","f1","f2","f3","line2","start","end","l1","l2"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-mesh-bvh/src/math/OrientedBox.js"],"sourcesContent":["import { Box3, Vector3, Matrix4, Line3 } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\r\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\r\n\r\nexport class OrientedBox extends Box3 {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isOrientedBox = true;\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.invMatrix = new Matrix4();\r\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\r\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tset( min, max, matrix ) {\r\n\r\n\t\tsuper.set( min, max );\r\n\t\tthis.matrix.copy( matrix );\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tsuper.copy( other );\r\n\t\tthis.matrix.copy( other.matrix );\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nOrientedBox.prototype.update = ( function () {\r\n\r\n\treturn function update() {\r\n\r\n\t\tconst matrix = this.matrix;\r\n\t\tconst min = this.min;\r\n\t\tconst max = this.max;\r\n\r\n\t\tconst points = this.points;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\r\n\t\t\t\t\tconst v = points[ i ];\r\n\t\t\t\t\tv.x = x ? max.x : min.x;\r\n\t\t\t\t\tv.y = y ? max.y : min.y;\r\n\t\t\t\t\tv.z = z ? max.z : min.z;\r\n\r\n\t\t\t\t\tv.applyMatrix4( matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst minVec = points[ 0 ];\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst axis = satAxes[ i ];\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\tconst index = 1 << i;\r\n\t\t\tconst pi = points[ index ];\r\n\r\n\t\t\taxis.subVectors( minVec, pi );\r\n\t\t\tsb.setFromPoints( axis, points );\r\n\r\n\t\t}\r\n\r\n\t\tconst alignedSatBounds = this.alignedSatBounds;\r\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\r\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\r\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\r\n\r\n\t\tthis.invMatrix.copy( this.matrix ).invert();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.intersectsBox = ( function () {\r\n\r\n\tconst aabbBounds = new SeparatingAxisBounds();\r\n\treturn function intersectsBox( box ) {\r\n\r\n\t\t// TODO: should this be doing SAT against the AABB?\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst min = box.min;\r\n\t\tconst max = box.max;\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst alignedSatBounds = this.alignedSatBounds;\r\n\r\n\t\taabbBounds.min = min.x;\r\n\t\taabbBounds.max = max.x;\r\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\taabbBounds.min = min.y;\r\n\t\taabbBounds.max = max.y;\r\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\taabbBounds.min = min.z;\r\n\t\taabbBounds.max = max.z;\r\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst axis = satAxes[ i ];\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\taabbBounds.setFromBox( axis, box );\r\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri = new ExtendedTriangle();\r\n\tconst pointsArr = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( triangle ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! triangle.isExtendedTriangle ) {\r\n\r\n\t\t\tsaTri.copy( triangle );\r\n\t\t\tsaTri.update();\r\n\t\t\ttriangle = saTri;\r\n\r\n\t\t} else if ( triangle.needsUpdate ) {\r\n\r\n\t\t\ttriangle.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds = this.satBounds;\r\n\t\tconst satAxes = this.satAxes;\r\n\r\n\t\tpointsArr[ 0 ] = triangle.a;\r\n\t\tpointsArr[ 1 ] = triangle.b;\r\n\t\tpointsArr[ 2 ] = triangle.c;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds[ i ];\r\n\t\t\tconst sa = satAxes[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst triSatBounds = triangle.satBounds;\r\n\t\tconst triSatAxes = triangle.satAxes;\r\n\t\tconst points = this.points;\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = triSatBounds[ i ];\r\n\t\t\tconst sa = triSatAxes[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.closestPointToPoint = ( function () {\r\n\r\n\treturn function closestPointToPoint( point, target1 ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\ttarget1\r\n\t\t\t.copy( point )\r\n\t\t\t.applyMatrix4( this.invMatrix )\r\n\t\t\t.clamp( this.min, this.max )\r\n\t\t\t.applyMatrix4( this.matrix );\r\n\r\n\t\treturn target1;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nOrientedBox.prototype.distanceToBox = ( function () {\r\n\r\n\tconst xyzFields = [ 'x', 'y', 'z' ];\r\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\r\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\r\n\t// early out if we find a value below threshold\r\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.intersectsBox( box ) ) {\r\n\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tbox.getCenter( point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\r\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tconst threshold2 = threshold * threshold;\r\n\t\tconst min = box.min;\r\n\t\tconst max = box.max;\r\n\t\tconst points = this.points;\r\n\r\n\r\n\t\t// iterate over every edge and compare distances\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check over all these points\r\n\t\tfor ( let i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tpoint2.copy( p ).clamp( min, max );\r\n\r\n\t\t\tconst dist = p.distanceToSquared( point2 );\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( p );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate and check all line segment distances\r\n\t\tlet count = 0;\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\r\n\r\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\r\n\r\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\r\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\r\n\r\n\t\t\t\t\t// get obb line segments\r\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\r\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\r\n\t\t\t\t\tconst p1 = points[ index ];\r\n\t\t\t\t\tconst p2 = points[ index2 ];\r\n\t\t\t\t\tconst line1 = segments1[ count ];\r\n\t\t\t\t\tline1.set( p1, p2 );\r\n\r\n\r\n\t\t\t\t\t// get aabb line segments\r\n\t\t\t\t\tconst f1 = xyzFields[ i ];\r\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\r\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\r\n\t\t\t\t\tconst line2 = segments2[ count ];\r\n\t\t\t\t\tconst start = line2.start;\r\n\t\t\t\t\tconst end = line2.end;\r\n\r\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\r\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\r\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\r\n\r\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\r\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\r\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\r\n\r\n\t\t\t\t\tcount ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check all the other boxes point\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\r\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\r\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\r\n\r\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\r\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\r\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 12; i ++ ) {\r\n\r\n\t\t\tconst l1 = segments1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\r\n\r\n\t\t\t\tconst l2 = segments2[ i2 ];\r\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\r\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}