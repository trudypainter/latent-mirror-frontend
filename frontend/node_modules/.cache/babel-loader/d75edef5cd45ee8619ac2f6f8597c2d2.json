{"ast":null,"code":"import _regeneratorRuntime from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { strToU8, zipSync } from 'fflate';\nimport { Mesh, MeshPhysicalMaterial } from 'three';\nvar USDZExporter = /*#__PURE__*/function () {\n  function USDZExporter() {\n    _classCallCheck(this, USDZExporter);\n    _defineProperty(this, \"PRECISION\", 7);\n    _defineProperty(this, \"materials\", void 0);\n    _defineProperty(this, \"textures\", void 0);\n    _defineProperty(this, \"files\", void 0);\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n  _createClass(USDZExporter, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(scene) {\n        var _this = this;\n        var modelFileName, output, _loop, id, offset, filename, file, headerSize, offsetMod64, padLength, padding;\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                modelFileName = 'model.usda'; // model file should be first in USDZ archive so we init it here\n                this.files[modelFileName] = null;\n                output = this.buildHeader();\n                scene.traverseVisible(function (object) {\n                  if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n                    var geometry = object.geometry;\n                    var material = object.material;\n                    var geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n                    if (!(geometryFileName in _this.files)) {\n                      var meshObject = _this.buildMeshObject(geometry);\n                      _this.files[geometryFileName] = _this.buildUSDFileAsString(meshObject);\n                    }\n                    if (!(material.uuid in _this.materials)) {\n                      _this.materials[material.uuid] = material;\n                    }\n                    output += _this.buildXform(object, geometry, material);\n                  }\n                });\n                output += this.buildMaterials(this.materials);\n                this.files[modelFileName] = strToU8(output);\n                output = null;\n                _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(id) {\n                  var texture, color, isRGBA, canvas, blob;\n                  return _regeneratorRuntime().wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          texture = _this.textures[id];\n                          color = id.split('_')[1];\n                          isRGBA = texture.format === 1023;\n                          canvas = _this.imageToCanvas(texture.image, color);\n                          _context.next = 6;\n                          return new Promise(function (resolve) {\n                            return canvas === null || canvas === void 0 ? void 0 : canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1);\n                          });\n                        case 6:\n                          blob = _context.sent;\n                          if (!blob) {\n                            _context.next = 13;\n                            break;\n                          }\n                          _context.t0 = Uint8Array;\n                          _context.next = 11;\n                          return blob.arrayBuffer();\n                        case 11:\n                          _context.t1 = _context.sent;\n                          _this.files[\"textures/Texture_\".concat(id, \".\").concat(isRGBA ? 'png' : 'jpg')] = new _context.t0(_context.t1);\n                        case 13:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _context2.t0 = _regeneratorRuntime().keys(this.textures);\n              case 9:\n                if ((_context2.t1 = _context2.t0()).done) {\n                  _context2.next = 14;\n                  break;\n                }\n                id = _context2.t1.value;\n                return _context2.delegateYield(_loop(id), \"t2\", 12);\n              case 12:\n                _context2.next = 9;\n                break;\n              case 14:\n                // 64 byte alignment\n                // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n                offset = 0;\n                for (filename in this.files) {\n                  file = this.files[filename];\n                  headerSize = 34 + filename.length;\n                  offset += headerSize;\n                  offsetMod64 = offset & 63;\n                  if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n                    padLength = 64 - offsetMod64;\n                    padding = new Uint8Array(padLength);\n                    this.files[filename] = [file, {\n                      extra: {\n                        12345: padding\n                      }\n                    }];\n                  }\n                  if (file && typeof file.length === 'number') {\n                    offset = file.length;\n                  }\n                }\n                return _context2.abrupt(\"return\", zipSync(this.files, {\n                  level: 0\n                }));\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function parse(_x) {\n        return _parse.apply(this, arguments);\n      }\n      return parse;\n    }()\n  }, {\n    key: \"imageToCanvas\",\n    value: function imageToCanvas(image, color) {\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        var scale = 1024 / Math.max(image.width, image.height);\n        var canvas = document.createElement('canvas');\n        canvas.width = image.width * Math.min(1, scale);\n        canvas.height = image.height * Math.min(1, scale);\n        var context = canvas.getContext('2d');\n        context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        if (color !== undefined) {\n          var hex = parseInt(color, 16);\n          var r = (hex >> 16 & 255) / 255;\n          var g = (hex >> 8 & 255) / 255;\n          var b = (hex & 255) / 255;\n          var imagedata = context === null || context === void 0 ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n          if (imagedata) {\n            var data = imagedata === null || imagedata === void 0 ? void 0 : imagedata.data;\n            for (var i = 0; i < data.length; i += 4) {\n              data[i + 0] = data[i + 0] * r;\n              data[i + 1] = data[i + 1] * g;\n              data[i + 2] = data[i + 2] * b;\n            }\n            context === null || context === void 0 ? void 0 : context.putImageData(imagedata, 0, 0);\n          }\n        }\n        return canvas;\n      }\n    }\n  }, {\n    key: \"buildHeader\",\n    value: function buildHeader() {\n      return \"#usda 1.0\\n(\\n    customLayerData = {\\n        string creator = \\\"Three.js USDZExporter\\\"\\n    }\\n    metersPerUnit = 1\\n    upAxis = \\\"Y\\\"\\n)\\n\";\n    }\n  }, {\n    key: \"buildUSDFileAsString\",\n    value: function buildUSDFileAsString(dataToInsert) {\n      var output = this.buildHeader();\n      output += dataToInsert;\n      return strToU8(output);\n    } // Xform\n  }, {\n    key: \"buildXform\",\n    value: function buildXform(object, geometry, material) {\n      var name = 'Object_' + object.id;\n      var transform = this.buildMatrix(object.matrixWorld);\n      if (object.matrixWorld.determinant() < 0) {\n        console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n      }\n      return \"def Xform \\\"\".concat(name, \"\\\" (\\n    prepend references = @./geometries/Geometry_\").concat(geometry.id, \".usd@</Geometry>\\n)\\n{\\n    matrix4d xformOp:transform = \").concat(transform, \"\\n    uniform token[] xformOpOrder = [\\\"xformOp:transform\\\"]\\n    rel material:binding = </Materials/Material_\").concat(material.id, \">\\n}\\n\");\n    }\n  }, {\n    key: \"buildMatrix\",\n    value: function buildMatrix(matrix) {\n      var array = matrix.elements;\n      return \"( \".concat(this.buildMatrixRow(array, 0), \", \").concat(this.buildMatrixRow(array, 4), \", \").concat(this.buildMatrixRow(array, 8), \", \").concat(this.buildMatrixRow(array, 12), \" )\");\n    }\n  }, {\n    key: \"buildMatrixRow\",\n    value: function buildMatrixRow(array, offset) {\n      return \"(\".concat(array[offset + 0], \", \").concat(array[offset + 1], \", \").concat(array[offset + 2], \", \").concat(array[offset + 3], \")\");\n    } // Mesh\n  }, {\n    key: \"buildMeshObject\",\n    value: function buildMeshObject(geometry) {\n      var mesh = this.buildMesh(geometry);\n      return \"\\ndef \\\"Geometry\\\"\\n{\\n  \".concat(mesh, \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMesh\",\n    value: function buildMesh(geometry) {\n      var name = 'Geometry';\n      var attributes = geometry.attributes;\n      var count = attributes.position.count;\n      return \"\\n    def Mesh \\\"\".concat(name, \"\\\"\\n    {\\n        int[] faceVertexCounts = [\").concat(this.buildMeshVertexCount(geometry), \"]\\n        int[] faceVertexIndices = [\").concat(this.buildMeshVertexIndices(geometry), \"]\\n        normal3f[] normals = [\").concat(this.buildVector3Array(attributes.normal, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        point3f[] points = [\").concat(this.buildVector3Array(attributes.position, count), \"]\\n        float2[] primvars:st = [\").concat(this.buildVector2Array(attributes.uv, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        uniform token subdivisionScheme = \\\"none\\\"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildMeshVertexCount\",\n    value: function buildMeshVertexCount(geometry) {\n      var count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n      return Array(count / 3).fill(3).join(', ');\n    }\n  }, {\n    key: \"buildMeshVertexIndices\",\n    value: function buildMeshVertexIndices(geometry) {\n      if (geometry.index !== null) {\n        // @ts-expect-error\n        return geometry.index.array.join(', ');\n      }\n      var array = [];\n      var length = geometry.attributes.position.count;\n      for (var i = 0; i < length; i++) {\n        array.push(i);\n      }\n      return array.join(', ');\n    }\n  }, {\n    key: \"buildVector3Array\",\n    value: function buildVector3Array(attribute, count) {\n      if (attribute === undefined) {\n        console.warn('USDZExporter: Normals missing.');\n        return Array(count).fill('(0, 0, 0)').join(', ');\n      }\n      var array = [];\n      var data = attribute.array;\n      for (var i = 0; i < data.length; i += 3) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(data[i + 1].toPrecision(this.PRECISION), \", \").concat(data[i + 2].toPrecision(this.PRECISION), \")\"));\n      }\n      return array.join(', ');\n    }\n  }, {\n    key: \"buildVector2Array\",\n    value: function buildVector2Array(attribute, count) {\n      if (attribute === undefined) {\n        console.warn('USDZExporter: UVs missing.');\n        return Array(count).fill('(0, 0)').join(', ');\n      }\n      var array = [];\n      var data = attribute.array;\n      for (var i = 0; i < data.length; i += 2) {\n        // @ts-expect-error\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(1 - data[i + 1].toPrecision(this.PRECISION), \")\"));\n      }\n      return array.join(', ');\n    } // Materials\n  }, {\n    key: \"buildMaterials\",\n    value: function buildMaterials(materials) {\n      var array = [];\n      for (var uuid in materials) {\n        var material = materials[uuid];\n        array.push(this.buildMaterial(material));\n      }\n      return \"def \\\"Materials\\\"\\n{\\n\".concat(array.join(''), \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMaterial\",\n    value: function buildMaterial(material) {\n      // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n      var pad = '            ';\n      var inputs = [];\n      var samplers = [];\n      if (material.map !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.map.id, \"_diffuse.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color));\n      } else {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor = \").concat(this.buildColor(material.color)));\n      }\n      if (material.emissiveMap !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.emissiveMap.id, \"_emissive.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'));\n      } else if (material.emissive.getHex() > 0) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor = \").concat(this.buildColor(material.emissive)));\n      }\n      if (material.normalMap !== null) {\n        inputs.push(\"\".concat(pad, \"normal3f inputs:normal.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.normalMap.id, \"_normal.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.normalMap, 'normal'));\n      }\n      if (material.aoMap !== null) {\n        inputs.push(\"\".concat(pad, \"float inputs:occlusion.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.aoMap.id, \"_occlusion.outputs:r>\"));\n        samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'));\n      }\n      if (material.roughnessMap !== null && material.roughness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.roughnessMap.id, \"_roughness.outputs:g>\"));\n        samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness = \").concat(material.roughness));\n      }\n      if (material.metalnessMap !== null && material.metalness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.metalnessMap.id, \"_metallic.outputs:b>\"));\n        samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic = \").concat(material.metalness));\n      }\n      inputs.push(\"\".concat(pad, \"float inputs:opacity = \").concat(material.opacity));\n      if (material instanceof MeshPhysicalMaterial) {\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoat = \").concat(material.clearcoat));\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoatRoughness = \").concat(material.clearcoatRoughness));\n        inputs.push(\"\".concat(pad, \"float inputs:ior = \").concat(material.ior));\n      }\n      return \"\\n    def Material \\\"Material_\".concat(material.id, \"\\\"\\n    {\\n        def Shader \\\"PreviewSurface\\\"\\n        {\\n            uniform token info:id = \\\"UsdPreviewSurface\\\"\\n\").concat(inputs.join('\\n'), \"\\n            int inputs:useSpecularWorkflow = 0\\n            token outputs:surface\\n        }\\n        token outputs:surface.connect = </Materials/Material_\").concat(material.id, \"/PreviewSurface.outputs:surface>\\n        token inputs:frame:stPrimvarName = \\\"st\\\"\\n        def Shader \\\"uvReader_st\\\"\\n        {\\n            uniform token info:id = \\\"UsdPrimvarReader_float2\\\"\\n            token inputs:varname.connect = </Materials/Material_\").concat(material.id, \".inputs:frame:stPrimvarName>\\n            float2 inputs:fallback = (0.0, 0.0)\\n            float2 outputs:result\\n        }\\n\").concat(samplers.join('\\n'), \"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildTexture\",\n    value: function buildTexture(material, texture, mapType, color) {\n      var id = texture.id + (color ? '_' + color.getHexString() : '');\n      var isRGBA = texture.format === 1023;\n      this.textures[id] = texture;\n      return \"\\n      def Shader \\\"Transform2d_\".concat(mapType, \"\\\" (\\n          sdrMetadata = {\\n              string role = \\\"math\\\"\\n          }\\n      )\\n      {\\n          uniform token info:id = \\\"UsdTransform2d\\\"\\n          float2 inputs:in.connect = </Materials/Material_\").concat(material.id, \"/uvReader_st.outputs:result>\\n          float2 inputs:scale = \").concat(this.buildVector2(texture.repeat), \"\\n          float2 inputs:translation = \").concat(this.buildVector2(texture.offset), \"\\n          float2 outputs:result\\n      }\\n      def Shader \\\"Texture_\").concat(texture.id, \"_\").concat(mapType, \"\\\"\\n      {\\n          uniform token info:id = \\\"UsdUVTexture\\\"\\n          asset inputs:file = @textures/Texture_\").concat(id, \".\").concat(isRGBA ? 'png' : 'jpg', \"@\\n          float2 inputs:st.connect = </Materials/Material_\").concat(material.id, \"/Transform2d_\").concat(mapType, \".outputs:result>\\n          token inputs:wrapS = \\\"repeat\\\"\\n          token inputs:wrapT = \\\"repeat\\\"\\n          float outputs:r\\n          float outputs:g\\n          float outputs:b\\n          float3 outputs:rgb\\n      }\");\n    }\n  }, {\n    key: \"buildColor\",\n    value: function buildColor(color) {\n      return \"(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \")\");\n    }\n  }, {\n    key: \"buildVector2\",\n    value: function buildVector2(vector) {\n      return \"(\".concat(vector.x, \", \").concat(vector.y, \")\");\n    }\n  }]);\n  return USDZExporter;\n}();\nexport { USDZExporter };","map":{"version":3,"names":["_defineProperty","strToU8","zipSync","Mesh","MeshPhysicalMaterial","USDZExporter","materials","textures","files","scene","modelFileName","output","buildHeader","traverseVisible","object","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","id","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","texture","color","split","isRGBA","format","canvas","imageToCanvas","image","Promise","resolve","toBlob","blob","Uint8Array","arrayBuffer","offset","filename","file","headerSize","length","offsetMod64","padLength","padding","extra","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","undefined","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","console","warn","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","attribute","toPrecision","PRECISION","buildMaterial","pad","inputs","samplers","map","buildTexture","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","clearcoat","clearcoatRoughness","ior","mapType","getHexString","buildVector2","repeat","vector","x","y"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/exporters/USDZExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { strToU8, zipSync } from 'fflate';\nimport { Mesh, MeshPhysicalMaterial } from 'three';\n\nclass USDZExporter {\n  constructor() {\n    _defineProperty(this, \"PRECISION\", 7);\n\n    _defineProperty(this, \"materials\", void 0);\n\n    _defineProperty(this, \"textures\", void 0);\n\n    _defineProperty(this, \"files\", void 0);\n\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n\n  async parse(scene) {\n    const modelFileName = 'model.usda'; // model file should be first in USDZ archive so we init it here\n\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible(object => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split('_')[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(resolve => canvas === null || canvas === void 0 ? void 0 : canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1));\n\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    } // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\n    let offset = 0;\n\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n\n      if (file && typeof file.length === 'number') {\n        offset = file.length;\n      }\n    }\n\n    return zipSync(this.files, {\n      level: 0\n    });\n  }\n\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement('canvas');\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext('2d');\n      context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n      if (color !== undefined) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context === null || context === void 0 ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n\n        if (imagedata) {\n          const data = imagedata === null || imagedata === void 0 ? void 0 : imagedata.data;\n\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n\n          context === null || context === void 0 ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n\n      return canvas;\n    }\n  }\n\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  } // Xform\n\n\n  buildXform(object, geometry, material) {\n    const name = 'Object_' + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n    }\n\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(array, 8)}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  } // Mesh\n\n\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n\n  buildMesh(geometry) {\n    const name = 'Geometry';\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(', ');\n  }\n\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      // @ts-expect-error\n      return geometry.index.array.join(', ');\n    }\n\n    const array = [];\n    const length = geometry.attributes.position.count;\n\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n\n    return array.join(', ');\n  }\n\n  buildVector3Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: Normals missing.');\n      return Array(count).fill('(0, 0, 0)').join(', ');\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(', ');\n  }\n\n  buildVector2Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: UVs missing.');\n      return Array(count).fill('(0, 0)').join(', ');\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 2) {\n      // @ts-expect-error\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(', ');\n  } // Materials\n\n\n  buildMaterials(materials) {\n    const array = [];\n\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n\n    return `def \"Materials\"\n{\n${array.join('')}\n}\n`;\n  }\n\n  buildMaterial(material) {\n    // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n    const pad = '            ';\n    const inputs = [];\n    const samplers = [];\n\n    if (material.map !== null) {\n      inputs.push(`${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n\n    if (material.emissiveMap !== null) {\n      inputs.push(`${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n\n    if (material.normalMap !== null) {\n      inputs.push(`${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.normalMap, 'normal'));\n    }\n\n    if (material.aoMap !== null) {\n      inputs.push(`${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`);\n      samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'));\n    }\n\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(`${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`);\n      samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(`${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`);\n      samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join('\\n')}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join('\\n')}\n    }\n`;\n  }\n\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? '_' + color.getHexString() : '');\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n\n}\n\nexport { USDZExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}