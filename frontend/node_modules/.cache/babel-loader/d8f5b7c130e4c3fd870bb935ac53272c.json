{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\nvar BloomPass = /*#__PURE__*/function (_Pass) {\n  _inherits(BloomPass, _Pass);\n  var _super = _createSuper(BloomPass);\n  function BloomPass() {\n    var _this;\n    var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    var sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    var resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n    _classCallCheck(this, BloomPass);\n    _this = _super.call(this); // render targets\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTargetX\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"renderTargetY\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"materialCombine\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"materialConvolution\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"fsQuad\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"combineUniforms\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"convolutionUniforms\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"blurX\", new Vector2(0.001953125, 0.0));\n    _defineProperty(_assertThisInitialized(_this), \"blurY\", new Vector2(0.0, 0.001953125));\n    _this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetX.texture.name = 'BloomPass.x';\n    _this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    _this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    _this.combineUniforms['strength'].value = strength;\n    _this.materialCombine = new ShaderMaterial({\n      uniforms: _this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    var convolutionShader = ConvolutionShader;\n    _this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    _this.convolutionUniforms['uImageIncrement'].value = _this.blurX;\n    _this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    _this.materialConvolution = new ShaderMaterial({\n      uniforms: _this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(_this.materialConvolution);\n    return _this;\n  }\n  _createClass(BloomPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n      this.fsQuad.material = this.materialConvolution;\n      this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n      this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n      renderer.setRenderTarget(this.renderTargetX);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n      this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n      this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n      renderer.setRenderTarget(this.renderTargetY);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n      this.fsQuad.material = this.materialCombine;\n      this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }]);\n  return BloomPass;\n}(Pass);\nvar CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */\"\\n  varying vec2 vUv;\\n  void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n  }\",\n  fragmentShader: /* glsl */\"\\n  uniform float strength;\\n  uniform sampler2D tDiffuse;\\n  varying vec2 vUv;\\n  void main() {\\n    vec4 texel = texture2D( tDiffuse, vUv );\\n    gl_FragColor = strength * texel;\\n  }\"\n};\nexport { BloomPass };","map":{"version":3,"names":["_defineProperty","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","strength","kernelSize","sigma","resolution","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","value","materialCombine","vertexShader","fragmentShader","blending","transparent","undefined","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","render","blurY","tDiffuse"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/postprocessing/BloomPass.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super(); // render targets\n\n    _defineProperty(this, \"renderTargetX\", void 0);\n\n    _defineProperty(this, \"renderTargetY\", void 0);\n\n    _defineProperty(this, \"materialCombine\", void 0);\n\n    _defineProperty(this, \"materialConvolution\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"combineUniforms\", void 0);\n\n    _defineProperty(this, \"convolutionUniforms\", void 0);\n\n    _defineProperty(this, \"blurX\", new Vector2(0.001953125, 0.0));\n\n    _defineProperty(this, \"blurY\", new Vector2(0.0, 0.001953125));\n\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms['strength'].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader:\n  /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\n\nexport { BloomPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}