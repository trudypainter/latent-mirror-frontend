{"ast":null,"code":"import { Color } from 'three';\nimport { Pass } from './Pass.js';\nclass RenderPass extends Pass {\n  constructor(scene, camera, overrideMaterial, clearColor, clearAlpha) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.overrideMaterial = overrideMaterial;\n    this.clearColor = clearColor;\n    this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n    this.clear = true;\n    this.clearDepth = false;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n  }\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    let oldClearAlpha, oldOverrideMaterial;\n    if (this.overrideMaterial !== undefined) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor);\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n\n    // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n    if (this.overrideMaterial !== undefined) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n    renderer.autoClear = oldAutoClear;\n  }\n}\nexport { RenderPass };","map":{"version":3,"names":["Color","Pass","RenderPass","constructor","scene","camera","overrideMaterial","clearColor","clearAlpha","undefined","clear","clearDepth","needsSwap","_oldClearColor","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","getClearAlpha","setClearColor","setRenderTarget","renderToScreen","autoClearColor","autoClearDepth","autoClearStencil"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"mappings":"AAAA,SACCA,KAAK,QACC,OAAO;AACd,SAASC,IAAI,QAAQ,WAAW;AAEhC,MAAMC,UAAU,SAASD,IAAI,CAAC;EAE7BE,WAAW,CAAEC,KAAK,EAAEC,MAAM,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,UAAU,EAAG;IAEtE,KAAK,EAAE;IAEP,IAAI,CAACJ,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IAExC,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAKA,UAAU,KAAKC,SAAS,GAAKD,UAAU,GAAG,CAAC;IAE/D,IAAI,CAACE,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,cAAc,GAAG,IAAIb,KAAK,EAAE;EAElC;EAEAc,MAAM,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,CAAC,8BAA+B;IAExE,MAAMC,YAAY,GAAGH,QAAQ,CAACI,SAAS;IACvCJ,QAAQ,CAACI,SAAS,GAAG,KAAK;IAE1B,IAAIC,aAAa,EAAEC,mBAAmB;IAEtC,IAAK,IAAI,CAACf,gBAAgB,KAAKG,SAAS,EAAG;MAE1CY,mBAAmB,GAAG,IAAI,CAACjB,KAAK,CAACE,gBAAgB;MAEjD,IAAI,CAACF,KAAK,CAACE,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IAEpD;IAEA,IAAK,IAAI,CAACC,UAAU,EAAG;MAEtBQ,QAAQ,CAACO,aAAa,CAAE,IAAI,CAACT,cAAc,CAAE;MAC7CO,aAAa,GAAGL,QAAQ,CAACQ,aAAa,EAAE;MAExCR,QAAQ,CAACS,aAAa,CAAE,IAAI,CAACjB,UAAU,EAAE,IAAI,CAACC,UAAU,CAAE;IAE3D;IAEA,IAAK,IAAI,CAACG,UAAU,EAAG;MAEtBI,QAAQ,CAACJ,UAAU,EAAE;IAEtB;IAEAI,QAAQ,CAACU,eAAe,CAAE,IAAI,CAACC,cAAc,GAAG,IAAI,GAAGT,UAAU,CAAE;;IAEnE;IACA,IAAK,IAAI,CAACP,KAAK,EAAGK,QAAQ,CAACL,KAAK,CAAEK,QAAQ,CAACY,cAAc,EAAEZ,QAAQ,CAACa,cAAc,EAAEb,QAAQ,CAACc,gBAAgB,CAAE;IAC/Gd,QAAQ,CAACD,MAAM,CAAE,IAAI,CAACV,KAAK,EAAE,IAAI,CAACC,MAAM,CAAE;IAE1C,IAAK,IAAI,CAACE,UAAU,EAAG;MAEtBQ,QAAQ,CAACS,aAAa,CAAE,IAAI,CAACX,cAAc,EAAEO,aAAa,CAAE;IAE7D;IAEA,IAAK,IAAI,CAACd,gBAAgB,KAAKG,SAAS,EAAG;MAE1C,IAAI,CAACL,KAAK,CAACE,gBAAgB,GAAGe,mBAAmB;IAElD;IAEAN,QAAQ,CAACI,SAAS,GAAGD,YAAY;EAElC;AAED;AAEA,SAAShB,UAAU"},"metadata":{},"sourceType":"module"}