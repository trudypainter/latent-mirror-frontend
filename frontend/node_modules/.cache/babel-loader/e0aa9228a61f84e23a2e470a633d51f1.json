{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\nvar AMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(AMFLoader, _Loader);\n  var _super = _createSuper(AMFLoader);\n  function AMFLoader(manager) {\n    _classCallCheck(this, AMFLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(AMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function loadDocument(data) {\n        var view = new DataView(data);\n        var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n        if (magic === 'PK') {\n          var zip = null;\n          var file = null;\n          console.log('THREE.AMFLoader: Loading Zip');\n          try {\n            zip = unzipSync(new Uint8Array(data));\n          } catch (e) {\n            if (e instanceof ReferenceError) {\n              console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n              return null;\n            }\n          }\n          for (file in zip) {\n            if (file.toLowerCase().substr(-4) === '.amf') {\n              break;\n            }\n          }\n          console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n          view = new DataView(zip[file].buffer);\n        }\n        var fileText = LoaderUtils.decodeText(view);\n        var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n          console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n          return null;\n        }\n        return xmlData;\n      }\n      function loadDocumentScale(node) {\n        var scale = 1.0;\n        var unit = 'millimeter';\n        if (node.documentElement.attributes.unit !== undefined) {\n          unit = node.documentElement.attributes.unit.value.toLowerCase();\n        }\n        var scaleUnits = {\n          millimeter: 1.0,\n          inch: 25.4,\n          feet: 304.8,\n          meter: 1000.0,\n          micron: 0.001\n        };\n        if (scaleUnits[unit] !== undefined) {\n          scale = scaleUnits[unit];\n        }\n        console.log('THREE.AMFLoader: Unit scale: ' + scale);\n        return scale;\n      }\n      function loadMaterials(node) {\n        var matName = 'AMF Material';\n        var matId = node.attributes.id.textContent;\n        var color = {\n          r: 1.0,\n          g: 1.0,\n          b: 1.0,\n          a: 1.0\n        };\n        var loadedMaterial = null;\n        for (var _i = 0; _i < node.childNodes.length; _i++) {\n          var matChildEl = node.childNodes[_i];\n          if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n            if (matChildEl.attributes.type.value === 'name') {\n              matName = matChildEl.textContent;\n            }\n          } else if (matChildEl.nodeName === 'color') {\n            color = loadColor(matChildEl);\n          }\n        }\n        loadedMaterial = new MeshPhongMaterial({\n          flatShading: true,\n          color: new Color(color.r, color.g, color.b),\n          name: matName\n        });\n        if (color.a !== 1.0) {\n          loadedMaterial.transparent = true;\n          loadedMaterial.opacity = color.a;\n        }\n        return {\n          id: matId,\n          material: loadedMaterial\n        };\n      }\n      function loadColor(node) {\n        var color = {\n          r: 1.0,\n          g: 1.0,\n          b: 1.0,\n          a: 1.0\n        };\n        for (var _i2 = 0; _i2 < node.childNodes.length; _i2++) {\n          var matColor = node.childNodes[_i2];\n          if (matColor.nodeName === 'r') {\n            color.r = matColor.textContent;\n          } else if (matColor.nodeName === 'g') {\n            color.g = matColor.textContent;\n          } else if (matColor.nodeName === 'b') {\n            color.b = matColor.textContent;\n          } else if (matColor.nodeName === 'a') {\n            color.a = matColor.textContent;\n          }\n        }\n        return color;\n      }\n      function loadMeshVolume(node) {\n        var volume = {\n          name: '',\n          triangles: [],\n          materialid: null\n        };\n        var currVolumeNode = node.firstElementChild;\n        if (node.attributes.materialid !== undefined) {\n          volume.materialId = node.attributes.materialid.nodeValue;\n        }\n        while (currVolumeNode) {\n          if (currVolumeNode.nodeName === 'metadata') {\n            if (currVolumeNode.attributes.type !== undefined) {\n              if (currVolumeNode.attributes.type.value === 'name') {\n                volume.name = currVolumeNode.textContent;\n              }\n            }\n          } else if (currVolumeNode.nodeName === 'triangle') {\n            var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n            var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n            var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n            volume.triangles.push(v1, v2, v3);\n          }\n          currVolumeNode = currVolumeNode.nextElementSibling;\n        }\n        return volume;\n      }\n      function loadMeshVertices(node) {\n        var vertArray = [];\n        var normalArray = [];\n        var currVerticesNode = node.firstElementChild;\n        while (currVerticesNode) {\n          if (currVerticesNode.nodeName === 'vertex') {\n            var vNode = currVerticesNode.firstElementChild;\n            while (vNode) {\n              if (vNode.nodeName === 'coordinates') {\n                var x = vNode.getElementsByTagName('x')[0].textContent;\n                var y = vNode.getElementsByTagName('y')[0].textContent;\n                var z = vNode.getElementsByTagName('z')[0].textContent;\n                vertArray.push(x, y, z);\n              } else if (vNode.nodeName === 'normal') {\n                var nx = vNode.getElementsByTagName('nx')[0].textContent;\n                var ny = vNode.getElementsByTagName('ny')[0].textContent;\n                var nz = vNode.getElementsByTagName('nz')[0].textContent;\n                normalArray.push(nx, ny, nz);\n              }\n              vNode = vNode.nextElementSibling;\n            }\n          }\n          currVerticesNode = currVerticesNode.nextElementSibling;\n        }\n        return {\n          vertices: vertArray,\n          normals: normalArray\n        };\n      }\n      function loadObject(node) {\n        var objId = node.attributes.id.textContent;\n        var loadedObject = {\n          name: 'amfobject',\n          meshes: []\n        };\n        var currColor = null;\n        var currObjNode = node.firstElementChild;\n        while (currObjNode) {\n          if (currObjNode.nodeName === 'metadata') {\n            if (currObjNode.attributes.type !== undefined) {\n              if (currObjNode.attributes.type.value === 'name') {\n                loadedObject.name = currObjNode.textContent;\n              }\n            }\n          } else if (currObjNode.nodeName === 'color') {\n            currColor = loadColor(currObjNode);\n          } else if (currObjNode.nodeName === 'mesh') {\n            var currMeshNode = currObjNode.firstElementChild;\n            var mesh = {\n              vertices: [],\n              normals: [],\n              volumes: [],\n              color: currColor\n            };\n            while (currMeshNode) {\n              if (currMeshNode.nodeName === 'vertices') {\n                var loadedVertices = loadMeshVertices(currMeshNode);\n                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n              } else if (currMeshNode.nodeName === 'volume') {\n                mesh.volumes.push(loadMeshVolume(currMeshNode));\n              }\n              currMeshNode = currMeshNode.nextElementSibling;\n            }\n            loadedObject.meshes.push(mesh);\n          }\n          currObjNode = currObjNode.nextElementSibling;\n        }\n        return {\n          id: objId,\n          obj: loadedObject\n        };\n      }\n      var xmlData = loadDocument(data);\n      var amfName = '';\n      var amfAuthor = '';\n      var amfScale = loadDocumentScale(xmlData);\n      var amfMaterials = {};\n      var amfObjects = {};\n      var childNodes = xmlData.documentElement.childNodes;\n      var i, j;\n      for (i = 0; i < childNodes.length; i++) {\n        var child = childNodes[i];\n        if (child.nodeName === 'metadata') {\n          if (child.attributes.type !== undefined) {\n            if (child.attributes.type.value === 'name') {\n              amfName = child.textContent;\n            } else if (child.attributes.type.value === 'author') {\n              amfAuthor = child.textContent;\n            }\n          }\n        } else if (child.nodeName === 'material') {\n          var loadedMaterial = loadMaterials(child);\n          amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n        } else if (child.nodeName === 'object') {\n          var loadedObject = loadObject(child);\n          amfObjects[loadedObject.id] = loadedObject.obj;\n        }\n      }\n      var sceneObject = new Group();\n      var defaultMaterial = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      sceneObject.name = amfName;\n      sceneObject.userData.author = amfAuthor;\n      sceneObject.userData.loader = 'AMF';\n      for (var id in amfObjects) {\n        var part = amfObjects[id];\n        var meshes = part.meshes;\n        var newObject = new Group();\n        newObject.name = part.name || '';\n        for (i = 0; i < meshes.length; i++) {\n          var objDefaultMaterial = defaultMaterial;\n          var mesh = meshes[i];\n          var vertices = new Float32BufferAttribute(mesh.vertices, 3);\n          var normals = null;\n          if (mesh.normals.length) {\n            normals = new Float32BufferAttribute(mesh.normals, 3);\n          }\n          if (mesh.color) {\n            var color = mesh.color;\n            objDefaultMaterial = defaultMaterial.clone();\n            objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n            if (color.a !== 1.0) {\n              objDefaultMaterial.transparent = true;\n              objDefaultMaterial.opacity = color.a;\n            }\n          }\n          var volumes = mesh.volumes;\n          for (j = 0; j < volumes.length; j++) {\n            var volume = volumes[j];\n            var newGeometry = new BufferGeometry();\n            var material = objDefaultMaterial;\n            newGeometry.setIndex(volume.triangles);\n            newGeometry.setAttribute('position', vertices.clone());\n            if (normals) {\n              newGeometry.setAttribute('normal', normals.clone());\n            }\n            if (amfMaterials[volume.materialId] !== undefined) {\n              material = amfMaterials[volume.materialId];\n            }\n            newGeometry.scale(amfScale, amfScale, amfScale);\n            newObject.add(new Mesh(newGeometry, material.clone()));\n          }\n        }\n        sceneObject.add(newObject);\n      }\n      return sceneObject;\n    }\n  }]);\n  return AMFLoader;\n}(Loader);\nexport { AMFLoader };","map":{"version":3,"names":["Loader","FileLoader","Group","MeshPhongMaterial","Float32BufferAttribute","Color","BufferGeometry","Mesh","LoaderUtils","unzipSync","AMFLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","loadDocument","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","substr","buffer","fileText","decodeText","xmlData","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","undefined","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","j","child","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/AMFLoader.js"],"sourcesContent":["import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function loadDocument(data) {\n      let view = new DataView(data);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n      if (magic === 'PK') {\n        let zip = null;\n        let file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n\n        try {\n          zip = unzipSync(new Uint8Array(data));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === '.amf') {\n            break;\n          }\n        }\n\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n\n      const fileText = LoaderUtils.decodeText(view);\n      const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n\n      return xmlData;\n    }\n\n    function loadDocumentScale(node) {\n      let scale = 1.0;\n      let unit = 'millimeter';\n\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n\n      const scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n\n    function loadMaterials(node) {\n      let matName = 'AMF Material';\n      const matId = node.attributes.id.textContent;\n      let color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      let loadedMaterial = null;\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matChildEl = node.childNodes[i];\n\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n\n    function loadColor(node) {\n      const color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matColor = node.childNodes[i];\n\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n\n      return color;\n    }\n\n    function loadMeshVolume(node) {\n      const volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      let currVolumeNode = node.firstElementChild;\n\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          const v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n\n      return volume;\n    }\n\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          let vNode = currVerticesNode.firstElementChild;\n\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              const x = vNode.getElementsByTagName('x')[0].textContent;\n              const y = vNode.getElementsByTagName('y')[0].textContent;\n              const z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              const nx = vNode.getElementsByTagName('nx')[0].textContent;\n              const ny = vNode.getElementsByTagName('ny')[0].textContent;\n              const nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n\n            vNode = vNode.nextElementSibling;\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n\n          loadedObject.meshes.push(mesh);\n        }\n\n        currObjNode = currObjNode.nextElementSibling;\n      }\n\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n\n    const xmlData = loadDocument(data);\n    let amfName = '';\n    let amfAuthor = '';\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || '';\n\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n\n        const volumes = mesh.volumes;\n\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n\n      sceneObject.add(newObject);\n    }\n\n    return sceneObject;\n  }\n\n}\n\nexport { AMFLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}