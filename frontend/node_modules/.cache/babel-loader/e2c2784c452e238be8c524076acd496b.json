{"ast":null,"code":"import { Vector3, Vector2, Plane, Line3 } from 'three';\nexport var closestPointLineToLine = function () {\n  // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n  var dir1 = new Vector3();\n  var dir2 = new Vector3();\n  var v02 = new Vector3();\n  return function closestPointLineToLine(l1, l2, result) {\n    var v0 = l1.start;\n    var v10 = dir1;\n    var v2 = l2.start;\n    var v32 = dir2;\n    v02.subVectors(v0, v2);\n    dir1.subVectors(l1.end, l1.start);\n    dir2.subVectors(l2.end, l2.start);\n\n    // float d0232 = v02.Dot(v32);\n    var d0232 = v02.dot(v32);\n\n    // float d3210 = v32.Dot(v10);\n    var d3210 = v32.dot(v10);\n\n    // float d3232 = v32.Dot(v32);\n    var d3232 = v32.dot(v32);\n\n    // float d0210 = v02.Dot(v10);\n    var d0210 = v02.dot(v10);\n\n    // float d1010 = v10.Dot(v10);\n    var d1010 = v10.dot(v10);\n\n    // float denom = d1010*d3232 - d3210*d3210;\n    var denom = d1010 * d3232 - d3210 * d3210;\n    var d, d2;\n    if (denom !== 0) {\n      d = (d0232 * d3210 - d0210 * d3232) / denom;\n    } else {\n      d = 0;\n    }\n    d2 = (d0232 + d * d3210) / d3232;\n    result.x = d;\n    result.y = d2;\n  };\n}();\nexport var closestPointsSegmentToSegment = function () {\n  // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n  var paramResult = new Vector2();\n  var temp1 = new Vector3();\n  var temp2 = new Vector3();\n  return function closestPointsSegmentToSegment(l1, l2, target1, target2) {\n    closestPointLineToLine(l1, l2, paramResult);\n    var d = paramResult.x;\n    var d2 = paramResult.y;\n    if (d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1) {\n      l1.at(d, target1);\n      l2.at(d2, target2);\n      return;\n    } else if (d >= 0 && d <= 1) {\n      // Only d2 is out of bounds.\n      if (d2 < 0) {\n        l2.at(0, target2);\n      } else {\n        l2.at(1, target2);\n      }\n      l1.closestPointToPoint(target2, true, target1);\n      return;\n    } else if (d2 >= 0 && d2 <= 1) {\n      // Only d is out of bounds.\n      if (d < 0) {\n        l1.at(0, target1);\n      } else {\n        l1.at(1, target1);\n      }\n      l2.closestPointToPoint(target1, true, target2);\n      return;\n    } else {\n      // Both u and u2 are out of bounds.\n      var p;\n      if (d < 0) {\n        p = l1.start;\n      } else {\n        p = l1.end;\n      }\n      var p2;\n      if (d2 < 0) {\n        p2 = l2.start;\n      } else {\n        p2 = l2.end;\n      }\n      var closestPoint = temp1;\n      var closestPoint2 = temp2;\n      l1.closestPointToPoint(p2, true, temp1);\n      l2.closestPointToPoint(p, true, temp2);\n      if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {\n        target1.copy(closestPoint);\n        target2.copy(p2);\n        return;\n      } else {\n        target1.copy(p);\n        target2.copy(closestPoint2);\n        return;\n      }\n    }\n  };\n}();\nexport var sphereIntersectTriangle = function () {\n  // https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n  var closestPointTemp = new Vector3();\n  var projectedPointTemp = new Vector3();\n  var planeTemp = new Plane();\n  var lineTemp = new Line3();\n  return function sphereIntersectTriangle(sphere, triangle) {\n    var radius = sphere.radius,\n      center = sphere.center;\n    var a = triangle.a,\n      b = triangle.b,\n      c = triangle.c;\n\n    // phase 1\n    lineTemp.start = a;\n    lineTemp.end = b;\n    var closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint1.distanceTo(center) <= radius) return true;\n    lineTemp.start = a;\n    lineTemp.end = c;\n    var closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint2.distanceTo(center) <= radius) return true;\n    lineTemp.start = b;\n    lineTemp.end = c;\n    var closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint3.distanceTo(center) <= radius) return true;\n\n    // phase 2\n    var plane = triangle.getPlane(planeTemp);\n    var dp = Math.abs(plane.distanceToPoint(center));\n    if (dp <= radius) {\n      var pp = plane.projectPoint(center, projectedPointTemp);\n      var cp = triangle.containsPoint(pp);\n      if (cp) return true;\n    }\n    return false;\n  };\n}();","map":{"version":3,"names":["Vector3","Vector2","Plane","Line3","closestPointLineToLine","dir1","dir2","v02","l1","l2","result","v0","start","v10","v2","v32","subVectors","end","d0232","dot","d3210","d3232","d0210","d1010","denom","d","d2","x","y","closestPointsSegmentToSegment","paramResult","temp1","temp2","target1","target2","at","closestPointToPoint","p","p2","closestPoint","closestPoint2","distanceToSquared","copy","sphereIntersectTriangle","closestPointTemp","projectedPointTemp","planeTemp","lineTemp","sphere","triangle","radius","center","a","b","c","closestPoint1","distanceTo","closestPoint3","plane","getPlane","dp","Math","abs","distanceToPoint","pp","projectPoint","cp","containsPoint"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-mesh-bvh/src/math/MathUtilities.js"],"sourcesContent":["import { Vector3, Vector2, Plane, Line3 } from 'three';\r\n\r\nexport const closestPointLineToLine = ( function () {\r\n\r\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\r\n\tconst dir1 = new Vector3();\r\n\tconst dir2 = new Vector3();\r\n\tconst v02 = new Vector3();\r\n\treturn function closestPointLineToLine( l1, l2, result ) {\r\n\r\n\t\tconst v0 = l1.start;\r\n\t\tconst v10 = dir1;\r\n\t\tconst v2 = l2.start;\r\n\t\tconst v32 = dir2;\r\n\r\n\t\tv02.subVectors( v0, v2 );\r\n\t\tdir1.subVectors( l1.end, l1.start );\r\n\t\tdir2.subVectors( l2.end, l2.start );\r\n\r\n\t\t// float d0232 = v02.Dot(v32);\r\n\t\tconst d0232 = v02.dot( v32 );\r\n\r\n\t\t// float d3210 = v32.Dot(v10);\r\n\t\tconst d3210 = v32.dot( v10 );\r\n\r\n\t\t// float d3232 = v32.Dot(v32);\r\n\t\tconst d3232 = v32.dot( v32 );\r\n\r\n\t\t// float d0210 = v02.Dot(v10);\r\n\t\tconst d0210 = v02.dot( v10 );\r\n\r\n\t\t// float d1010 = v10.Dot(v10);\r\n\t\tconst d1010 = v10.dot( v10 );\r\n\r\n\t\t// float denom = d1010*d3232 - d3210*d3210;\r\n\t\tconst denom = d1010 * d3232 - d3210 * d3210;\r\n\r\n\t\tlet d, d2;\r\n\t\tif ( denom !== 0 ) {\r\n\r\n\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\r\n\r\n\t\t} else {\r\n\r\n\t\t\td = 0;\r\n\r\n\t\t}\r\n\r\n\t\td2 = ( d0232 + d * d3210 ) / d3232;\r\n\r\n\t\tresult.x = d;\r\n\t\tresult.y = d2;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const closestPointsSegmentToSegment = ( function () {\r\n\r\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\r\n\tconst paramResult = new Vector2();\r\n\tconst temp1 = new Vector3();\r\n\tconst temp2 = new Vector3();\r\n\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\r\n\r\n\t\tclosestPointLineToLine( l1, l2, paramResult );\r\n\r\n\t\tlet d = paramResult.x;\r\n\t\tlet d2 = paramResult.y;\r\n\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\r\n\r\n\t\t\tl1.at( d, target1 );\r\n\t\t\tl2.at( d2, target2 );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( d >= 0 && d <= 1 ) {\r\n\r\n\t\t\t// Only d2 is out of bounds.\r\n\t\t\tif ( d2 < 0 ) {\r\n\r\n\t\t\t\tl2.at( 0, target2 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl2.at( 1, target2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl1.closestPointToPoint( target2, true, target1 );\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\r\n\r\n\t\t\t// Only d is out of bounds.\r\n\t\t\tif ( d < 0 ) {\r\n\r\n\t\t\t\tl1.at( 0, target1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl1.at( 1, target1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl2.closestPointToPoint( target1, true, target2 );\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Both u and u2 are out of bounds.\r\n\t\t\tlet p;\r\n\t\t\tif ( d < 0 ) {\r\n\r\n\t\t\t\tp = l1.start;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp = l1.end;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet p2;\r\n\t\t\tif ( d2 < 0 ) {\r\n\r\n\t\t\t\tp2 = l2.start;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp2 = l2.end;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst closestPoint = temp1;\r\n\t\t\tconst closestPoint2 = temp2;\r\n\t\t\tl1.closestPointToPoint( p2, true, temp1 );\r\n\t\t\tl2.closestPointToPoint( p, true, temp2 );\r\n\r\n\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\r\n\r\n\t\t\t\ttarget1.copy( closestPoint );\r\n\t\t\t\ttarget2.copy( p2 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttarget1.copy( p );\r\n\t\t\t\ttarget2.copy( closestPoint2 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nexport const sphereIntersectTriangle = ( function () {\r\n\r\n\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\r\n\tconst closestPointTemp = new Vector3();\r\n\tconst projectedPointTemp = new Vector3();\r\n\tconst planeTemp = new Plane();\r\n\tconst lineTemp = new Line3();\r\n\treturn function sphereIntersectTriangle( sphere, triangle ) {\r\n\r\n\t\tconst { radius, center } = sphere;\r\n\t\tconst { a, b, c } = triangle;\r\n\r\n\t\t// phase 1\r\n\t\tlineTemp.start = a;\r\n\t\tlineTemp.end = b;\r\n\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\tlineTemp.start = a;\r\n\t\tlineTemp.end = c;\r\n\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\tlineTemp.start = b;\r\n\t\tlineTemp.end = c;\r\n\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\r\n\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\r\n\r\n\t\t// phase 2\r\n\t\tconst plane = triangle.getPlane( planeTemp );\r\n\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\r\n\t\tif ( dp <= radius ) {\r\n\r\n\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\r\n\t\t\tconst cp = triangle.containsPoint( pp );\r\n\t\t\tif ( cp ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}