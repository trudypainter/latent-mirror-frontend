{"ast":null,"code":"import _slicedToArray from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nvar _taskCache = new WeakMap();\nvar BasisTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(BasisTextureLoader, _Loader);\n  var _super = _createSuper(BasisTextureLoader);\n  function BasisTextureLoader(manager) {\n    var _this;\n    _classCallCheck(this, BasisTextureLoader);\n    _this = _super.call(this, manager);\n    _this.transcoderPath = '';\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = '';\n    _this.workerConfig = null;\n    return _this;\n  }\n  _createClass(BasisTextureLoader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.setWithCredentials(this.withCredentials);\n      var texture = new CompressedTexture();\n      loader.load(url, function (buffer) {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this2._createTexture([buffer]).then(function (_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }).catch(onError);\n      }, onProgress, onError);\n      return texture;\n    }\n    /** Low-level transcoding API, exposed for use by KTX2Loader. */\n  }, {\n    key: \"parseInternalAsync\",\n    value: function parseInternalAsync(options) {\n      var levels = options.levels;\n      var buffers = new Set();\n      for (var i = 0; i < levels.length; i++) {\n        buffers.add(levels[i].data.buffer);\n      }\n      return this._createTexture(Array.from(buffers), _objectSpread(_objectSpread({}, options), {}, {\n        lowLevel: true\n      }));\n    }\n    /**\n     * @param {ArrayBuffer[]} buffers\n     * @param {object?} config\n     * @return {Promise<CompressedTexture>}\n     */\n  }, {\n    key: \"_createTexture\",\n    value: function _createTexture(buffers) {\n      var _this3 = this;\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var worker;\n      var taskID;\n      var taskConfig = config;\n      var taskCost = 0;\n      for (var i = 0; i < buffers.length; i++) {\n        taskCost += buffers[i].byteLength;\n      }\n      var texturePending = this._allocateWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: 'transcode',\n            id: taskID,\n            buffers: buffers,\n            taskConfig: taskConfig\n          }, buffers);\n        });\n      }).then(function (message) {\n        var mipmaps = message.mipmaps,\n          width = message.width,\n          height = message.height,\n          format = message.format;\n        var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n        texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        texture.needsUpdate = true;\n        return texture;\n      }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n      texturePending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          worker._taskLoad -= taskCost;\n          delete worker._callbacks[taskID];\n        }\n      }); // Cache the task result.\n\n      _taskCache.set(buffers[0], {\n        promise: texturePending\n      });\n      return texturePending;\n    }\n  }, {\n    key: \"_initTranscoder\",\n    value: function _initTranscoder() {\n      var _this4 = this;\n      if (!this.transcoderPending) {\n        // Load transcoder wrapper.\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n        }); // Load transcoder WASM binary.\n\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType('arraybuffer');\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n        });\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent = _ref2[0],\n            binaryContent = _ref2[1];\n          var fn = BasisTextureLoader.BasisWorker.toString();\n          var body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this4.transcoderBinary = binaryContent;\n        });\n      }\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"_allocateWorker\",\n    value: function _allocateWorker(taskCost) {\n      var _this5 = this;\n      return this._initTranscoder().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var _worker2 = new Worker(_this5.workerSourceURL);\n          _worker2._callbacks = {};\n          _worker2._taskLoad = 0;\n          _worker2.postMessage({\n            type: 'init',\n            config: _this5.workerConfig,\n            transcoderBinary: _this5.transcoderBinary\n          });\n          _worker2.onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n              case 'transcode':\n                _worker2._callbacks[message.id].resolve(message);\n                break;\n              case 'error':\n                _worker2._callbacks[message.id].reject(message);\n                break;\n              default:\n                console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n          _this5.workerPool.push(_worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; i++) {\n        this.workerPool[i].terminate();\n      }\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n  return BasisTextureLoader;\n}(Loader); /* CONSTANTS */\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function onmessage(e) {\n    var message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(function () {\n          try {\n            var _ref3 = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]),\n              width = _ref3.width,\n              height = _ref3.height,\n              hasAlpha = _ref3.hasAlpha,\n              mipmaps = _ref3.mipmaps,\n              format = _ref3.format;\n            var buffers = [];\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(function () {\n      BasisModule.initializeBasis();\n    });\n  }\n  function transcodeLowLevel(taskConfig) {\n    var basisFormat = taskConfig.basisFormat,\n      width = taskConfig.width,\n      height = taskConfig.height,\n      hasAlpha = taskConfig.hasAlpha;\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n      transcoderFormat = _getTranscoderFormat.transcoderFormat,\n      engineFormat = _getTranscoderFormat.engineFormat;\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    var mipmaps = [];\n    if (basisFormat === BasisFormat.ETC1S) {\n      var transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      var _taskConfig$globalDat = taskConfig.globalData,\n        endpointCount = _taskConfig$globalDat.endpointCount,\n        endpointsData = _taskConfig$globalDat.endpointsData,\n        selectorCount = _taskConfig$globalDat.selectorCount,\n        selectorsData = _taskConfig$globalDat.selectorsData,\n        tablesData = _taskConfig$globalDat.tablesData;\n      try {\n        var ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n        for (var i = 0; i < taskConfig.levels.length; i++) {\n          var level = taskConfig.levels[i];\n          var imageDesc = taskConfig.globalData.imageDescs[i];\n          var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          var dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (var _i = 0; _i < taskConfig.levels.length; _i++) {\n        var _level = taskConfig.levels[_i];\n        var _dstByteLength = getTranscodedImageByteLength(transcoderFormat, _level.width, _level.height);\n        var _dst = new Uint8Array(_dstByteLength);\n        var _ok = BasisModule.transcodeUASTCImage(transcoderFormat, _dst, _dstByteLength / blockByteLength, _level.data, getWidthInBlocks(transcoderFormat, _level.width), getHeightInBlocks(transcoderFormat, _level.height), _level.width, _level.height, _level.index, 0, _level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(_ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + _level.index + '.');\n        mipmaps.push({\n          data: _dst,\n          width: _level.width,\n          height: _level.height\n        });\n      }\n    }\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  }\n  function transcode(buffer) {\n    var basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    var basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = basisFile.getImageWidth(0, 0);\n    var height = basisFile.getImageHeight(0, 0);\n    var levels = basisFile.getNumLevels(0);\n    var hasAlpha = basisFile.getHasAlpha();\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n    var _getTranscoderFormat2 = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n      transcoderFormat = _getTranscoderFormat2.transcoderFormat,\n      engineFormat = _getTranscoderFormat2.engineFormat;\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n    var mipmaps = [];\n    for (var mip = 0; mip < levels; mip++) {\n      var mipWidth = basisFile.getImageWidth(0, mip);\n      var mipHeight = basisFile.getImageHeight(0, mip);\n      var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      var status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n  var FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      var paddedWidth = width + 3 & ~3;\n      var paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\nexport { BasisTextureLoader };","map":{"version":3,"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","_taskCache","WeakMap","BasisTextureLoader","manager","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","path","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","url","onLoad","onProgress","onError","loader","setResponseType","setWithCredentials","withCredentials","texture","load","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","options","levels","buffers","Set","i","length","add","data","Array","from","lowLevel","config","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_initTranscoder","Worker","onmessage","e","console","error","push","sort","a","b","terminate","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","transcodeLowLevel","transcode","hasAlpha","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","getTranscoderFormat","transcoderFormat","engineFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","globalData","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max","value"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nconst _taskCache = new WeakMap();\n\nclass BasisTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n\n  parseInternalAsync(options) {\n    const {\n      levels\n    } = options;\n    const buffers = new Set();\n\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n\n    return this._createTexture(Array.from(buffers), { ...options,\n      lowLevel: true\n    });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n\n\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n\n    const texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      const {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = BasisTextureLoader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n\n    return this.transcoderPending;\n  }\n\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    const {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    const mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}