{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, LineBasicMaterial, Group, Euler, BufferGeometry, Float32BufferAttribute, LineSegments } from 'three';\n\n/**\n * GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n *\n * Gcode files are composed by commands used by machines to create objects.\n *\n * @class GCodeLoader\n * @param {Manager} manager Loading manager.\n */\nvar GCodeLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(GCodeLoader, _Loader);\n  var _super = _createSuper(GCodeLoader);\n  function GCodeLoader(manager) {\n    var _this;\n    _classCallCheck(this, GCodeLoader);\n    _this = _super.call(this, manager);\n    _this.splitLayer = false;\n    return _this;\n  }\n  _createClass(GCodeLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var state = {\n        x: 0,\n        y: 0,\n        z: 0,\n        e: 0,\n        f: 0,\n        extruding: false,\n        relative: false\n      };\n      var layers = [];\n      var currentLayer = undefined;\n      var pathMaterial = new LineBasicMaterial({\n        color: 0xff0000\n      });\n      pathMaterial.name = 'path';\n      var extrudingMaterial = new LineBasicMaterial({\n        color: 0x00ff00\n      });\n      extrudingMaterial.name = 'extruded';\n      function newLayer(line) {\n        currentLayer = {\n          vertex: [],\n          pathVertex: [],\n          z: line.z\n        };\n        layers.push(currentLayer);\n      } //Create lie segment between p1 and p2\n\n      function addSegment(p1, p2) {\n        if (currentLayer === undefined) {\n          newLayer(p1);\n        }\n        if (state.extruding) {\n          currentLayer.vertex.push(p1.x, p1.y, p1.z);\n          currentLayer.vertex.push(p2.x, p2.y, p2.z);\n        } else {\n          currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n          currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n        }\n      }\n      function delta(v1, v2) {\n        return state.relative ? v2 : v2 - v1;\n      }\n      function absolute(v1, v2) {\n        return state.relative ? v1 + v2 : v2;\n      }\n      var lines = data.replace(/;.+/g, '').split('\\n');\n      var _loop = function _loop(i) {\n        var tokens = lines[i].split(' ');\n        var cmd = tokens[0].toUpperCase(); //Argumments\n\n        var args = {};\n        tokens.splice(1).forEach(function (token) {\n          if (token[0] !== undefined) {\n            var key = token[0].toLowerCase();\n            var value = parseFloat(token.substring(1));\n            args[key] = value;\n          }\n        }); //Process commands\n        //G0/G1 â€“ Linear Movement\n\n        if (cmd === 'G0' || cmd === 'G1') {\n          var line = {\n            x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n            y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n            z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n            e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n            f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n          }; //Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\n          if (delta(state.e, line.e) > 0) {\n            line.extruding = delta(state.e, line.e) > 0;\n            if (currentLayer == undefined || line.z != currentLayer.z) {\n              newLayer(line);\n            }\n          }\n          addSegment(state, line);\n          state = line;\n        } else if (cmd === 'G2' || cmd === 'G3') ;else if (cmd === 'G90') {\n          //G90: Set to Absolute Positioning\n          state.relative = false;\n        } else if (cmd === 'G91') {\n          //G91: Set to state.relative Positioning\n          state.relative = true;\n        } else if (cmd === 'G92') {\n          //G92: Set Position\n          var _line = state;\n          _line.x = args.x !== undefined ? args.x : _line.x;\n          _line.y = args.y !== undefined ? args.y : _line.y;\n          _line.z = args.z !== undefined ? args.z : _line.z;\n          _line.e = args.e !== undefined ? args.e : _line.e;\n          state = _line;\n        } else ;\n      };\n      for (var i = 0; i < lines.length; i++) {\n        _loop(i);\n      }\n      function addObject(vertex, extruding, i) {\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', new Float32BufferAttribute(vertex, 3));\n        var segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n        segments.name = 'layer' + i;\n        object.add(segments);\n      }\n      var object = new Group();\n      object.name = 'gcode';\n      if (this.splitLayer) {\n        for (var _i = 0; _i < layers.length; _i++) {\n          var layer = layers[_i];\n          addObject(layer.vertex, true, _i);\n          addObject(layer.pathVertex, false, _i);\n        }\n      } else {\n        var vertex = [],\n          pathVertex = [];\n        for (var _i2 = 0; _i2 < layers.length; _i2++) {\n          var _layer = layers[_i2];\n          var layerVertex = _layer.vertex;\n          var layerPathVertex = _layer.pathVertex;\n          for (var j = 0; j < layerVertex.length; j++) {\n            vertex.push(layerVertex[j]);\n          }\n          for (var _j = 0; _j < layerPathVertex.length; _j++) {\n            pathVertex.push(layerPathVertex[_j]);\n          }\n        }\n        addObject(vertex, true, layers.length);\n        addObject(pathVertex, false, layers.length);\n      }\n      object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n      return object;\n    }\n  }]);\n  return GCodeLoader;\n}(Loader);\nexport { GCodeLoader };","map":{"version":3,"names":["Loader","FileLoader","LineBasicMaterial","Group","Euler","BufferGeometry","Float32BufferAttribute","LineSegments","GCodeLoader","manager","splitLayer","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","state","x","y","z","f","extruding","relative","layers","currentLayer","undefined","pathMaterial","color","name","extrudingMaterial","newLayer","line","vertex","pathVertex","push","addSegment","p1","p2","delta","v1","v2","absolute","lines","replace","split","i","tokens","cmd","toUpperCase","args","splice","forEach","token","key","toLowerCase","value","parseFloat","substring","length","addObject","geometry","setAttribute","segments","object","add","layer","layerVertex","layerPathVertex","j","quaternion","setFromEuler","Math","PI"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/GCodeLoader.js"],"sourcesContent":["import { Loader, FileLoader, LineBasicMaterial, Group, Euler, BufferGeometry, Float32BufferAttribute, LineSegments } from 'three';\n\n/**\n * GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n *\n * Gcode files are composed by commands used by machines to create objects.\n *\n * @class GCodeLoader\n * @param {Manager} manager Loading manager.\n */\n\nclass GCodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.splitLayer = false;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    let state = {\n      x: 0,\n      y: 0,\n      z: 0,\n      e: 0,\n      f: 0,\n      extruding: false,\n      relative: false\n    };\n    let layers = [];\n    let currentLayer = undefined;\n    const pathMaterial = new LineBasicMaterial({\n      color: 0xff0000\n    });\n    pathMaterial.name = 'path';\n    const extrudingMaterial = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    extrudingMaterial.name = 'extruded';\n\n    function newLayer(line) {\n      currentLayer = {\n        vertex: [],\n        pathVertex: [],\n        z: line.z\n      };\n      layers.push(currentLayer);\n    } //Create lie segment between p1 and p2\n\n\n    function addSegment(p1, p2) {\n      if (currentLayer === undefined) {\n        newLayer(p1);\n      }\n\n      if (state.extruding) {\n        currentLayer.vertex.push(p1.x, p1.y, p1.z);\n        currentLayer.vertex.push(p2.x, p2.y, p2.z);\n      } else {\n        currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n        currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n      }\n    }\n\n    function delta(v1, v2) {\n      return state.relative ? v2 : v2 - v1;\n    }\n\n    function absolute(v1, v2) {\n      return state.relative ? v1 + v2 : v2;\n    }\n\n    let lines = data.replace(/;.+/g, '').split('\\n');\n\n    for (let i = 0; i < lines.length; i++) {\n      let tokens = lines[i].split(' ');\n      let cmd = tokens[0].toUpperCase(); //Argumments\n\n      let args = {};\n      tokens.splice(1).forEach(function (token) {\n        if (token[0] !== undefined) {\n          let key = token[0].toLowerCase();\n          let value = parseFloat(token.substring(1));\n          args[key] = value;\n        }\n      }); //Process commands\n      //G0/G1 â€“ Linear Movement\n\n      if (cmd === 'G0' || cmd === 'G1') {\n        let line = {\n          x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n          y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n          z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n          e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n          f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n        }; //Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\n        if (delta(state.e, line.e) > 0) {\n          line.extruding = delta(state.e, line.e) > 0;\n\n          if (currentLayer == undefined || line.z != currentLayer.z) {\n            newLayer(line);\n          }\n        }\n\n        addSegment(state, line);\n        state = line;\n      } else if (cmd === 'G2' || cmd === 'G3') ; else if (cmd === 'G90') {\n        //G90: Set to Absolute Positioning\n        state.relative = false;\n      } else if (cmd === 'G91') {\n        //G91: Set to state.relative Positioning\n        state.relative = true;\n      } else if (cmd === 'G92') {\n        //G92: Set Position\n        let line = state;\n        line.x = args.x !== undefined ? args.x : line.x;\n        line.y = args.y !== undefined ? args.y : line.y;\n        line.z = args.z !== undefined ? args.z : line.z;\n        line.e = args.e !== undefined ? args.e : line.e;\n        state = line;\n      } else ;\n    }\n\n    function addObject(vertex, extruding, i) {\n      let geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertex, 3));\n      let segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n      segments.name = 'layer' + i;\n      object.add(segments);\n    }\n\n    const object = new Group();\n    object.name = 'gcode';\n\n    if (this.splitLayer) {\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        addObject(layer.vertex, true, i);\n        addObject(layer.pathVertex, false, i);\n      }\n    } else {\n      const vertex = [],\n            pathVertex = [];\n\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        let layerVertex = layer.vertex;\n        let layerPathVertex = layer.pathVertex;\n\n        for (let j = 0; j < layerVertex.length; j++) {\n          vertex.push(layerVertex[j]);\n        }\n\n        for (let j = 0; j < layerPathVertex.length; j++) {\n          pathVertex.push(layerPathVertex[j]);\n        }\n      }\n\n      addObject(vertex, true, layers.length);\n      addObject(pathVertex, false, layers.length);\n    }\n\n    object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    return object;\n  }\n\n}\n\nexport { GCodeLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}