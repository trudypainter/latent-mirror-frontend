{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from 'three';\n\n/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\nvar MDDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(MDDLoader, _Loader);\n  var _super = _createSuper(MDDLoader);\n  function MDDLoader(manager) {\n    _classCallCheck(this, MDDLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(MDDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (data) {\n        onLoad(scope.parse(data));\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var view = new DataView(data);\n      var totalFrames = view.getUint32(0);\n      var totalPoints = view.getUint32(4);\n      var offset = 8; // animation clip\n\n      var times = new Float32Array(totalFrames);\n      var values = new Float32Array(totalFrames * totalFrames).fill(0);\n      for (var i = 0; i < totalFrames; i++) {\n        times[i] = view.getFloat32(offset);\n        offset += 4;\n        values[totalFrames * i + i] = 1;\n      }\n      var track = new NumberKeyframeTrack('.morphTargetInfluences', times, values);\n      var clip = new AnimationClip('default', times[times.length - 1], [track]); // morph targets\n\n      var morphTargets = [];\n      for (var _i = 0; _i < totalFrames; _i++) {\n        var morphTarget = new Float32Array(totalPoints * 3);\n        for (var j = 0; j < totalPoints; j++) {\n          var stride = j * 3;\n          morphTarget[stride + 0] = view.getFloat32(offset);\n          offset += 4; // x\n\n          morphTarget[stride + 1] = view.getFloat32(offset);\n          offset += 4; // y\n\n          morphTarget[stride + 2] = view.getFloat32(offset);\n          offset += 4; // z\n        }\n\n        var attribute = new BufferAttribute(morphTarget, 3);\n        attribute.name = 'morph_' + _i;\n        morphTargets.push(attribute);\n      }\n      return {\n        morphTargets: morphTargets,\n        clip: clip\n      };\n    }\n  }]);\n  return MDDLoader;\n}(Loader);\nexport { MDDLoader };","map":{"version":3,"names":["Loader","FileLoader","NumberKeyframeTrack","AnimationClip","BufferAttribute","MDDLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","load","data","parse","view","DataView","totalFrames","getUint32","totalPoints","offset","times","Float32Array","values","fill","i","getFloat32","track","clip","length","morphTargets","morphTarget","j","stride","attribute","name","push"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/loaders/MDDLoader.js"],"sourcesContent":["import { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from 'three';\n\n/**\n * MDD is a special format that stores a position for every vertex in a model for every frame in an animation.\n * Similar to BVH, it can be used to transfer animation data between different 3D applications or engines.\n *\n * MDD stores its data in binary format (big endian) in the following way:\n *\n * number of frames (a single uint32)\n * number of vertices (a single uint32)\n * time values for each frame (sequence of float32)\n * vertex data for each frame (sequence of float32)\n */\n\nclass MDDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (data) {\n      onLoad(scope.parse(data));\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const view = new DataView(data);\n    const totalFrames = view.getUint32(0);\n    const totalPoints = view.getUint32(4);\n    let offset = 8; // animation clip\n\n    const times = new Float32Array(totalFrames);\n    const values = new Float32Array(totalFrames * totalFrames).fill(0);\n\n    for (let i = 0; i < totalFrames; i++) {\n      times[i] = view.getFloat32(offset);\n      offset += 4;\n      values[totalFrames * i + i] = 1;\n    }\n\n    const track = new NumberKeyframeTrack('.morphTargetInfluences', times, values);\n    const clip = new AnimationClip('default', times[times.length - 1], [track]); // morph targets\n\n    const morphTargets = [];\n\n    for (let i = 0; i < totalFrames; i++) {\n      const morphTarget = new Float32Array(totalPoints * 3);\n\n      for (let j = 0; j < totalPoints; j++) {\n        const stride = j * 3;\n        morphTarget[stride + 0] = view.getFloat32(offset);\n        offset += 4; // x\n\n        morphTarget[stride + 1] = view.getFloat32(offset);\n        offset += 4; // y\n\n        morphTarget[stride + 2] = view.getFloat32(offset);\n        offset += 4; // z\n      }\n\n      const attribute = new BufferAttribute(morphTarget, 3);\n      attribute.name = 'morph_' + i;\n      morphTargets.push(attribute);\n    }\n\n    return {\n      morphTargets: morphTargets,\n      clip: clip\n    };\n  }\n\n}\n\nexport { MDDLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}