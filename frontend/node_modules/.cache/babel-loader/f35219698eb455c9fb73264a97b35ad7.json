{"ast":null,"code":"import _defineProperty from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as THREE from 'three';\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  var material = /*#__PURE__*/function (_THREE$ShaderMaterial) {\n    _inherits(material, _THREE$ShaderMaterial);\n    var _super = _createSuper(material);\n    function material() {\n      var _this;\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _classCallCheck(this, material);\n      var entries = Object.entries(uniforms); // Create unforms and shaders\n\n      _this = _super.call(this, _objectSpread({\n        uniforms: entries.reduce(function (acc, _ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            value = _ref2[1];\n          var uniform = THREE.UniformsUtils.clone(_defineProperty({}, name, {\n            value: value\n          }));\n          return _objectSpread(_objectSpread({}, acc), uniform);\n        }, {}),\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader\n      }, parameters)); // Create getter/setters\n\n      _this.key = '';\n      entries.forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n          name = _ref4[0];\n        return Object.defineProperty(_assertThisInitialized(_this), name, {\n          get: function get() {\n            return _this.uniforms[name].value;\n          },\n          set: function set(v) {\n            return _this.uniforms[name].value = v;\n          }\n        });\n      });\n      if (onInit) onInit(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(material);\n  }(THREE.ShaderMaterial);\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\nexport { shaderMaterial };","map":{"version":3,"names":["THREE","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","material","parameters","entries","Object","reduce","acc","name","value","uniform","UniformsUtils","clone","key","forEach","defineProperty","get","set","v","ShaderMaterial","MathUtils","generateUUID"],"sources":["/Users/trudypainter/Desktop/latent internet mirror/frontend/node_modules/@react-three/drei/core/shaderMaterial.js"],"sourcesContent":["import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor(parameters = {}) {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader,\n        ...parameters\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };\n"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,cAAc,CAACC,QAAQ,EAAEC,YAAY,EAAEC,cAAc,EAAEC,MAAM,EAAE;EACtE,IAAMC,QAAQ;IAAA;IAAA;IACZ,oBAA6B;MAAA;MAAA,IAAjBC,UAAU,uEAAG,CAAC,CAAC;MAAA;MACzB,IAAMC,OAAO,GAAGC,MAAM,CAACD,OAAO,CAACN,QAAQ,CAAC,CAAC,CAAC;;MAE1C;QACEA,QAAQ,EAAEM,OAAO,CAACE,MAAM,CAAC,UAACC,GAAG,QAAoB;UAAA;YAAjBC,IAAI;YAAEC,KAAK;UACzC,IAAMC,OAAO,GAAGd,KAAK,CAACe,aAAa,CAACC,KAAK,qBACtCJ,IAAI,EAAG;YACNC,KAAK,EAALA;UACF,CAAC,EACD;UACF,uCAAYF,GAAG,GACVG,OAAO;QAEd,CAAC,EAAE,CAAC,CAAC,CAAC;QACNX,YAAY,EAAZA,YAAY;QACZC,cAAc,EAAdA;MAAc,GACXG,UAAU,GACZ,CAAC;;MAEJ,MAAKU,GAAG,GAAG,EAAE;MACbT,OAAO,CAACU,OAAO,CAAC;QAAA;UAAEN,IAAI;QAAA,OAAMH,MAAM,CAACU,cAAc,gCAAOP,IAAI,EAAE;UAC5DQ,GAAG,EAAE;YAAA,OAAM,MAAKlB,QAAQ,CAACU,IAAI,CAAC,CAACC,KAAK;UAAA;UACpCQ,GAAG,EAAE,aAAAC,CAAC;YAAA,OAAI,MAAKpB,QAAQ,CAACU,IAAI,CAAC,CAACC,KAAK,GAAGS,CAAC;UAAA;QACzC,CAAC,CAAC;MAAA,EAAC;MACH,IAAIjB,MAAM,EAAEA,MAAM,+BAAM;MAAC;IAC3B;IAAC;EAAA,EA1BqCL,KAAK,CAACuB,cAAc,CA4B3D;EACDjB,QAAQ,CAACW,GAAG,GAAGjB,KAAK,CAACwB,SAAS,CAACC,YAAY,EAAE;EAC7C,OAAOnB,QAAQ;AACjB;AAEA,SAASL,cAAc"},"metadata":{},"sourceType":"module"}