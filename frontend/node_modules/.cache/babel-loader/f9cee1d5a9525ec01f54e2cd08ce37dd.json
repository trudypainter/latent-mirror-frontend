{"ast":null,"code":"import _classCallCheck from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/trudypainter/Desktop/latent-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Scene, WebGLRenderTarget, FloatType, MeshPhongMaterial, MeshBasicMaterial, DoubleSide, PlaneGeometry, Mesh } from 'three';\nimport potpack from 'potpack';\n\n/**\n * Progressive Light Map Accumulator, by [zalo](https://github.com/zalo/)\n *\n * To use, simply construct a `ProgressiveLightMap` object,\n * `plmap.addObjectsToLightMap(object)` an array of semi-static\n * objects and lights to the class once, and then call\n * `plmap.update(camera)` every frame to begin accumulating\n * lighting samples.\n *\n * This should begin accumulating lightmaps which apply to\n * your objects, so you can start jittering lighting to achieve\n * the texture-space effect you're looking for.\n *\n * @param {WebGLRenderer} renderer A WebGL Rendering Context\n * @param {number} res The side-long dimension of you total lightmap\n */\nvar ProgressiveLightMap = /*#__PURE__*/function () {\n  function ProgressiveLightMap(renderer) {\n    var _this = this;\n    var res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1024;\n    _classCallCheck(this, ProgressiveLightMap);\n    this.renderer = renderer;\n    this.res = res;\n    this.lightMapContainers = [];\n    this.compiled = false;\n    this.scene = new Scene();\n    this.scene.background = null;\n    this.tinyTarget = new WebGLRenderTarget(1, 1);\n    this.buffer1Active = false;\n    this.firstUpdate = true;\n    this.warned = false; // Create the Progressive LightMap Texture\n\n    var format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? alfFloatType : FloatType;\n    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    });\n    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    }); // Inject some spicy new logic into a standard phong material\n\n    this.uvMat = new MeshPhongMaterial();\n    this.uvMat.uniforms = {};\n    this.uvMat.onBeforeCompile = function (shader) {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_LIGHTMAP\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv2 - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\n      var bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = 'varying vec2 vUv2;\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + \"\\nvec3 texelOld = texture2D(previousShadowMap, vUv2).rgb;\\n\\t\\t\\t\\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\\n\\t\\t\\t}\"; // Set the Previous Frame's Texture Buffer and Averaging Window\n\n      shader.uniforms.previousShadowMap = {\n        value: _this.progressiveLightMap1.texture\n      };\n      shader.uniforms.averagingWindow = {\n        value: 100\n      };\n      _this.uvMat.uniforms = shader.uniforms; // Set the new Shader to this\n\n      _this.uvMat.userData.shader = shader;\n      _this.compiled = true;\n    };\n  }\n  /**\n   * Sets these objects' materials' lightmaps and modifies their uv2's.\n   * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n   */\n  _createClass(ProgressiveLightMap, [{\n    key: \"addObjectsToLightMap\",\n    value: function addObjectsToLightMap(objects) {\n      // Prepare list of UV bounding boxes for packing later...\n      this.uv_boxes = [];\n      var padding = 3 / this.res;\n      for (var ob = 0; ob < objects.length; ob++) {\n        var object = objects[ob]; // If this object is a light, simply add it to the internal scene\n\n        if (object.isLight) {\n          this.scene.attach(object);\n          continue;\n        }\n        if (!object.geometry.hasAttribute('uv')) {\n          console.warn('All lightmap objects need UVs!');\n          continue;\n        }\n        if (this.blurringPlane == null) {\n          this._initializeBlurPlane(this.res, this.progressiveLightMap1);\n        } // Apply the lightmap to the object\n\n        object.material.lightMap = this.progressiveLightMap2.texture;\n        object.material.dithering = true;\n        object.castShadow = true;\n        object.receiveShadow = true;\n        object.renderOrder = 1000 + ob; // Prepare UV boxes for potpack\n        // TODO: Size these by object surface area\n\n        this.uv_boxes.push({\n          w: 1 + padding * 2,\n          h: 1 + padding * 2,\n          index: ob\n        });\n        this.lightMapContainers.push({\n          basicMat: object.material,\n          object: object\n        });\n        this.compiled = false;\n      } // Pack the objects' lightmap UVs into the same global space\n\n      var dimensions = potpack(this.uv_boxes);\n      this.uv_boxes.forEach(function (box) {\n        var uv2 = objects[box.index].geometry.getAttribute('uv').clone();\n        for (var i = 0; i < uv2.array.length; i += uv2.itemSize) {\n          uv2.array[i] = (uv2.array[i] + box.x + padding) / dimensions.w;\n          uv2.array[i + 1] = (uv2.array[i + 1] + box.y + padding) / dimensions.h;\n        }\n        objects[box.index].geometry.setAttribute('uv2', uv2);\n        objects[box.index].geometry.getAttribute('uv2').needsUpdate = true;\n      });\n    }\n    /**\n     * This function renders each mesh one at a time into their respective surface maps\n     * @param {Camera} camera Standard Rendering Camera\n     * @param {number} blendWindow When >1, samples will accumulate over time.\n     * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n     */\n  }, {\n    key: \"update\",\n    value: function update(camera) {\n      var blendWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      var blurEdges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (this.blurringPlane == null) {\n        return;\n      } // Store the original Render Target\n\n      var oldTarget = this.renderer.getRenderTarget(); // The blurring plane applies blur to the seams of the lightmap\n\n      this.blurringPlane.visible = blurEdges; // Steal the Object3D from the real world to our special dimension\n\n      for (var l = 0; l < this.lightMapContainers.length; l++) {\n        this.lightMapContainers[l].object.oldScene = this.lightMapContainers[l].object.parent;\n        this.scene.attach(this.lightMapContainers[l].object);\n      } // Render once normally to initialize everything\n\n      if (this.firstUpdate) {\n        this.renderer.setRenderTarget(this.tinyTarget); // Tiny for Speed\n\n        this.renderer.render(this.scene, camera);\n        this.firstUpdate = false;\n      } // Set each object's material to the UV Unwrapped Surface Mapping Version\n\n      for (var _l = 0; _l < this.lightMapContainers.length; _l++) {\n        this.uvMat.uniforms.averagingWindow = {\n          value: blendWindow\n        };\n        this.lightMapContainers[_l].object.material = this.uvMat;\n        this.lightMapContainers[_l].object.oldFrustumCulled = this.lightMapContainers[_l].object.frustumCulled;\n        this.lightMapContainers[_l].object.frustumCulled = false;\n      } // Ping-pong two surface buffers for reading/writing\n\n      var activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n      var inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1; // Render the object's surface maps\n\n      this.renderer.setRenderTarget(activeMap);\n      this.uvMat.uniforms.previousShadowMap = {\n        value: inactiveMap.texture\n      };\n      this.blurringPlane.material.uniforms.previousShadowMap = {\n        value: inactiveMap.texture\n      };\n      this.buffer1Active = !this.buffer1Active;\n      this.renderer.render(this.scene, camera); // Restore the object's Real-time Material and add it back to the original world\n\n      for (var _l2 = 0; _l2 < this.lightMapContainers.length; _l2++) {\n        this.lightMapContainers[_l2].object.frustumCulled = this.lightMapContainers[_l2].object.oldFrustumCulled;\n        this.lightMapContainers[_l2].object.material = this.lightMapContainers[_l2].basicMat;\n        this.lightMapContainers[_l2].object.oldScene.attach(this.lightMapContainers[_l2].object);\n      } // Restore the original Render Target\n\n      this.renderer.setRenderTarget(oldTarget);\n    }\n    /** DEBUG\n     * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n     * @param {boolean} visible Whether the debug plane should be visible\n     * @param {Vector3} position Where the debug plane should be drawn\n     */\n  }, {\n    key: \"showDebugLightmap\",\n    value: function showDebugLightmap(visible) {\n      var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      if (this.lightMapContainers.length == 0) {\n        if (!this.warned) {\n          console.warn('Call this after adding the objects!');\n          this.warned = true;\n        }\n        return;\n      }\n      if (this.labelMesh == null) {\n        this.labelMaterial = new MeshBasicMaterial({\n          map: this.progressiveLightMap1.texture,\n          side: DoubleSide\n        });\n        this.labelPlane = new PlaneGeometry(100, 100);\n        this.labelMesh = new Mesh(this.labelPlane, this.labelMaterial);\n        this.labelMesh.position.y = 250;\n        this.lightMapContainers[0].object.parent.add(this.labelMesh);\n      }\n      if (position != undefined) {\n        this.labelMesh.position.copy(position);\n      }\n      this.labelMesh.visible = visible;\n    }\n    /**\n     * INTERNAL Creates the Blurring Plane\n     * @param {number} res The square resolution of this object's lightMap.\n     * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n     */\n  }, {\n    key: \"_initializeBlurPlane\",\n    value: function _initializeBlurPlane(res) {\n      var _this2 = this;\n      var lightMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var blurMaterial = new MeshBasicMaterial();\n      blurMaterial.uniforms = {\n        previousShadowMap: {\n          value: null\n        },\n        pixelOffset: {\n          value: 1.0 / res\n        },\n        polygonOffset: true,\n        polygonOffsetFactor: -1,\n        polygonOffsetUnits: 3.0\n      };\n      blurMaterial.onBeforeCompile = function (shader) {\n        // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n        shader.vertexShader = '#define USE_UV\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to 9-tap box blur the current frame's Shadows\n\n        var bodyStart = shader.fragmentShader.indexOf('void main() {');\n        shader.fragmentShader = '#define USE_UV\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + \"\\tgl_FragColor.rgb = (\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\\n\\t\\t}\"; // Set the LightMap Accumulation Buffer\n\n        shader.uniforms.previousShadowMap = {\n          value: lightMap.texture\n        };\n        shader.uniforms.pixelOffset = {\n          value: 0.5 / res\n        };\n        blurMaterial.uniforms = shader.uniforms; // Set the new Shader to this\n\n        blurMaterial.userData.shader = shader;\n        _this2.compiled = true;\n      };\n      this.blurringPlane = new Mesh(new PlaneGeometry(1, 1), blurMaterial);\n      this.blurringPlane.name = 'Blurring Plane';\n      this.blurringPlane.frustumCulled = false;\n      this.blurringPlane.renderOrder = 0;\n      this.blurringPlane.material.depthWrite = false;\n      this.scene.add(this.blurringPlane);\n    }\n  }]);\n  return ProgressiveLightMap;\n}();\nexport { ProgressiveLightMap };","map":{"version":3,"names":["Scene","WebGLRenderTarget","FloatType","MeshPhongMaterial","MeshBasicMaterial","DoubleSide","PlaneGeometry","Mesh","potpack","ProgressiveLightMap","renderer","res","lightMapContainers","compiled","scene","background","tinyTarget","buffer1Active","firstUpdate","warned","format","test","navigator","userAgent","alfFloatType","progressiveLightMap1","type","progressiveLightMap2","uvMat","uniforms","onBeforeCompile","shader","vertexShader","slice","bodyStart","fragmentShader","indexOf","previousShadowMap","value","texture","averagingWindow","userData","objects","uv_boxes","padding","ob","length","object","isLight","attach","geometry","hasAttribute","console","warn","blurringPlane","_initializeBlurPlane","material","lightMap","dithering","castShadow","receiveShadow","renderOrder","push","w","h","index","basicMat","dimensions","forEach","box","uv2","getAttribute","clone","i","array","itemSize","x","y","setAttribute","needsUpdate","camera","blendWindow","blurEdges","oldTarget","getRenderTarget","visible","l","oldScene","parent","setRenderTarget","render","oldFrustumCulled","frustumCulled","activeMap","inactiveMap","position","undefined","labelMesh","labelMaterial","map","side","labelPlane","add","copy","blurMaterial","pixelOffset","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","name","depthWrite"],"sources":["/Users/trudypainter/Desktop/latent-2/frontend/node_modules/three-stdlib/misc/ProgressiveLightmap.js"],"sourcesContent":["import { Scene, WebGLRenderTarget, FloatType, MeshPhongMaterial, MeshBasicMaterial, DoubleSide, PlaneGeometry, Mesh } from 'three';\nimport potpack from 'potpack';\n\n/**\n * Progressive Light Map Accumulator, by [zalo](https://github.com/zalo/)\n *\n * To use, simply construct a `ProgressiveLightMap` object,\n * `plmap.addObjectsToLightMap(object)` an array of semi-static\n * objects and lights to the class once, and then call\n * `plmap.update(camera)` every frame to begin accumulating\n * lighting samples.\n *\n * This should begin accumulating lightmaps which apply to\n * your objects, so you can start jittering lighting to achieve\n * the texture-space effect you're looking for.\n *\n * @param {WebGLRenderer} renderer A WebGL Rendering Context\n * @param {number} res The side-long dimension of you total lightmap\n */\n\nclass ProgressiveLightMap {\n  constructor(renderer, res = 1024) {\n    this.renderer = renderer;\n    this.res = res;\n    this.lightMapContainers = [];\n    this.compiled = false;\n    this.scene = new Scene();\n    this.scene.background = null;\n    this.tinyTarget = new WebGLRenderTarget(1, 1);\n    this.buffer1Active = false;\n    this.firstUpdate = true;\n    this.warned = false; // Create the Progressive LightMap Texture\n\n    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? alfFloatType : FloatType;\n    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    });\n    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    }); // Inject some spicy new logic into a standard phong material\n\n    this.uvMat = new MeshPhongMaterial();\n    this.uvMat.uniforms = {};\n\n    this.uvMat.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_LIGHTMAP\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv2 - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = 'varying vec2 vUv2;\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\\nvec3 texelOld = texture2D(previousShadowMap, vUv2).rgb;\n\t\t\t\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\n\t\t\t}`; // Set the Previous Frame's Texture Buffer and Averaging Window\n\n      shader.uniforms.previousShadowMap = {\n        value: this.progressiveLightMap1.texture\n      };\n      shader.uniforms.averagingWindow = {\n        value: 100\n      };\n      this.uvMat.uniforms = shader.uniforms; // Set the new Shader to this\n\n      this.uvMat.userData.shader = shader;\n      this.compiled = true;\n    };\n  }\n  /**\n   * Sets these objects' materials' lightmaps and modifies their uv2's.\n   * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n   */\n\n\n  addObjectsToLightMap(objects) {\n    // Prepare list of UV bounding boxes for packing later...\n    this.uv_boxes = [];\n    const padding = 3 / this.res;\n\n    for (let ob = 0; ob < objects.length; ob++) {\n      const object = objects[ob]; // If this object is a light, simply add it to the internal scene\n\n      if (object.isLight) {\n        this.scene.attach(object);\n        continue;\n      }\n\n      if (!object.geometry.hasAttribute('uv')) {\n        console.warn('All lightmap objects need UVs!');\n        continue;\n      }\n\n      if (this.blurringPlane == null) {\n        this._initializeBlurPlane(this.res, this.progressiveLightMap1);\n      } // Apply the lightmap to the object\n\n\n      object.material.lightMap = this.progressiveLightMap2.texture;\n      object.material.dithering = true;\n      object.castShadow = true;\n      object.receiveShadow = true;\n      object.renderOrder = 1000 + ob; // Prepare UV boxes for potpack\n      // TODO: Size these by object surface area\n\n      this.uv_boxes.push({\n        w: 1 + padding * 2,\n        h: 1 + padding * 2,\n        index: ob\n      });\n      this.lightMapContainers.push({\n        basicMat: object.material,\n        object: object\n      });\n      this.compiled = false;\n    } // Pack the objects' lightmap UVs into the same global space\n\n\n    const dimensions = potpack(this.uv_boxes);\n    this.uv_boxes.forEach(box => {\n      const uv2 = objects[box.index].geometry.getAttribute('uv').clone();\n\n      for (let i = 0; i < uv2.array.length; i += uv2.itemSize) {\n        uv2.array[i] = (uv2.array[i] + box.x + padding) / dimensions.w;\n        uv2.array[i + 1] = (uv2.array[i + 1] + box.y + padding) / dimensions.h;\n      }\n\n      objects[box.index].geometry.setAttribute('uv2', uv2);\n      objects[box.index].geometry.getAttribute('uv2').needsUpdate = true;\n    });\n  }\n  /**\n   * This function renders each mesh one at a time into their respective surface maps\n   * @param {Camera} camera Standard Rendering Camera\n   * @param {number} blendWindow When >1, samples will accumulate over time.\n   * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n   */\n\n\n  update(camera, blendWindow = 100, blurEdges = true) {\n    if (this.blurringPlane == null) {\n      return;\n    } // Store the original Render Target\n\n\n    const oldTarget = this.renderer.getRenderTarget(); // The blurring plane applies blur to the seams of the lightmap\n\n    this.blurringPlane.visible = blurEdges; // Steal the Object3D from the real world to our special dimension\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.oldScene = this.lightMapContainers[l].object.parent;\n      this.scene.attach(this.lightMapContainers[l].object);\n    } // Render once normally to initialize everything\n\n\n    if (this.firstUpdate) {\n      this.renderer.setRenderTarget(this.tinyTarget); // Tiny for Speed\n\n      this.renderer.render(this.scene, camera);\n      this.firstUpdate = false;\n    } // Set each object's material to the UV Unwrapped Surface Mapping Version\n\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.uvMat.uniforms.averagingWindow = {\n        value: blendWindow\n      };\n      this.lightMapContainers[l].object.material = this.uvMat;\n      this.lightMapContainers[l].object.oldFrustumCulled = this.lightMapContainers[l].object.frustumCulled;\n      this.lightMapContainers[l].object.frustumCulled = false;\n    } // Ping-pong two surface buffers for reading/writing\n\n\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1; // Render the object's surface maps\n\n    this.renderer.setRenderTarget(activeMap);\n    this.uvMat.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.blurringPlane.material.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera); // Restore the object's Real-time Material and add it back to the original world\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.frustumCulled = this.lightMapContainers[l].object.oldFrustumCulled;\n      this.lightMapContainers[l].object.material = this.lightMapContainers[l].basicMat;\n      this.lightMapContainers[l].object.oldScene.attach(this.lightMapContainers[l].object);\n    } // Restore the original Render Target\n\n\n    this.renderer.setRenderTarget(oldTarget);\n  }\n  /** DEBUG\n   * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n   * @param {boolean} visible Whether the debug plane should be visible\n   * @param {Vector3} position Where the debug plane should be drawn\n   */\n\n\n  showDebugLightmap(visible, position = undefined) {\n    if (this.lightMapContainers.length == 0) {\n      if (!this.warned) {\n        console.warn('Call this after adding the objects!');\n        this.warned = true;\n      }\n\n      return;\n    }\n\n    if (this.labelMesh == null) {\n      this.labelMaterial = new MeshBasicMaterial({\n        map: this.progressiveLightMap1.texture,\n        side: DoubleSide\n      });\n      this.labelPlane = new PlaneGeometry(100, 100);\n      this.labelMesh = new Mesh(this.labelPlane, this.labelMaterial);\n      this.labelMesh.position.y = 250;\n      this.lightMapContainers[0].object.parent.add(this.labelMesh);\n    }\n\n    if (position != undefined) {\n      this.labelMesh.position.copy(position);\n    }\n\n    this.labelMesh.visible = visible;\n  }\n  /**\n   * INTERNAL Creates the Blurring Plane\n   * @param {number} res The square resolution of this object's lightMap.\n   * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n   */\n\n\n  _initializeBlurPlane(res, lightMap = null) {\n    const blurMaterial = new MeshBasicMaterial();\n    blurMaterial.uniforms = {\n      previousShadowMap: {\n        value: null\n      },\n      pixelOffset: {\n        value: 1.0 / res\n      },\n      polygonOffset: true,\n      polygonOffsetFactor: -1,\n      polygonOffsetUnits: 3.0\n    };\n\n    blurMaterial.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_UV\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to 9-tap box blur the current frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = '#define USE_UV\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\tgl_FragColor.rgb = (\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\n\t\t}`; // Set the LightMap Accumulation Buffer\n\n      shader.uniforms.previousShadowMap = {\n        value: lightMap.texture\n      };\n      shader.uniforms.pixelOffset = {\n        value: 0.5 / res\n      };\n      blurMaterial.uniforms = shader.uniforms; // Set the new Shader to this\n\n      blurMaterial.userData.shader = shader;\n      this.compiled = true;\n    };\n\n    this.blurringPlane = new Mesh(new PlaneGeometry(1, 1), blurMaterial);\n    this.blurringPlane.name = 'Blurring Plane';\n    this.blurringPlane.frustumCulled = false;\n    this.blurringPlane.renderOrder = 0;\n    this.blurringPlane.material.depthWrite = false;\n    this.scene.add(this.blurringPlane);\n  }\n\n}\n\nexport { ProgressiveLightMap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}